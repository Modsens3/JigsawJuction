{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nPuzzleCraft is a Greek e-commerce web application for creating personalized jigsaw puzzles. Users can upload their own photos or choose from pre-designed templates to create custom puzzles in different materials (wood, acrylic, paper), sizes, and piece counts. The application features a modern React frontend with a Node.js/Express backend and uses PostgreSQL for data storage.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\nAdmin panel requirements: Separate admin authentication system at /admin route with username/password protection.\nNavigation preferences: Removed \"Γενήτρια Παζλ\", \"Προσαρμογέας\", \"Κοινότητα\", and \"Επεξεργαστής Εικόνας\" tabs from main navigation menu.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Framework**: shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling\n- **State Management**: Zustand for cart state management\n- **Data Fetching**: TanStack Query (React Query) for server state management and API caching\n- **Form Handling**: React Hook Form with Zod validation schemas\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Style**: RESTful API with dedicated routes for templates, orders, and cart management\n- **File Uploads**: Multer middleware for handling image uploads with validation\n- **Development**: Hot module replacement via Vite integration in development mode\n\n## Data Storage\n- **Database**: PostgreSQL with Neon Database as the cloud provider\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Validation**: Drizzle-Zod for runtime schema validation\n- **Session Storage**: In-memory storage for development with interface for future database implementation\n\n## Component Architecture\n- **Design System**: Modular component library using shadcn/ui pattern\n- **Styling**: Tailwind CSS with CSS custom properties for theming\n- **Responsive Design**: Mobile-first approach with responsive breakpoints\n- **Internationalization**: Greek language content with semantic HTML structure\n\n## Key Features\n- **Product Configurator**: Multi-step wizard for customizing puzzle specifications\n- **Template Gallery**: Filterable collection of pre-designed puzzle templates\n- **Shopping Cart**: Persistent cart state with quantity management\n- **File Upload**: Image upload with validation for custom puzzles\n- **Pricing Calculator**: Dynamic pricing based on material, size, and piece count\n\n## Development Workflow\n- **Build Process**: Vite for frontend bundling, esbuild for backend compilation\n- **Type Safety**: Full TypeScript coverage with shared types between frontend and backend\n- **Code Quality**: ESLint and TypeScript compiler checks\n- **Development Server**: Integrated Vite dev server with Express backend proxy\n\n# External Dependencies\n\n## Core Framework Dependencies\n- **React Ecosystem**: React 18, React DOM, React Hook Form, TanStack Query\n- **Build Tools**: Vite, TypeScript, esbuild for production builds\n- **Styling**: Tailwind CSS, PostCSS, Autoprefixer for styling infrastructure\n\n## UI Component Libraries\n- **Radix UI**: Comprehensive primitive components for accessibility and functionality\n- **Lucide React**: Icon library for consistent iconography\n- **shadcn/ui**: Pre-built component library for rapid development\n\n## Backend Infrastructure\n- **Express.js**: Web application framework with middleware support\n- **Multer**: File upload handling middleware\n- **CORS**: Cross-origin resource sharing configuration\n\n## Database Stack\n- **Neon Database**: Serverless PostgreSQL database hosting\n- **Drizzle ORM**: Type-safe database operations and queries\n- **Drizzle Kit**: Database migration and schema management tools\n\n## Development Tools\n- **Replit Integration**: Replit-specific plugins for development environment\n- **Wouter**: Lightweight routing library for single-page application navigation\n- **Date-fns**: Date manipulation utilities for timestamp handling\n\n## State Management\n- **Zustand**: Lightweight state management for cart functionality\n- **TanStack Query**: Server state management with caching and synchronization","size_bytes":4415},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        neutral: \"var(--neutral)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2790},"test-pieces.js":{"content":"// Test script to calculate pieces for different dimensions\nconst { CircleFractalJigsaw } = require('./client/src/lib/fractal-generator.ts');\n\nconst testDimensions = [\n  { cols: 15, rows: 10, name: 'Μικρό (15×10)' },\n  { cols: 20, rows: 15, name: 'Μεσαίο (20×15)' },\n  { cols: 25, rows: 20, name: 'Μεγάλο (25×20)' },\n  { cols: 30, rows: 25, name: 'Πολύ Μεγάλο (30×25)' }\n];\n\nconsole.log('Αναλύοντας κομμάτια παζλ για κάθε διάσταση:');\nconsole.log('='.repeat(50));\n\ntestDimensions.forEach(dim => {\n  const jig = new CircleFractalJigsaw(dim.cols, dim.rows, 1, 3);\n  jig.setSeed(123); // Fixed seed for consistent results\n  \n  jig.generate();\n  let fillIterations = 0;\n  while (jig.fillholes(false) && fillIterations < 10) {\n    fillIterations++;\n  }\n  jig.fillholes(true);\n  \n  const pieces = jig.getPieceCount();\n  const gridCells = dim.cols * dim.rows;\n  const ratio = (pieces / gridCells * 100).toFixed(1);\n  \n  console.log(`${dim.name}:`);\n  console.log(`  Πλέγμα: ${dim.cols}×${dim.rows} = ${gridCells} κελιά`);\n  console.log(`  Κομμάτια: ${pieces}`);\n  console.log(`  Αναλογία: ${ratio}% των κελιών γίνονται κομμάτια`);\n  console.log('');\n});","size_bytes":1267},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Session middleware for authentication\napp.use(session({\n  secret: 'fractalcraft-session-secret',\n  resave: false,\n  saveUninitialized: false,\n  cookie: { \n    secure: false, // Set to true in production with HTTPS\n    httpOnly: true,\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  }\n}));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2396},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertPuzzleOrderSchema, insertCartItemSchema } from \"@shared/schema\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport { randomUUID } from \"crypto\";\nimport fs from \"fs\";\n\n// Configure multer for file uploads\nconst upload = multer({\n  dest: 'uploads/',\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = /jpeg|jpg|png|gif/;\n    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\n    const mimetype = allowedTypes.test(file.mimetype);\n\n    if (mimetype && extname) {\n      return cb(null, true);\n    } else {\n      cb(new Error('Μόνο εικόνες επιτρέπονται (JPEG, JPG, PNG, GIF)'));\n    }\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth routes\n  app.post(\"/api/auth/signup\", async (req, res) => {\n    try {\n      const { firstName, lastName, email, password } = req.body;\n      \n      if (!firstName || !lastName || !email || !password) {\n        return res.status(400).json({ message: \"Όλα τα πεδία είναι απαραίτητα\" });\n      }\n      \n      // Simple validation\n      if (password.length < 6) {\n        return res.status(400).json({ message: \"Ο κωδικός πρέπει να έχει τουλάχιστον 6 χαρακτήρες\" });\n      }\n      \n      // In real app, hash password and save to database\n      console.log(\"User registered:\", { firstName, lastName, email });\n      \n      // Store user data in session\n      const userData = { \n        id: randomUUID(),\n        firstName, \n        lastName, \n        email,\n        createdAt: new Date().toISOString()\n      };\n      (req as any).session.user = userData;\n      \n      res.json({ \n        success: true, \n        user: userData,\n        message: \"Η εγγραφή ολοκληρώθηκε επιτυχώς\" \n      });\n    } catch (error) {\n      console.error(\"Signup error:\", error);\n      res.status(500).json({ message: \"Σφάλμα κατά την εγγραφή\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ message: \"Email και κωδικός είναι απαραίτητα\" });\n      }\n      \n      // In real app, verify credentials against database\n      console.log(\"User login attempt:\", { email });\n      \n      // Store user data in session\n      const userData = { \n        id: randomUUID(),\n        firstName: \"Χρήστης\", \n        lastName: \"Demo\",\n        email,\n        createdAt: new Date().toISOString()\n      };\n      (req as any).session.user = userData;\n      \n      res.json({ \n        success: true, \n        user: userData,\n        message: \"Η σύνδεση ολοκληρώθηκε επιτυχώς\" \n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Σφάλμα κατά τη σύνδεση\" });\n    }\n  });\n\n  // Upload custom image\n  app.post(\"/api/upload\", upload.single('image'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"Δεν επιλέχθηκε αρχείο\" });\n      }\n\n      // In a real application, you would upload to a cloud service like AWS S3\n      // For this demo, we'll return a placeholder URL\n      const imageUrl = `https://images.unsplash.com/photo-1606092195730-5d7b9af1efc5?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600`;\n      \n      res.json({ imageUrl });\n    } catch (error) {\n      res.status(500).json({ message: \"Σφάλμα κατά το ανέβασμα της εικόνας\" });\n    }\n  });\n\n  // Calculate puzzle price\n  app.post(\"/api/calculate-price\", async (req, res) => {\n    try {\n      const { size, material, pieceCount } = req.body;\n      \n      let basePrice = 25.00;\n      \n      // Size pricing\n      const sizePricing: Record<string, number> = {\n        \"30x40\": 0,\n        \"40x60\": 10,\n        \"60x80\": 25,\n        \"custom\": 15\n      };\n      \n      // Material pricing\n      const materialPricing: Record<string, number> = {\n        \"paper\": 0,\n        \"acrylic\": 10,\n        \"wood\": 15\n      };\n      \n      // Piece count pricing (per 100 pieces above 500)\n      let piecesPricing = 0;\n      if (pieceCount > 500) {\n        piecesPricing = Math.ceil((pieceCount - 500) / 100) * 5;\n      }\n      \n      const totalPrice = basePrice + \n                        (sizePricing[size] || 0) + \n                        (materialPricing[material] || 0) + \n                        piecesPricing;\n      \n      res.json({ price: totalPrice.toFixed(2) });\n    } catch (error) {\n      res.status(500).json({ message: \"Σφάλμα κατά τον υπολογισμό της τιμής\" });\n    }\n  });\n\n  // Get cart items\n  app.get(\"/api/cart\", async (req, res) => {\n    try {\n      const sessionId = req.session?.id || req.headers['x-session-id'] || 'anonymous';\n      const cartItems = await storage.getCartItems(sessionId as string);\n      res.json(cartItems);\n    } catch (error) {\n      res.status(500).json({ message: \"Σφάλμα κατά την ανάκτηση του καλαθιού\" });\n    }\n  });\n\n  // Add item to cart\n  app.post(\"/api/cart\", async (req, res) => {\n    try {\n      const sessionId = req.session?.id || req.headers['x-session-id'] || randomUUID();\n      const cartItemData = { ...req.body, sessionId };\n      \n      const validatedData = insertCartItemSchema.parse(cartItemData);\n      const cartItem = await storage.addCartItem(validatedData);\n      \n      res.json(cartItem);\n    } catch (error) {\n      res.status(400).json({ message: \"Μη έγκυρα δεδομένα καλαθιού\" });\n    }\n  });\n\n  // Update cart item\n  app.patch(\"/api/cart/:id\", async (req, res) => {\n    try {\n      const { quantity } = req.body;\n      const updatedItem = await storage.updateCartItem(req.params.id, quantity);\n      \n      if (!updatedItem) {\n        return res.status(404).json({ message: \"Το προϊόν δεν βρέθηκε στο καλάθι\" });\n      }\n      \n      res.json(updatedItem);\n    } catch (error) {\n      res.status(500).json({ message: \"Σφάλμα κατά την ενημέρωση του καλαθιού\" });\n    }\n  });\n\n  // Remove cart item\n  app.delete(\"/api/cart/:id\", async (req, res) => {\n    try {\n      const success = await storage.removeCartItem(req.params.id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Το προϊόν δεν βρέθηκε στο καλάθι\" });\n      }\n      \n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Σφάλμα κατά την αφαίρεση από το καλάθι\" });\n    }\n  });\n\n  // Create order - simplified version\n  app.post(\"/api/orders\", async (req, res) => {\n    try {\n      const orderData = req.body;\n      \n      // Simple validation\n      if (!orderData.firstName || !orderData.lastName || !orderData.email) {\n        return res.status(400).json({ message: \"Απαιτούνται προσωπικά στοιχεία\" });\n      }\n      \n      if (!orderData.items || orderData.items.length === 0) {\n        return res.status(400).json({ message: \"Το καλάθι είναι άδειο\" });\n      }\n      \n      // Create simple order response\n      const orderId = Math.random().toString(36).substring(2, 15);\n      \n      const order = {\n        id: orderId,\n        orderNumber: `ORD-${Date.now()}`,\n        customerName: `${orderData.firstName} ${orderData.lastName}`,\n        customerEmail: orderData.email,\n        items: orderData.items,\n        total: orderData.total,\n        status: \"pending\",\n        createdAt: new Date().toISOString()\n      };\n      \n      console.log(\"Order created:\", order);\n      \n      res.json({ success: true, orderId, order });\n    } catch (error) {\n      console.error(\"Order creation error:\", error);\n      res.status(500).json({ message: \"Σφάλμα κατά τη δημιουργία παραγγελίας\" });\n    }\n  });\n\n  // Serve puzzle generator HTML\n  app.get(\"/api/puzzle-generator\", async (req, res) => {\n    try {\n      const htmlPath = path.join(process.cwd(), 'attached_assets', 'complete_puzzle_generator_1754916001402.html');\n      \n      if (!fs.existsSync(htmlPath)) {\n        return res.status(404).json({ message: \"Puzzle generator not found\" });\n      }\n\n      let htmlContent = fs.readFileSync(htmlPath, 'utf8');\n      \n      // Customize the HTML to match FractalCraft branding\n      htmlContent = htmlContent.replace(\n        'KAPA - Γεννήτρια Προσωποποιημένων Puzzle',\n        'FractalCraft - Γεννήτρια Προσωποποιημένων Puzzle'\n      );\n      \n      // Update colors to match FractalCraft theme\n      htmlContent = htmlContent.replace(\n        'background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);',\n        'background: linear-gradient(135deg, #0f0023 0%, #1a0040 50%, #2d1b69 100%);'\n      );\n      \n      htmlContent = htmlContent.replace(\n        'border-bottom: 2px solid #3498db;',\n        'border-bottom: 2px solid #ff6b35;'\n      );\n\n      res.setHeader('Content-Type', 'text/html');\n      res.send(htmlContent);\n    } catch (error) {\n      res.status(500).json({ message: \"Error serving puzzle generator\" });\n    }\n  });\n\n  // Loyalty Program Routes\n  app.get(\"/api/loyalty/transactions\", async (req, res) => {\n    try {\n      const userId = \"mock-user-id\"; // In real app, get from auth\n      const transactions = await storage.getLoyaltyTransactions(userId);\n      res.json(transactions);\n    } catch (error) {\n      console.error(\"Error fetching loyalty transactions:\", error);\n      res.status(500).json({ message: \"Failed to fetch loyalty transactions\" });\n    }\n  });\n\n  app.post(\"/api/loyalty/redeem\", async (req, res) => {\n    try {\n      const userId = \"mock-user-id\";\n      const { points, rewardType, description } = req.body;\n      \n      const transaction = await storage.createLoyaltyTransaction({\n        userId,\n        points: -points,\n        type: \"redemption\",\n        description: description || `Redeemed ${rewardType}`\n      });\n      \n      res.json(transaction);\n    } catch (error) {\n      console.error(\"Error redeeming loyalty points:\", error);\n      res.status(500).json({ message: \"Failed to redeem points\" });\n    }\n  });\n\n  // Wishlist Routes\n  app.get(\"/api/wishlist\", async (req, res) => {\n    try {\n      const userId = \"mock-user-id\";\n      const wishlist = await storage.getWishlist(userId);\n      res.json(wishlist);\n    } catch (error) {\n      console.error(\"Error fetching wishlist:\", error);\n      res.status(500).json({ message: \"Failed to fetch wishlist\" });\n    }\n  });\n\n  app.post(\"/api/wishlist\", async (req, res) => {\n    try {\n      const userId = \"mock-user-id\";\n      const wishlistItem = await storage.addToWishlist({\n        userId,\n        ...req.body\n      });\n      res.json(wishlistItem);\n    } catch (error) {\n      console.error(\"Error adding to wishlist:\", error);\n      res.status(500).json({ message: \"Failed to add to wishlist\" });\n    }\n  });\n\n  app.delete(\"/api/wishlist/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.removeFromWishlist(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error removing from wishlist:\", error);\n      res.status(500).json({ message: \"Failed to remove from wishlist\" });\n    }\n  });\n\n  // Admin user management routes\n  app.get(\"/api/admin/users\", async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Σφάλμα κατά την ανάκτηση χρηστών\" });\n    }\n  });\n\n  app.post(\"/api/admin/users\", async (req, res) => {\n    try {\n      const { firstName, lastName, email } = req.body;\n      \n      if (!firstName || !lastName || !email) {\n        return res.status(400).json({ message: \"Όλα τα πεδία είναι υποχρεωτικά\" });\n      }\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Ο χρήστης υπάρχει ήδη\" });\n      }\n\n      const newUser = await storage.createUser({\n        firstName,\n        lastName,\n        email,\n      });\n      \n      console.log(\"User created via admin:\", newUser);\n      res.json({ success: true, user: newUser });\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      res.status(500).json({ message: \"Σφάλμα κατά τη δημιουργία χρήστη\" });\n    }\n  });\n\n  // Blog Routes\n  app.get(\"/api/blog\", async (req, res) => {\n    try {\n      const { published } = req.query;\n      const posts = await storage.getBlogPosts(published === 'true');\n      res.json(posts);\n    } catch (error) {\n      console.error(\"Error fetching blog posts:\", error);\n      res.status(500).json({ message: \"Failed to fetch blog posts\" });\n    }\n  });\n\n  app.get(\"/api/blog/:slug\", async (req, res) => {\n    try {\n      const { slug } = req.params;\n      const post = await storage.getBlogPost(slug);\n      if (post) {\n        res.json(post);\n      } else {\n        res.status(404).json({ message: \"Blog post not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error fetching blog post:\", error);\n      res.status(500).json({ message: \"Failed to fetch blog post\" });\n    }\n  });\n\n  // Subscription Routes\n  app.get(\"/api/subscriptions\", async (req, res) => {\n    try {\n      const userId = \"mock-user-id\";\n      const subscriptions = await storage.getUserSubscriptions(userId);\n      res.json(subscriptions);\n    } catch (error) {\n      console.error(\"Error fetching subscriptions:\", error);\n      res.status(500).json({ message: \"Failed to fetch subscriptions\" });\n    }\n  });\n\n  app.post(\"/api/subscriptions\", async (req, res) => {\n    try {\n      const userId = \"mock-user-id\";\n      const subscription = await storage.createSubscription({\n        userId,\n        ...req.body\n      });\n      res.json(subscription);\n    } catch (error) {\n      console.error(\"Error creating subscription:\", error);\n      res.status(500).json({ message: \"Failed to create subscription\" });\n    }\n  });\n\n  // Progress Tracking Routes\n  app.get(\"/api/progress\", async (req, res) => {\n    try {\n      const userId = \"mock-user-id\";\n      const progress = await storage.getPuzzleProgress(userId);\n      res.json(progress);\n    } catch (error) {\n      console.error(\"Error fetching puzzle progress:\", error);\n      res.status(500).json({ message: \"Failed to fetch puzzle progress\" });\n    }\n  });\n\n  app.patch(\"/api/progress/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { completedPieces, timeSpent } = req.body;\n      const progress = await storage.updatePuzzleProgress(id, completedPieces, timeSpent);\n      res.json(progress);\n    } catch (error) {\n      console.error(\"Error updating puzzle progress:\", error);\n      res.status(500).json({ message: \"Failed to update puzzle progress\" });\n    }\n  });\n\n  // Social Gallery Routes\n  app.get(\"/api/social/gallery\", async (req, res) => {\n    try {\n      const posts = await storage.getSocialGallery();\n      res.json(posts);\n    } catch (error) {\n      console.error(\"Error fetching social gallery:\", error);\n      res.status(500).json({ message: \"Failed to fetch social gallery\" });\n    }\n  });\n\n  app.get(\"/api/social/my-posts\", async (req, res) => {\n    try {\n      const userId = \"mock-user-id\";\n      const posts = await storage.getUserSocialPosts(userId);\n      res.json(posts);\n    } catch (error) {\n      console.error(\"Error fetching user social posts:\", error);\n      res.status(500).json({ message: \"Failed to fetch user social posts\" });\n    }\n  });\n\n  app.post(\"/api/social/like/:postId\", async (req, res) => {\n    try {\n      // Mock implementation - in real app would update likes in database\n      res.json({ success: true, liked: true });\n    } catch (error) {\n      console.error(\"Error liking post:\", error);\n      res.status(500).json({ message: \"Failed to like post\" });\n    }\n  });\n\n  // User Authentication Routes\n  app.post(\"/api/auth/signup\", async (req, res) => {\n    try {\n      const { email, password, firstName, lastName } = req.body;\n      \n      if (!email || !password || !firstName || !lastName) {\n        return res.status(400).json({ message: \"Όλα τα πεδία είναι απαραίτητα\" });\n      }\n\n      // Mock signup - in real app would hash password and save to database\n      const user = {\n        id: `user-${Date.now()}`,\n        email,\n        firstName,\n        lastName,\n        isVerified: false,\n        createdAt: new Date().toISOString()\n      };\n\n      res.json({ user, message: \"Λογαριασμός δημιουργήθηκε επιτυχώς\" });\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      res.status(500).json({ message: \"Σφάλμα δημιουργίας λογαριασμού\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ message: \"Email και κωδικός είναι απαραίτητα\" });\n      }\n\n      // Mock login - accepts any email/password for demo\n      const user = {\n        id: `user-${Date.now()}`,\n        email: email,\n        firstName: \"Δημήτρης\",\n        lastName: \"Παπαδόπουλος\",\n        profileImage: null,\n        createdAt: new Date().toISOString()\n      };\n\n      // Store user in session\n      (req as any).session.user = user;\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error during login:\", error);\n      res.status(500).json({ message: \"Σφάλμα σύνδεσης\" });\n    }\n  });\n\n  // Get current user\n  app.get(\"/api/auth/user\", async (req, res) => {\n    try {\n      const user = (req as any).session?.user;\n      if (!user) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", async (req, res) => {\n    try {\n      (req as any).session.destroy((err: any) => {\n        if (err) {\n          return res.status(500).json({ message: \"Σφάλμα αποσύνδεσης\" });\n        }\n        res.json({ message: \"Επιτυχής αποσύνδεση\" });\n      });\n    } catch (error) {\n      console.error(\"Error during logout:\", error);\n      res.status(500).json({ message: \"Σφάλμα αποσύνδεσης\" });\n    }\n  });\n\n  // Social authentication routes (mock)\n  app.get(\"/api/auth/google\", async (req, res) => {\n    const mockUser = {\n      id: \"google-user-1\",\n      email: \"user@gmail.com\", \n      firstName: \"Γιάννης\",\n      lastName: \"Google User\",\n      profileImage: \"https://lh3.googleusercontent.com/a/default-user\",\n      createdAt: new Date().toISOString()\n    };\n    \n    (req as any).session.user = mockUser;\n    res.redirect('/');\n  });\n\n  app.get(\"/api/auth/apple\", async (req, res) => {\n    const mockUser = {\n      id: \"apple-user-1\",\n      email: \"user@icloud.com\",\n      firstName: \"Μαρία\", \n      lastName: \"Apple User\",\n      profileImage: null,\n      createdAt: new Date().toISOString()\n    };\n    \n    (req as any).session.user = mockUser;\n    res.redirect('/');\n  });\n\n  // User orders endpoint\n  app.get(\"/api/user/orders\", async (req, res) => {\n    try {\n      const user = (req as any).session?.user;\n      if (!user) {\n        return res.status(401).json({ message: \"Not authenticated\" });\n      }\n      \n      // Mock user orders\n      const mockOrders = [\n        {\n          id: \"ORD-USER-001\",\n          orderNumber: \"FPC-2024-001\",\n          status: \"completed\",\n          total: 89.99,\n          createdAt: \"2024-01-10T10:00:00Z\",\n          items: [\n            {\n              name: \"Fractal Παζλ - Mandelbrot Set\",\n              description: \"500 κομμάτια, Ξύλο\",\n              price: 89.99,\n              quantity: 1,\n              image: \"/fractal-preview.jpg\"\n            }\n          ],\n          trackingNumber: \"FPC123456789\"\n        }\n      ];\n      \n      res.json(mockOrders);\n    } catch (error) {\n      console.error(\"Error fetching user orders:\", error);\n      res.status(500).json({ message: \"Server error\" });\n    }\n  });\n\n  // Admin Authentication Routes\n  app.post(\"/api/admin/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ message: \"Όνομα χρήστη και κωδικός είναι απαραίτητα\" });\n      }\n\n      // Check admin credentials\n      if (username === \"admin\" && password === \"admin123\") {\n        const admin = {\n          id: \"admin-1\",\n          username: \"admin\",\n          role: \"admin\",\n          lastLogin: new Date().toISOString()\n        };\n\n        res.json({ admin, message: \"Επιτυχής σύνδεση διαχειριστή\" });\n      } else {\n        res.status(401).json({ message: \"Λάθος όνομα χρήστη ή κωδικός πρόσβασης\" });\n      }\n    } catch (error) {\n      console.error(\"Error during admin login:\", error);\n      res.status(500).json({ message: \"Σφάλμα σύνδεσης διαχειριστή\" });\n    }\n  });\n\n  // Admin Dashboard Stats\n  app.get(\"/api/admin/stats\", async (req, res) => {\n    try {\n      const stats = {\n        totalOrders: 1247,\n        revenueToday: 3890.50,\n        productsCount: 156,\n        customersCount: 892,\n        revenueGrowth: 12.5,\n        ordersGrowth: 8.3\n      };\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching admin stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch stats\" });\n    }\n  });\n\n  app.get(\"/api/admin/recent-orders\", async (req, res) => {\n    try {\n      const recentOrders = [\n        { id: \"ORD-001\", customer: \"Μαρία Παπαδάκη\", amount: 89.90, status: \"processing\", date: \"2025-08-12\" },\n        { id: \"ORD-002\", customer: \"Γιάννης Κωστόπουλος\", amount: 124.50, status: \"shipped\", date: \"2025-08-12\" },\n        { id: \"ORD-003\", customer: \"Ελένη Αντωνίου\", amount: 67.30, status: \"delivered\", date: \"2025-08-11\" },\n        { id: \"ORD-004\", customer: \"Νίκος Σταθόπουλος\", amount: 156.80, status: \"pending\", date: \"2025-08-11\" },\n        { id: \"ORD-005\", customer: \"Σοφία Δημητρίου\", amount: 98.70, status: \"processing\", date: \"2025-08-11\" },\n      ];\n      res.json(recentOrders);\n    } catch (error) {\n      console.error(\"Error fetching recent orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch recent orders\" });\n    }\n  });\n\n  app.get(\"/api/admin/top-products\", async (req, res) => {\n    try {\n      const topProducts = [\n        { name: \"Fractal Mandala - 1000 κομμάτια\", sales: 89, revenue: 7892.10 },\n        { name: \"Προσωποποιημένο Puzzle - 500 κομμάτια\", sales: 67, revenue: 5896.30 },\n        { name: \"Sacred Geometry - 750 κομμάτια\", sales: 54, revenue: 4860.60 },\n        { name: \"Cosmic Patterns - 1500 κομμάτια\", sales: 43, revenue: 4087.40 },\n      ];\n      res.json(topProducts);\n    } catch (error) {\n      console.error(\"Error fetching top products:\", error);\n      res.status(500).json({ message: \"Failed to fetch top products\" });\n    }\n  });\n\n  // Order Processing Routes\n  app.post(\"/api/orders\", async (req, res) => {\n    try {\n      const orderData = req.body;\n      \n      // Extract puzzle configuration for SVG generation\n      const puzzleConfig = {\n        pieces: orderData.pieces || 500,\n        width: orderData.width || 400,\n        height: orderData.height || 300,\n        material: orderData.material || \"Ξύλο\"\n      };\n      \n      // Mock order processing - in real app would save to database\n      const orderId = `ORD-${Date.now()}`;\n      \n      const order = {\n        id: orderId,\n        ...orderData,\n        puzzleConfig,\n        status: \"pending\",\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      };\n\n      // Save order to storage for admin panel\n      await storage.createSimpleOrder(order);\n\n      // In real app would clear cart, send confirmation email, etc.\n      \n      res.json({ \n        orderId,\n        order,\n        message: \"Η παραγγελία σας υποβλήθηκε επιτυχώς\" \n      });\n    } catch (error) {\n      console.error(\"Error processing order:\", error);\n      res.status(500).json({ message: \"Σφάλμα επεξεργασίας παραγγελίας\" });\n    }\n  });\n\n  // Admin routes\n  app.get(\"/api/admin/orders\", async (req, res) => {\n    try {\n      // Get real orders from storage - combine with mock data for demo\n      const realOrders = storage.getAllSimpleOrders();\n      \n      // Convert real orders to admin format\n      const adminOrders = realOrders.map(order => ({\n        id: order.id,\n        customer: order.customerName,\n        email: order.customerEmail,\n        total: order.total,\n        status: order.status,\n        date: new Date(order.createdAt).toLocaleDateString('el-GR'),\n        items: order.items.map(item => item.name),\n        puzzleConfig: {\n          pieces: order.items[0]?.customization?.pieces || 500,\n          width: order.items[0]?.customization?.dimensions?.width || 400,\n          height: order.items[0]?.customization?.dimensions?.height || 300,\n          material: order.items[0]?.customization?.material || \"Ξύλο\"\n        }\n      }));\n\n      // Add some mock orders for demonstration\n      const mockOrders = [\n        {\n          id: \"ORD-001\",\n          customer: \"Γιάννης Παπαδόπουλος\",\n          email: \"giannis@example.com\",\n          total: 89.99,\n          status: \"pending\",\n          date: \"15/1/2024\",\n          items: [\"Fractal Παζλ - Ξύλο - 500 κομμάτια\"],\n          puzzleConfig: {\n            pieces: 500,\n            width: 400,\n            height: 300,\n            material: \"Ξύλο\"\n          }\n        }\n      ];\n      \n      const allOrders = [...adminOrders, ...mockOrders];\n      res.json(allOrders);\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.get(\"/api/admin/users\", async (req, res) => {\n    try {\n      const mockUsers = [\n        {\n          id: 1,\n          name: \"Γιάννης Παπαδόπουλος\",\n          email: \"giannis@example.com\",\n          orders: 3,\n          totalSpent: 259.97,\n          joinDate: \"2024-01-10\"\n        }\n      ];\n      \n      res.json(mockUsers);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.get(\"/api/admin/stats\", async (req, res) => {\n    try {\n      const stats = {\n        totalOrders: 15,\n        totalUsers: 8,\n        totalRevenue: 1249.85,\n        pendingOrders: 3\n      };\n      \n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch stats\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":27865},"server/storage.ts":{"content":"import { \n  type PuzzleTemplate, type InsertPuzzleTemplate, type PuzzleOrder, type InsertPuzzleOrder, \n  type CartItem, type InsertCartItem, type User, type InsertUser, type Wishlist, type InsertWishlist,\n  type Order, type InsertOrder, type LoyaltyTransaction, type BlogPost, type InsertBlogPost,\n  type Subscription, type InsertSubscription, type PuzzleProgress, type InsertPuzzleProgress,\n  type SocialGalleryPost\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Template methods\n  getPuzzleTemplates(): Promise<PuzzleTemplate[]>;\n  getPuzzleTemplateById(id: string): Promise<PuzzleTemplate | undefined>;\n  createPuzzleTemplate(template: InsertPuzzleTemplate): Promise<PuzzleTemplate>;\n  \n  // Order methods\n  createPuzzleOrder(order: InsertPuzzleOrder): Promise<PuzzleOrder>;\n  getPuzzleOrderById(id: string): Promise<PuzzleOrder | undefined>;\n  \n  // Cart methods\n  getCartItems(sessionId: string): Promise<CartItem[]>;\n  addCartItem(item: InsertCartItem): Promise<CartItem>;\n  updateCartItem(id: string, quantity: number): Promise<CartItem | undefined>;\n  removeCartItem(id: string): Promise<boolean>;\n  clearCart(sessionId: string): Promise<void>;\n\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getAllUsers(): Promise<User[]>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUserLoyalty(id: string, points: number, tier: string, totalSpent: string): Promise<User | undefined>;\n\n  // Loyalty methods\n  getLoyaltyTransactions(userId: string): Promise<LoyaltyTransaction[]>;\n  createLoyaltyTransaction(transaction: { userId: string; points: number; type: string; description?: string; orderId?: string }): Promise<LoyaltyTransaction>;\n\n  // Wishlist methods\n  getWishlist(userId: string): Promise<Wishlist[]>;\n  addToWishlist(item: InsertWishlist): Promise<Wishlist>;\n  removeFromWishlist(id: string): Promise<void>;\n\n  // Enhanced order methods\n  getUserOrders(userId: string): Promise<Order[]>;\n  createEnhancedOrder(order: InsertOrder): Promise<Order>;\n\n  // Blog methods\n  getBlogPosts(published?: boolean): Promise<BlogPost[]>;\n  getBlogPost(slug: string): Promise<BlogPost | undefined>;\n  createBlogPost(post: InsertBlogPost): Promise<BlogPost>;\n\n  // Subscription methods\n  getUserSubscriptions(userId: string): Promise<Subscription[]>;\n  createSubscription(subscription: InsertSubscription): Promise<Subscription>;\n\n  // Progress tracking methods\n  getPuzzleProgress(userId: string): Promise<PuzzleProgress[]>;\n  updatePuzzleProgress(id: string, completedPieces: number, timeSpent: number): Promise<PuzzleProgress | undefined>;\n\n  // Social gallery methods\n  getSocialGallery(): Promise<SocialGalleryPost[]>;\n  getUserSocialPosts(userId: string): Promise<SocialGalleryPost[]>;\n  \n  // Simple order methods for admin\n  createSimpleOrder(order: any): Promise<any>;\n  getAllSimpleOrders(): any[];\n  getSimpleOrderById(id: string): any;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // All methods will use the database instead of memory\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const { db } = await import(\"./db\");\n    const { users } = await import(\"@shared/schema\");\n    const { eq } = await import(\"drizzle-orm\");\n    \n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const { db } = await import(\"./db\");\n    const { users } = await import(\"@shared/schema\");\n    const { eq } = await import(\"drizzle-orm\");\n    \n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    const { db } = await import(\"./db\");\n    const { users } = await import(\"@shared/schema\");\n    \n    return await db.select().from(users);\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const { db } = await import(\"./db\");\n    const { users } = await import(\"@shared/schema\");\n    \n    const [user] = await db.insert(users).values(userData).returning();\n    return user;\n  }\n\n  async updateUserLoyalty(id: string, points: number, tier: string, totalSpent: string): Promise<User | undefined> {\n    const { db } = await import(\"./db\");\n    const { users } = await import(\"@shared/schema\");\n    const { eq } = await import(\"drizzle-orm\");\n    \n    const [user] = await db\n      .update(users)\n      .set({ loyaltyPoints: points, loyaltyTier: tier as any, totalSpent })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async getLoyaltyTransactions(userId: string): Promise<LoyaltyTransaction[]> {\n    const { db } = await import(\"./db\");\n    const { loyaltyTransactions } = await import(\"@shared/schema\");\n    const { eq } = await import(\"drizzle-orm\");\n    \n    return await db.select().from(loyaltyTransactions).where(eq(loyaltyTransactions.userId, userId));\n  }\n\n  async createLoyaltyTransaction(transaction: { userId: string; points: number; type: string; description?: string; orderId?: string }): Promise<LoyaltyTransaction> {\n    const { db } = await import(\"./db\");\n    const { loyaltyTransactions } = await import(\"@shared/schema\");\n    \n    const [loyaltyTransaction] = await db.insert(loyaltyTransactions).values(transaction).returning();\n    return loyaltyTransaction;\n  }\n\n  async getWishlist(userId: string): Promise<Wishlist[]> {\n    const { db } = await import(\"./db\");\n    const { wishlists } = await import(\"@shared/schema\");\n    const { eq } = await import(\"drizzle-orm\");\n    \n    return await db.select().from(wishlists).where(eq(wishlists.userId, userId));\n  }\n\n  async addToWishlist(item: InsertWishlist): Promise<Wishlist> {\n    const { db } = await import(\"./db\");\n    const { wishlists } = await import(\"@shared/schema\");\n    \n    const [wishlistItem] = await db.insert(wishlists).values(item).returning();\n    return wishlistItem;\n  }\n\n  async removeFromWishlist(id: string): Promise<void> {\n    const { db } = await import(\"./db\");\n    const { wishlists } = await import(\"@shared/schema\");\n    const { eq } = await import(\"drizzle-orm\");\n    \n    await db.delete(wishlists).where(eq(wishlists.id, id));\n  }\n\n  async getUserOrders(userId: string): Promise<Order[]> {\n    const { db } = await import(\"./db\");\n    const { orders } = await import(\"@shared/schema\");\n    const { eq } = await import(\"drizzle-orm\");\n    \n    return await db.select().from(orders).where(eq(orders.userId, userId));\n  }\n\n  async createEnhancedOrder(order: InsertOrder): Promise<Order> {\n    const { db } = await import(\"./db\");\n    const { orders } = await import(\"@shared/schema\");\n    \n    const [newOrder] = await db.insert(orders).values(order).returning();\n    return newOrder;\n  }\n\n  async getBlogPosts(published?: boolean): Promise<BlogPost[]> {\n    const { db } = await import(\"./db\");\n    const { blogPosts } = await import(\"@shared/schema\");\n    const { eq } = await import(\"drizzle-orm\");\n    \n    if (published !== undefined) {\n      return await db.select().from(blogPosts).where(eq(blogPosts.isPublished, published));\n    }\n    return await db.select().from(blogPosts);\n  }\n\n  async getBlogPost(slug: string): Promise<BlogPost | undefined> {\n    const { db } = await import(\"./db\");\n    const { blogPosts } = await import(\"@shared/schema\");\n    const { eq } = await import(\"drizzle-orm\");\n    \n    const [post] = await db.select().from(blogPosts).where(eq(blogPosts.slug, slug));\n    return post;\n  }\n\n  async createBlogPost(post: InsertBlogPost): Promise<BlogPost> {\n    const { db } = await import(\"./db\");\n    const { blogPosts } = await import(\"@shared/schema\");\n    \n    const [newPost] = await db.insert(blogPosts).values(post).returning();\n    return newPost;\n  }\n\n  async getUserSubscriptions(userId: string): Promise<Subscription[]> {\n    const { db } = await import(\"./db\");\n    const { subscriptions } = await import(\"@shared/schema\");\n    const { eq } = await import(\"drizzle-orm\");\n    \n    return await db.select().from(subscriptions).where(eq(subscriptions.userId, userId));\n  }\n\n  async createSubscription(subscription: InsertSubscription): Promise<Subscription> {\n    const { db } = await import(\"./db\");\n    const { subscriptions } = await import(\"@shared/schema\");\n    \n    const [newSubscription] = await db.insert(subscriptions).values(subscription).returning();\n    return newSubscription;\n  }\n\n  async getPuzzleProgress(userId: string): Promise<PuzzleProgress[]> {\n    const { db } = await import(\"./db\");\n    const { puzzleProgress } = await import(\"@shared/schema\");\n    const { eq } = await import(\"drizzle-orm\");\n    \n    return await db.select().from(puzzleProgress).where(eq(puzzleProgress.userId, userId));\n  }\n\n  async updatePuzzleProgress(id: string, completedPieces: number, timeSpent: number): Promise<PuzzleProgress | undefined> {\n    const { db } = await import(\"./db\");\n    const { puzzleProgress } = await import(\"@shared/schema\");\n    const { eq } = await import(\"drizzle-orm\");\n    \n    const completionPercentage = (completedPieces / 1000) * 100; // Assuming 1000 pieces max\n    const [progress] = await db\n      .update(puzzleProgress)\n      .set({ \n        completedPieces, \n        timeSpentMinutes: timeSpent,\n        completionPercentage: completionPercentage.toString()\n      })\n      .where(eq(puzzleProgress.id, id))\n      .returning();\n    return progress;\n  }\n\n  async getSocialGallery(): Promise<SocialGalleryPost[]> {\n    const { db } = await import(\"./db\");\n    const { socialGallery } = await import(\"@shared/schema\");\n    const { eq } = await import(\"drizzle-orm\");\n    \n    return await db.select().from(socialGallery).where(eq(socialGallery.isPublic, true));\n  }\n\n  async getUserSocialPosts(userId: string): Promise<SocialGalleryPost[]> {\n    const { db } = await import(\"./db\");\n    const { socialGallery } = await import(\"@shared/schema\");\n    const { eq } = await import(\"drizzle-orm\");\n    \n    return await db.select().from(socialGallery).where(eq(socialGallery.userId, userId));\n  }\n\n  // Original template methods for backward compatibility\n  async getPuzzleTemplates(): Promise<PuzzleTemplate[]> {\n    const { db } = await import(\"./db\");\n    const { puzzleTemplates } = await import(\"@shared/schema\");\n    \n    return await db.select().from(puzzleTemplates);\n  }\n\n  async getPuzzleTemplateById(id: string): Promise<PuzzleTemplate | undefined> {\n    const { db } = await import(\"./db\");\n    const { puzzleTemplates } = await import(\"@shared/schema\");\n    const { eq } = await import(\"drizzle-orm\");\n    \n    const [template] = await db.select().from(puzzleTemplates).where(eq(puzzleTemplates.id, id));\n    return template;\n  }\n\n  async createPuzzleTemplate(template: InsertPuzzleTemplate): Promise<PuzzleTemplate> {\n    const { db } = await import(\"./db\");\n    const { puzzleTemplates } = await import(\"@shared/schema\");\n    \n    const [newTemplate] = await db.insert(puzzleTemplates).values(template).returning();\n    return newTemplate;\n  }\n\n  // Simple order methods for admin\n  async createSimpleOrder(order: any): Promise<any> {\n    simpleOrders.push(order);\n    return order;\n  }\n\n  getAllSimpleOrders(): any[] {\n    return simpleOrders;\n  }\n\n  getSimpleOrderById(id: string): any {\n    return simpleOrders.find(order => order.id === id);\n  }\n\n  async createPuzzleOrder(order: InsertPuzzleOrder): Promise<PuzzleOrder> {\n    const { db } = await import(\"./db\");\n    const { puzzleOrders } = await import(\"@shared/schema\");\n    \n    const [newOrder] = await db.insert(puzzleOrders).values(order).returning();\n    return newOrder;\n  }\n\n  async getPuzzleOrderById(id: string): Promise<PuzzleOrder | undefined> {\n    const { db } = await import(\"./db\");\n    const { puzzleOrders } = await import(\"@shared/schema\");\n    const { eq } = await import(\"drizzle-orm\");\n    \n    const [order] = await db.select().from(puzzleOrders).where(eq(puzzleOrders.id, id));\n    return order;\n  }\n\n  async getCartItems(sessionId: string): Promise<CartItem[]> {\n    const { db } = await import(\"./db\");\n    const { cartItems } = await import(\"@shared/schema\");\n    const { eq } = await import(\"drizzle-orm\");\n    \n    return await db.select().from(cartItems).where(eq(cartItems.sessionId, sessionId));\n  }\n\n  async addCartItem(item: InsertCartItem): Promise<CartItem> {\n    const { db } = await import(\"./db\");\n    const { cartItems } = await import(\"@shared/schema\");\n    \n    const [newItem] = await db.insert(cartItems).values(item).returning();\n    return newItem;\n  }\n\n  async updateCartItem(id: string, quantity: number): Promise<CartItem | undefined> {\n    const { db } = await import(\"./db\");\n    const { cartItems } = await import(\"@shared/schema\");\n    const { eq } = await import(\"drizzle-orm\");\n    \n    const [item] = await db\n      .update(cartItems)\n      .set({ quantity })\n      .where(eq(cartItems.id, id))\n      .returning();\n    return item;\n  }\n\n  async removeCartItem(id: string): Promise<boolean> {\n    const { db } = await import(\"./db\");\n    const { cartItems } = await import(\"@shared/schema\");\n    const { eq } = await import(\"drizzle-orm\");\n    \n    const result = await db.delete(cartItems).where(eq(cartItems.id, id));\n    return (result.rowCount || 0) > 0;\n  }\n\n  async clearCart(sessionId: string): Promise<void> {\n    const { db } = await import(\"./db\");\n    const { cartItems } = await import(\"@shared/schema\");\n    const { eq } = await import(\"drizzle-orm\");\n    \n    await db.delete(cartItems).where(eq(cartItems.sessionId, sessionId));\n  }\n}\n\n// Simple order storage for admin panel\nconst simpleOrders: any[] = [];\n\nexport class MemStorage implements IStorage {\n  private templates: Map<string, PuzzleTemplate>;\n  private orders: Map<string, PuzzleOrder>;\n  private cartItems: Map<string, CartItem>;\n\n  constructor() {\n    this.templates = new Map();\n    this.orders = new Map();\n    this.cartItems = new Map();\n    \n    // Initialize with some Greek puzzle templates\n    this.initializeTemplates();\n  }\n\n  private initializeTemplates() {\n    const defaultTemplates: InsertPuzzleTemplate[] = [\n      {\n        name: \"Μαθηματικό Spiral\",\n        nameEn: \"Mathematical Spiral\",\n        description: \"Κλασικό fractal spiral με χρυσό λόγο\",\n        category: \"Μαθηματικά\",\n        imageUrl: \"https://images.unsplash.com/photo-1635070041078-e363dbe005cb?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n        basePrice: \"35.00\",\n        featured: true,\n      },\n      {\n        name: \"Mandelbrot Σύνολο\",\n        nameEn: \"Mandelbrot Set\",\n        description: \"Το διάσημο fractal του Mandelbrot\",\n        category: \"Κλασικά\",\n        imageUrl: \"https://images.unsplash.com/photo-1517077304055-6e89abbf09b0?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n        basePrice: \"40.00\",\n        featured: true,\n      },\n      {\n        name: \"Fractal Δέντρο\",\n        nameEn: \"Fractal Tree\",\n        description: \"Φυσικό fractal με κλαδιά\",\n        category: \"Φύση\",\n        imageUrl: \"https://images.unsplash.com/photo-1502134249126-9f3755a50d78?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n        basePrice: \"32.00\",\n        featured: true,\n      },\n      {\n        name: \"Γεωμετρικό Κάλλος\",\n        nameEn: \"Geometric Beauty\",\n        description: \"Συμμετρικά fractal μοτίβα\",\n        category: \"Γεωμετρικά\",\n        imageUrl: \"https://images.unsplash.com/photo-1518709268805-4e9042af2176?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n        basePrice: \"30.00\",\n        featured: false,\n      },\n      {\n        name: \"Julia Κόσμος\",\n        nameEn: \"Julia World\",\n        description: \"Μαγευτικό Julia set fractal\",\n        category: \"Κλασικά\",\n        imageUrl: \"https://images.unsplash.com/photo-1541961017774-22349e4a1262?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n        basePrice: \"38.00\",\n        featured: false,\n      },\n      {\n        name: \"Κρυστάλλινη Δομή\",\n        nameEn: \"Crystal Structure\",\n        description: \"Fractal με κρυσταλλική εμφάνιση\",\n        category: \"Φυσικά\",\n        imageUrl: \"https://images.unsplash.com/photo-1544551763-46a013bb70d5?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n        basePrice: \"35.00\",\n        featured: false,\n      },\n      {\n        name: \"Λωτός Φράκταλ\",\n        nameEn: \"Lotus Fractal\",\n        description: \"Όμορφο λουλούδι fractal\",\n        category: \"Φύση\",\n        imageUrl: \"https://images.unsplash.com/photo-1545558014-8692077e9b5c?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n        basePrice: \"33.00\",\n        featured: false,\n      },\n      {\n        name: \"Κοσμικό Fractal\",\n        nameEn: \"Cosmic Fractal\",\n        description: \"Διαστημικό fractal με γαλαξίες\",\n        category: \"Διάστημα\",\n        imageUrl: \"https://images.unsplash.com/photo-1506318137071-a8e063b4bec0?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n        basePrice: \"42.00\",\n        featured: false,\n      },\n      {\n        name: \"Χρωματιστό Spiral\",\n        nameEn: \"Colorful Spiral\",\n        description: \"Vibrant fractal με εκρηκτικά χρώματα\",\n        category: \"Δημιουργικά\",\n        imageUrl: \"https://images.unsplash.com/photo-1552728089-57bdde30beb3?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n        basePrice: \"36.00\",\n        featured: false,\n      },\n      {\n        name: \"Τριγωνικό Maze\",\n        nameEn: \"Triangle Maze\",\n        description: \"Περίπλοκο τριγωνικό fractal\",\n        category: \"Γεωμετρικά\",\n        imageUrl: \"https://images.unsplash.com/photo-1517077304055-6e89abbf09b0?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n        basePrice: \"34.00\",\n        featured: false,\n      },\n    ];\n\n    defaultTemplates.forEach(template => {\n      this.createPuzzleTemplate(template);\n    });\n  }\n\n  async getPuzzleTemplates(): Promise<PuzzleTemplate[]> {\n    return Array.from(this.templates.values());\n  }\n\n  async getPuzzleTemplateById(id: string): Promise<PuzzleTemplate | undefined> {\n    return this.templates.get(id);\n  }\n\n  async createPuzzleTemplate(insertTemplate: InsertPuzzleTemplate): Promise<PuzzleTemplate> {\n    const id = randomUUID();\n    const template: PuzzleTemplate = {\n      ...insertTemplate,\n      id,\n      featured: insertTemplate.featured ?? null,\n      createdAt: new Date(),\n    };\n    this.templates.set(id, template);\n    return template;\n  }\n\n  async createPuzzleOrder(insertOrder: InsertPuzzleOrder): Promise<PuzzleOrder> {\n    const id = randomUUID();\n    const order: PuzzleOrder = {\n      ...insertOrder,\n      id,\n      status: insertOrder.status ?? null,\n      imageUrl: insertOrder.imageUrl ?? null,\n      templateId: insertOrder.templateId ?? null,\n      customerPhone: insertOrder.customerPhone ?? null,\n      createdAt: new Date(),\n    };\n    this.orders.set(id, order);\n    return order;\n  }\n\n  async getPuzzleOrderById(id: string): Promise<PuzzleOrder | undefined> {\n    return this.orders.get(id);\n  }\n\n  async getCartItems(sessionId: string): Promise<CartItem[]> {\n    return Array.from(this.cartItems.values()).filter(item => item.sessionId === sessionId);\n  }\n\n  async addCartItem(insertItem: InsertCartItem): Promise<CartItem> {\n    const id = randomUUID();\n    const item: CartItem = {\n      ...insertItem,\n      id,\n      imageUrl: insertItem.imageUrl ?? null,\n      templateId: insertItem.templateId ?? null,\n      quantity: insertItem.quantity ?? null,\n      createdAt: new Date(),\n    };\n    this.cartItems.set(id, item);\n    return item;\n  }\n\n  async updateCartItem(id: string, quantity: number): Promise<CartItem | undefined> {\n    const item = this.cartItems.get(id);\n    if (item) {\n      item.quantity = quantity;\n      this.cartItems.set(id, item);\n      return item;\n    }\n    return undefined;\n  }\n\n  async removeCartItem(id: string): Promise<boolean> {\n    return this.cartItems.delete(id);\n  }\n\n  async clearCart(sessionId: string): Promise<void> {\n    Array.from(this.cartItems.entries()).forEach(([id, item]) => {\n      if (item.sessionId === sessionId) {\n        this.cartItems.delete(id);\n      }\n    });\n  }\n\n  // Stub implementations for business features (not implemented in memory storage)\n  async getUser(id: string): Promise<User | undefined> { throw new Error(\"Not implemented in MemStorage\"); }\n  async getUserByEmail(email: string): Promise<User | undefined> { throw new Error(\"Not implemented in MemStorage\"); }\n  async getAllUsers(): Promise<User[]> { throw new Error(\"Not implemented in MemStorage\"); }\n  async createUser(user: InsertUser): Promise<User> { throw new Error(\"Not implemented in MemStorage\"); }\n  async updateUserLoyalty(id: string, points: number, tier: string, totalSpent: string): Promise<User | undefined> { throw new Error(\"Not implemented in MemStorage\"); }\n  async getLoyaltyTransactions(userId: string): Promise<LoyaltyTransaction[]> { throw new Error(\"Not implemented in MemStorage\"); }\n  async createLoyaltyTransaction(transaction: any): Promise<LoyaltyTransaction> { throw new Error(\"Not implemented in MemStorage\"); }\n  async getWishlist(userId: string): Promise<Wishlist[]> { throw new Error(\"Not implemented in MemStorage\"); }\n  async addToWishlist(item: InsertWishlist): Promise<Wishlist> { throw new Error(\"Not implemented in MemStorage\"); }\n  async removeFromWishlist(id: string): Promise<void> { throw new Error(\"Not implemented in MemStorage\"); }\n  async getUserOrders(userId: string): Promise<Order[]> { throw new Error(\"Not implemented in MemStorage\"); }\n  async createEnhancedOrder(order: InsertOrder): Promise<Order> { throw new Error(\"Not implemented in MemStorage\"); }\n  async getBlogPosts(published?: boolean): Promise<BlogPost[]> { throw new Error(\"Not implemented in MemStorage\"); }\n  async getBlogPost(slug: string): Promise<BlogPost | undefined> { throw new Error(\"Not implemented in MemStorage\"); }\n  async createBlogPost(post: InsertBlogPost): Promise<BlogPost> { throw new Error(\"Not implemented in MemStorage\"); }\n  async getUserSubscriptions(userId: string): Promise<Subscription[]> { throw new Error(\"Not implemented in MemStorage\"); }\n  async createSubscription(subscription: InsertSubscription): Promise<Subscription> { throw new Error(\"Not implemented in MemStorage\"); }\n  async getPuzzleProgress(userId: string): Promise<PuzzleProgress[]> { throw new Error(\"Not implemented in MemStorage\"); }\n  async updatePuzzleProgress(id: string, completedPieces: number, timeSpent: number): Promise<PuzzleProgress | undefined> { throw new Error(\"Not implemented in MemStorage\"); }\n  async getSocialGallery(): Promise<SocialGalleryPost[]> { throw new Error(\"Not implemented in MemStorage\"); }\n  async getUserSocialPosts(userId: string): Promise<SocialGalleryPost[]> { throw new Error(\"Not implemented in MemStorage\"); }\n  \n  // Simple order methods for admin\n  async createSimpleOrder(order: any): Promise<any> {\n    simpleOrders.push(order);\n    return order;\n  }\n\n  getAllSimpleOrders(): any[] {\n    return simpleOrders;\n  }\n\n  getSimpleOrderById(id: string): any {\n    return simpleOrders.find(order => order.id === id);\n  }\n}\n\n// Switch to database storage for business features\nexport const storage = new DatabaseStorage();\n","size_bytes":23417},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, boolean, timestamp, pgEnum, jsonb, index } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums for business features\nexport const loyaltyTierEnum = pgEnum('loyalty_tier', ['bronze', 'silver', 'gold', 'platinum']);\nexport const subscriptionStatusEnum = pgEnum('subscription_status', ['active', 'paused', 'cancelled']);\nexport const orderStatusEnum = pgEnum('order_status', ['pending', 'processing', 'shipped', 'delivered', 'cancelled']);\n\nexport const puzzleTemplates = pgTable(\"puzzle_templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  nameEn: text(\"name_en\").notNull(),\n  description: text(\"description\").notNull(),\n  category: text(\"category\").notNull(),\n  imageUrl: text(\"image_url\").notNull(),\n  basePrice: decimal(\"base_price\", { precision: 10, scale: 2 }).notNull(),\n  featured: boolean(\"featured\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const puzzleOrders = pgTable(\"puzzle_orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerName: text(\"customer_name\").notNull(),\n  customerEmail: text(\"customer_email\").notNull(),\n  customerPhone: text(\"customer_phone\"),\n  imageUrl: text(\"image_url\"),\n  templateId: varchar(\"template_id\").references(() => puzzleTemplates.id),\n  size: text(\"size\").notNull(),\n  material: text(\"material\").notNull(),\n  pieceCount: integer(\"piece_count\").notNull(),\n  totalPrice: decimal(\"total_price\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").default(\"pending\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const cartItems = pgTable(\"cart_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sessionId: text(\"session_id\").notNull(),\n  imageUrl: text(\"image_url\"),\n  templateId: varchar(\"template_id\").references(() => puzzleTemplates.id),\n  size: text(\"size\").notNull(),\n  material: text(\"material\").notNull(),\n  pieceCount: integer(\"piece_count\").notNull(),\n  quantity: integer(\"quantity\").default(1),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertPuzzleTemplateSchema = createInsertSchema(puzzleTemplates).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPuzzleOrderSchema = createInsertSchema(puzzleOrders).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCartItemSchema = createInsertSchema(cartItems).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Enhanced users table with loyalty features\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  phone: varchar(\"phone\"),\n  loyaltyPoints: integer(\"loyalty_points\").default(0),\n  loyaltyTier: loyaltyTierEnum(\"loyalty_tier\").default('bronze'),\n  totalSpent: decimal(\"total_spent\", { precision: 10, scale: 2 }).default('0'),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Loyalty transactions\nexport const loyaltyTransactions = pgTable(\"loyalty_transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  points: integer(\"points\").notNull(),\n  type: varchar(\"type\").notNull(), // 'earned', 'redeemed', 'expired'\n  description: text(\"description\"),\n  orderId: varchar(\"order_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Wishlist functionality\nexport const wishlists = pgTable(\"wishlists\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  puzzleDesign: text(\"puzzle_design\"),\n  puzzleName: varchar(\"puzzle_name\"),\n  material: varchar(\"material\"),\n  size: varchar(\"size\"),\n  difficulty: varchar(\"difficulty\"),\n  estimatedPrice: decimal(\"estimated_price\", { precision: 8, scale: 2 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Enhanced orders with business features\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  orderNumber: varchar(\"order_number\").unique(),\n  status: orderStatusEnum(\"status\").default('pending'),\n  subtotal: decimal(\"subtotal\", { precision: 10, scale: 2 }),\n  loyaltyDiscount: decimal(\"loyalty_discount\", { precision: 8, scale: 2 }).default('0'),\n  total: decimal(\"total\", { precision: 10, scale: 2 }),\n  giftWrapping: boolean(\"gift_wrapping\").default(false),\n  giftMessage: text(\"gift_message\"),\n  isGift: boolean(\"is_gift\").default(false),\n  shippingAddress: jsonb(\"shipping_address\"),\n  estimatedCompletion: integer(\"estimated_completion_minutes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Order items with framing options\nexport const orderItems = pgTable(\"order_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").references(() => orders.id),\n  puzzleDesign: text(\"puzzle_design\"),\n  puzzleName: varchar(\"puzzle_name\"),\n  material: varchar(\"material\"),\n  size: varchar(\"size\"),\n  difficulty: varchar(\"difficulty\"),\n  pieces: integer(\"pieces\"),\n  quantity: integer(\"quantity\").default(1),\n  unitPrice: decimal(\"unit_price\", { precision: 8, scale: 2 }),\n  totalPrice: decimal(\"total_price\", { precision: 8, scale: 2 }),\n  customFraming: boolean(\"custom_framing\").default(false),\n  framingPrice: decimal(\"framing_price\", { precision: 6, scale: 2 }),\n});\n\n// Puzzle progress tracking\nexport const puzzleProgress = pgTable(\"puzzle_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  orderItemId: varchar(\"order_item_id\").references(() => orderItems.id),\n  completedPieces: integer(\"completed_pieces\").default(0),\n  totalPieces: integer(\"total_pieces\"),\n  completionPercentage: decimal(\"completion_percentage\", { precision: 5, scale: 2 }).default('0'),\n  startedAt: timestamp(\"started_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  timeSpentMinutes: integer(\"time_spent_minutes\").default(0),\n  notes: text(\"notes\"),\n  isShared: boolean(\"is_shared\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Social gallery for sharing completed puzzles\nexport const socialGallery = pgTable(\"social_gallery\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  puzzleProgressId: varchar(\"puzzle_progress_id\").references(() => puzzleProgress.id),\n  title: varchar(\"title\"),\n  description: text(\"description\"),\n  imageUrl: varchar(\"image_url\"),\n  likes: integer(\"likes\").default(0),\n  isPublic: boolean(\"is_public\").default(true),\n  completionTime: integer(\"completion_time_minutes\"),\n  difficulty: varchar(\"difficulty\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Subscription service\nexport const subscriptions = pgTable(\"subscriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  planType: varchar(\"plan_type\"), // 'monthly', 'quarterly', 'annual'\n  status: subscriptionStatusEnum(\"status\").default('active'),\n  puzzlesPerDelivery: integer(\"puzzles_per_delivery\").default(1),\n  preferredDifficulty: varchar(\"preferred_difficulty\"),\n  preferredMaterial: varchar(\"preferred_material\"),\n  monthlyPrice: decimal(\"monthly_price\", { precision: 6, scale: 2 }),\n  nextDelivery: timestamp(\"next_delivery\"),\n  startedAt: timestamp(\"started_at\").defaultNow(),\n  pausedAt: timestamp(\"paused_at\"),\n  cancelledAt: timestamp(\"cancelled_at\"),\n});\n\n// Corporate customers\nexport const corporateCustomers = pgTable(\"corporate_customers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  companyName: varchar(\"company_name\"),\n  taxId: varchar(\"tax_id\"),\n  billingAddress: jsonb(\"billing_address\"),\n  discountPercentage: decimal(\"discount_percentage\", { precision: 4, scale: 2 }).default('10'),\n  minimumOrder: integer(\"minimum_order\").default(10),\n  creditLimit: decimal(\"credit_limit\", { precision: 10, scale: 2 }),\n  isApproved: boolean(\"is_approved\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Blog posts for content marketing\nexport const blogPosts = pgTable(\"blog_posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\"),\n  slug: varchar(\"slug\").unique(),\n  content: text(\"content\"),\n  excerpt: text(\"excerpt\"),\n  author: varchar(\"author\"),\n  category: varchar(\"category\"), // 'education', 'tips', 'news', 'spotlight'\n  tags: jsonb(\"tags\"),\n  featuredImage: varchar(\"featured_image\"),\n  isPublished: boolean(\"is_published\").default(false),\n  publishedAt: timestamp(\"published_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Newsletter subscribers\nexport const newsletterSubscribers = pgTable(\"newsletter_subscribers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  preferences: jsonb(\"preferences\"), // topics, frequency\n  isActive: boolean(\"is_active\").default(true),\n  subscribedAt: timestamp(\"subscribed_at\").defaultNow(),\n  unsubscribedAt: timestamp(\"unsubscribed_at\"),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  loyaltyTransactions: many(loyaltyTransactions),\n  wishlists: many(wishlists),\n  orders: many(orders),\n  puzzleProgress: many(puzzleProgress),\n  socialGallery: many(socialGallery),\n  subscriptions: many(subscriptions),\n}));\n\nexport const ordersRelations = relations(orders, ({ one, many }) => ({\n  user: one(users, {\n    fields: [orders.userId],\n    references: [users.id],\n  }),\n  items: many(orderItems),\n}));\n\nexport const orderItemsRelations = relations(orderItems, ({ one, many }) => ({\n  order: one(orders, {\n    fields: [orderItems.orderId],\n    references: [orders.id],\n  }),\n  puzzleProgress: many(puzzleProgress),\n}));\n\nexport const puzzleProgressRelations = relations(puzzleProgress, ({ one }) => ({\n  user: one(users, {\n    fields: [puzzleProgress.userId],\n    references: [users.id],\n  }),\n  orderItem: one(orderItems, {\n    fields: [puzzleProgress.orderItemId],\n    references: [orderItems.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users);\nexport const insertOrderSchema = createInsertSchema(orders);\nexport const insertOrderItemSchema = createInsertSchema(orderItems);\nexport const insertPuzzleProgressSchema = createInsertSchema(puzzleProgress);\nexport const insertWishlistSchema = createInsertSchema(wishlists);\nexport const insertBlogPostSchema = createInsertSchema(blogPosts);\nexport const insertSubscriptionSchema = createInsertSchema(subscriptions);\n\n// Types\nexport type User = typeof users.$inferSelect;\n\n// Authentication tables\nexport const authUsers = pgTable(\"auth_users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique().notNull(),\n  password: varchar(\"password\").notNull(), // hashed\n  firstName: varchar(\"first_name\").notNull(),\n  lastName: varchar(\"last_name\").notNull(),\n  isVerified: boolean(\"is_verified\").default(false),\n  verificationToken: varchar(\"verification_token\"),\n  resetToken: varchar(\"reset_token\"),\n  resetTokenExpiry: timestamp(\"reset_token_expiry\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const sessions = pgTable(\"sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => authUsers.id).notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Admin users table\nexport const adminUsers = pgTable(\"admin_users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\").unique().notNull(),\n  password: varchar(\"password\").notNull(), // hashed\n  role: varchar(\"role\").default(\"admin\"),\n  lastLogin: timestamp(\"last_login\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const adminSessions = pgTable(\"admin_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  adminId: varchar(\"admin_id\").references(() => adminUsers.id).notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport type AuthUser = typeof authUsers.$inferSelect;\nexport type InsertAuthUser = typeof authUsers.$inferInsert;\nexport type Session = typeof sessions.$inferSelect;\nexport type AdminUser = typeof adminUsers.$inferSelect;\nexport type AdminSession = typeof adminSessions.$inferSelect;\nexport type Order = typeof orders.$inferSelect;\nexport type OrderItem = typeof orderItems.$inferSelect;\nexport type PuzzleProgress = typeof puzzleProgress.$inferSelect;\nexport type SocialGalleryPost = typeof socialGallery.$inferSelect;\nexport type Subscription = typeof subscriptions.$inferSelect;\nexport type BlogPost = typeof blogPosts.$inferSelect;\nexport type Wishlist = typeof wishlists.$inferSelect;\nexport type LoyaltyTransaction = typeof loyaltyTransactions.$inferSelect;\nexport type CorporateCustomer = typeof corporateCustomers.$inferSelect;\nexport type NewsletterSubscriber = typeof newsletterSubscribers.$inferSelect;\n\n// Insert types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\nexport type InsertPuzzleProgress = z.infer<typeof insertPuzzleProgressSchema>;\nexport type InsertWishlist = z.infer<typeof insertWishlistSchema>;\nexport type InsertBlogPost = z.infer<typeof insertBlogPostSchema>;\nexport type InsertSubscription = z.infer<typeof insertSubscriptionSchema>;\n\n// Original types for backward compatibility\nexport type PuzzleTemplate = typeof puzzleTemplates.$inferSelect;\nexport type InsertPuzzleTemplate = z.infer<typeof insertPuzzleTemplateSchema>;\nexport type PuzzleOrder = typeof puzzleOrders.$inferSelect;\nexport type InsertPuzzleOrder = z.infer<typeof insertPuzzleOrderSchema>;\nexport type CartItem = typeof cartItems.$inferSelect;\nexport type InsertCartItem = z.infer<typeof insertCartItemSchema>;\n","size_bytes":14785},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Configurator from \"@/pages/configurator\";\n\nimport Cart from \"@/pages/cart\";\nimport FractalGenerator from \"@/pages/fractal-generator\";\nimport { PuzzleGeneratorPage } from \"@/pages/puzzle-generator\";\nimport ImageEditorPage from \"@/pages/image-editor\";\nimport CustomerService from \"@/pages/customer-service\";\nimport FAQ from \"@/pages/faq\";\nimport OrderTracking from \"@/pages/order-tracking\";\nimport Returns from \"@/pages/returns\";\nimport Contact from \"@/pages/contact\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport ShoppingCart from \"@/components/shopping-cart\";\nimport Loyalty from \"@/pages/loyalty\";\nimport Wishlist from \"@/pages/wishlist\";\nimport Blog from \"@/pages/blog\";\nimport ProgressTracker from \"@/pages/progress-tracker\";\nimport SocialGallery from \"@/pages/social-gallery\";\nimport Subscription from \"@/pages/subscription\";\nimport PrivacyPolicy from \"@/pages/privacy-policy\";\nimport TermsOfUse from \"@/pages/terms-of-use\";\nimport Login from \"@/pages/auth/login\";\nimport Signup from \"@/pages/auth/signup\";\nimport Profile from \"@/pages/profile\";\nimport Orders from \"@/pages/orders\";\nimport AdminLogin from \"@/pages/admin/login\";\nimport AdminDashboard from \"@/pages/admin/dashboard\";\nimport Checkout from \"@/pages/checkout\";\nimport OrderConfirmation from \"@/pages/order-confirmation\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/fractal-generator\" component={FractalGenerator} />\n      <Route path=\"/puzzle-generator\" component={PuzzleGeneratorPage} />\n      <Route path=\"/image-editor\" component={ImageEditorPage} />\n      <Route path=\"/cart\" component={Cart} />\n      <Route path=\"/customer-service\" component={CustomerService} />\n      <Route path=\"/faq\" component={FAQ} />\n      <Route path=\"/order-tracking\" component={OrderTracking} />\n      <Route path=\"/returns\" component={Returns} />\n      <Route path=\"/contact\" component={Contact} />\n      <Route path=\"/loyalty\" component={Loyalty} />\n      <Route path=\"/wishlist\" component={Wishlist} />\n      <Route path=\"/blog\" component={Blog} />\n      <Route path=\"/progress-tracker\" component={ProgressTracker} />\n      <Route path=\"/social-gallery\" component={SocialGallery} />\n      <Route path=\"/subscription\" component={Subscription} />\n      <Route path=\"/privacy-policy\" component={PrivacyPolicy} />\n      <Route path=\"/terms-of-use\" component={TermsOfUse} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/signup\" component={Signup} />\n      <Route path=\"/profile\" component={Profile} />\n      <Route path=\"/orders\" component={Orders} />\n      <Route path=\"/admin\" component={AdminLogin} />\n      <Route path=\"/admin/dashboard\" component={AdminDashboard} />\n      <Route path=\"/checkout\" component={Checkout} />\n      <Route path=\"/order-confirmation\" component={OrderConfirmation} />\n      \n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen flex flex-col\">\n          <Header />\n          <main className=\"flex-1\">\n            <Router />\n          </main>\n          <Footer />\n        </div>\n        <ShoppingCart />\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3697},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(220 25% 8%);\n  --foreground: hsl(280 85% 95%);\n  --card: hsl(230 30% 12%);\n  --card-foreground: hsl(280 85% 95%);\n  --popover: hsl(220 25% 8%);\n  --popover-foreground: hsl(280 85% 95%);\n  --primary: hsl(280 95% 70%);\n  --primary-foreground: hsl(220 25% 8%);\n  --secondary: hsl(320 90% 60%);\n  --secondary-foreground: hsl(220 25% 8%);\n  --muted: hsl(230 25% 18%);\n  --muted-foreground: hsl(280 50% 75%);\n  --accent: hsl(200 100% 60%);\n  --accent-foreground: hsl(220 25% 8%);\n  --destructive: hsl(356 90% 54%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(230 30% 20%);\n  --input: hsl(230 30% 15%);\n  --ring: hsl(280 85% 65%);\n  --neutral: hsl(280 75% 85%);\n  --chart-1: hsl(280 85% 65%);\n  --chart-2: hsl(320 75% 55%);\n  --chart-3: hsl(200 90% 55%);\n  --chart-4: hsl(260 80% 70%);\n  --chart-5: hsl(340 85% 60%);\n  --sidebar: hsl(230 30% 12%);\n  --sidebar-foreground: hsl(280 85% 95%);\n  --sidebar-primary: hsl(280 85% 65%);\n  --sidebar-primary-foreground: hsl(220 25% 8%);\n  --sidebar-accent: hsl(230 30% 18%);\n  --sidebar-accent-foreground: hsl(280 85% 65%);\n  --sidebar-border: hsl(230 30% 20%);\n  --sidebar-ring: hsl(280 85% 65%);\n  --font-sans: 'Inter', 'Open Sans', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1rem;\n  --shadow-2xs: 0 2px 4px rgba(168, 85, 247, 0.1);\n  --shadow-xs: 0 4px 8px rgba(168, 85, 247, 0.15);\n  --shadow-sm: 0 8px 16px rgba(168, 85, 247, 0.2);\n  --shadow: 0 12px 24px rgba(168, 85, 247, 0.25);\n  --shadow-md: 0 16px 32px rgba(168, 85, 247, 0.3);\n  --shadow-lg: 0 20px 40px rgba(168, 85, 247, 0.35);\n  --shadow-xl: 0 24px 48px rgba(168, 85, 247, 0.4);\n  --shadow-2xl: 0 32px 64px rgba(168, 85, 247, 0.5);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(28 91.3043% 42.1569%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(158 63.9344% 39.4118%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(356 84.6154% 50.1961%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --neutral: hsl(215 27.9070% 32.1569%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: 'Inter', 'Open Sans', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    background: linear-gradient(135deg, hsl(220 25% 8%) 0%, hsl(240 30% 12%) 25%, hsl(260 35% 10%) 50%, hsl(280 30% 8%) 75%, hsl(220 25% 8%) 100%);\n    background-attachment: fixed;\n  }\n}\n\n/* Fractal-inspired animations and patterns */\n@keyframes fractalPulse {\n  0%, 100% { \n    transform: scale(1) rotate(0deg);\n    filter: hue-rotate(0deg);\n  }\n  25% { \n    transform: scale(1.05) rotate(90deg);\n    filter: hue-rotate(90deg);\n  }\n  50% { \n    transform: scale(1.1) rotate(180deg);\n    filter: hue-rotate(180deg);\n  }\n  75% { \n    transform: scale(1.05) rotate(270deg);\n    filter: hue-rotate(270deg);\n  }\n}\n\n@keyframes fractalGlow {\n  0%, 100% { \n    box-shadow: 0 0 20px rgba(168, 85, 247, 0.5);\n  }\n  50% { \n    box-shadow: 0 0 40px rgba(220, 38, 127, 0.8), 0 0 60px rgba(59, 130, 246, 0.6);\n  }\n}\n\n@keyframes fractalFloat {\n  0%, 100% { transform: translateY(0px) rotate(0deg); }\n  33% { transform: translateY(-10px) rotate(120deg); }\n  66% { transform: translateY(5px) rotate(240deg); }\n}\n\n.fractal-element {\n  animation: fractalFloat 6s ease-in-out infinite;\n}\n\n.fractal-glow {\n  animation: fractalGlow 3s ease-in-out infinite;\n}\n\n.fractal-pulse {\n  animation: fractalPulse 8s ease-in-out infinite;\n}\n\n/* Geometric fractal background pattern */\n.fractal-bg {\n  position: relative;\n  overflow: hidden;\n}\n\n.fractal-bg::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-image: \n    radial-gradient(circle at 25% 25%, rgba(168, 85, 247, 0.1) 0%, transparent 50%),\n    radial-gradient(circle at 75% 75%, rgba(220, 38, 127, 0.1) 0%, transparent 50%),\n    radial-gradient(circle at 75% 25%, rgba(59, 130, 246, 0.1) 0%, transparent 50%),\n    radial-gradient(circle at 25% 75%, rgba(168, 85, 247, 0.1) 0%, transparent 50%);\n  background-size: 400px 400px, 300px 300px, 500px 500px, 350px 350px;\n  background-position: 0 0, 100px 100px, 200px 0, 0 200px;\n  animation: fractalFloat 12s ease-in-out infinite;\n  pointer-events: none;\n}\n\n/* Fractal geometric shapes */\n.fractal-shape {\n  position: absolute;\n  border-radius: 30% 70% 70% 30% / 30% 30% 70% 70%;\n  background: linear-gradient(45deg, rgba(168, 85, 247, 0.2), rgba(220, 38, 127, 0.2));\n  animation: fractalPulse 10s ease-in-out infinite;\n}\n\n.glass-morphism {\n  background: rgba(168, 85, 247, 0.1);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(168, 85, 247, 0.2);\n}\n\n/* Celebration Toast Styles */\n.celebration-toast {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 9999;\n  pointer-events: none;\n  animation: celebrationAppear 0.8s ease-out forwards;\n}\n\n.celebration-content {\n  position: relative;\n  background: linear-gradient(135deg, \n    hsl(var(--primary)), \n    hsl(var(--secondary)), \n    hsl(var(--accent))\n  );\n  border-radius: 20px;\n  padding: 2rem;\n  box-shadow: \n    0 20px 40px rgba(168, 85, 247, 0.4),\n    0 0 80px rgba(168, 85, 247, 0.3),\n    inset 0 2px 4px rgba(255, 255, 255, 0.2);\n  backdrop-filter: blur(10px);\n  border: 2px solid rgba(255, 255, 255, 0.3);\n  min-width: 400px;\n  text-align: center;\n  animation: pulseGlow 2s ease-in-out infinite;\n}\n\n.celebration-title {\n  font-size: 2.5rem;\n  font-weight: bold;\n  color: white;\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\n  margin-bottom: 1rem;\n  animation: bounce 1s ease-in-out infinite;\n}\n\n.celebration-description {\n  font-size: 1.2rem;\n  color: white;\n  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);\n  margin-bottom: 1rem;\n}\n\n.difficulty-badge {\n  display: inline-block;\n  background: rgba(255, 255, 255, 0.2);\n  padding: 0.5rem 1rem;\n  border-radius: 20px;\n  font-weight: bold;\n  margin-top: 0.5rem;\n  backdrop-filter: blur(5px);\n  border: 1px solid rgba(255, 255, 255, 0.3);\n}\n\n.confetti-container {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  pointer-events: none;\n}\n\n.confetti {\n  position: absolute;\n  width: 10px;\n  height: 10px;\n  top: -10px;\n  left: var(--x);\n  animation: confettiFall 3s ease-out var(--delay) forwards;\n  transform: rotate(var(--rotation));\n}\n\n.confetti-0 { background: #ff6b6b; }\n.confetti-1 { background: #4ecdc4; }\n.confetti-2 { background: #45b7d1; }\n.confetti-3 { background: #96ceb4; }\n.confetti-4 { background: #ffeaa7; }\n.confetti-5 { background: #dda0dd; }\n\n.ribbons {\n  position: absolute;\n  top: -20px;\n  left: 0;\n  right: 0;\n  height: 40px;\n  overflow: hidden;\n}\n\n.ribbon {\n  position: absolute;\n  width: 60px;\n  height: 200px;\n  background: linear-gradient(45deg, #ff6b6b, #4ecdc4);\n  transform-origin: center top;\n}\n\n.ribbon-left {\n  left: 20%;\n  animation: ribbonWave 2s ease-in-out infinite, ribbonLeft 0.8s ease-out;\n}\n\n.ribbon-right {\n  right: 20%;\n  animation: ribbonWave 2s ease-in-out infinite reverse, ribbonRight 0.8s ease-out;\n}\n\n@keyframes celebrationAppear {\n  0% {\n    opacity: 0;\n    transform: translate(-50%, -50%) scale(0.5) rotateY(180deg);\n  }\n  50% {\n    transform: translate(-50%, -50%) scale(1.1) rotateY(0deg);\n  }\n  100% {\n    opacity: 1;\n    transform: translate(-50%, -50%) scale(1) rotateY(0deg);\n  }\n}\n\n@keyframes pulseGlow {\n  0%, 100% {\n    box-shadow: \n      0 20px 40px rgba(168, 85, 247, 0.4),\n      0 0 80px rgba(168, 85, 247, 0.3),\n      inset 0 2px 4px rgba(255, 255, 255, 0.2);\n  }\n  50% {\n    box-shadow: \n      0 25px 50px rgba(168, 85, 247, 0.6),\n      0 0 120px rgba(168, 85, 247, 0.5),\n      inset 0 2px 4px rgba(255, 255, 255, 0.4);\n  }\n}\n\n@keyframes bounce {\n  0%, 20%, 50%, 80%, 100% {\n    transform: translateY(0);\n  }\n  40% {\n    transform: translateY(-10px);\n  }\n  60% {\n    transform: translateY(-5px);\n  }\n}\n\n@keyframes confettiFall {\n  0% {\n    transform: translateY(-10px) rotate(var(--rotation)) scale(1);\n    opacity: 1;\n  }\n  100% {\n    transform: translateY(400px) rotate(calc(var(--rotation) + 360deg)) scale(0.5);\n    opacity: 0;\n  }\n}\n\n@keyframes ribbonWave {\n  0%, 100% {\n    transform: rotate(0deg);\n  }\n  25% {\n    transform: rotate(5deg);\n  }\n  75% {\n    transform: rotate(-5deg);\n  }\n}\n\n@keyframes ribbonLeft {\n  0% {\n    transform: translateX(-100px) rotate(-45deg);\n    opacity: 0;\n  }\n  100% {\n    transform: translateX(0) rotate(0deg);\n    opacity: 1;\n  }\n}\n\n@keyframes ribbonRight {\n  0% {\n    transform: translateX(100px) rotate(45deg);\n    opacity: 0;\n  }\n  100% {\n    transform: translateX(0) rotate(0deg);\n    opacity: 1;\n  }\n}\n\n/* Animated Fractal Styles */\n.animated-fractal {\n  filter: drop-shadow(0 0 20px rgba(168, 85, 247, 0.3));\n}\n\n.animated-fractal .puzzle-group-1 {\n  animation: fractalFloat 12s ease-in-out infinite;\n}\n\n.animated-fractal .puzzle-group-2 {\n  animation: fractalFloat 16s ease-in-out infinite reverse;\n}\n\n@keyframes fractalGlow {\n  0%, 100% {\n    filter: drop-shadow(0 0 20px rgba(168, 85, 247, 0.3));\n  }\n  50% {\n    filter: drop-shadow(0 0 40px rgba(220, 38, 127, 0.5)) drop-shadow(0 0 60px rgba(59, 130, 246, 0.3));\n  }\n}\n","size_bytes":11342},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/admin-layout.tsx":{"content":"import { ReactNode } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  LayoutDashboard, \n  Package, \n  ShoppingCart, \n  Users, \n  LogOut,\n  Settings,\n  Menu,\n  X,\n  Shield\n} from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AdminLayoutProps {\n  children: ReactNode;\n}\n\nexport default function AdminLayout({ children }: AdminLayoutProps) {\n  const [location] = useLocation();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const { toast } = useToast();\n\n  const navigation = [\n    {\n      name: \"Πίνακας Ελέγχου\",\n      href: \"/admin/dashboard\",\n      icon: LayoutDashboard,\n      current: location === \"/admin/dashboard\"\n    },\n    {\n      name: \"Προϊόντα\",\n      href: \"/admin/products\", \n      icon: Package,\n      current: location === \"/admin/products\"\n    },\n    {\n      name: \"Παραγγελίες\",\n      href: \"/admin/orders\",\n      icon: ShoppingCart,\n      current: location === \"/admin/orders\"\n    },\n    {\n      name: \"Πελάτες\",\n      href: \"/admin/customers\",\n      icon: Users,\n      current: location === \"/admin/customers\"\n    },\n  ];\n\n  const handleLogout = () => {\n    toast({\n      title: \"Αποσυνδέθηκε\",\n      description: \"Αποσυνδεθήκατε από το admin panel.\",\n    });\n    // In real app would clear session and redirect\n    window.location.href = \"/admin/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Mobile menu */}\n      <div className={cn(\n        \"fixed inset-0 flex z-40 md:hidden\",\n        sidebarOpen ? \"block\" : \"hidden\"\n      )}>\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-75\" onClick={() => setSidebarOpen(false)} />\n        \n        <div className=\"relative flex-1 flex flex-col max-w-xs w-full bg-white\">\n          <div className=\"absolute top-0 right-0 -mr-12 pt-2\">\n            <button\n              className=\"ml-1 flex items-center justify-center h-10 w-10 rounded-full focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white\"\n              onClick={() => setSidebarOpen(false)}\n            >\n              <X className=\"h-6 w-6 text-white\" />\n            </button>\n          </div>\n          \n          <div className=\"flex-1 h-0 pt-5 pb-4 overflow-y-auto\">\n            <div className=\"flex-shrink-0 flex items-center px-4\">\n              <Shield className=\"h-8 w-8 text-red-600\" />\n              <span className=\"ml-2 text-xl font-bold text-gray-900\">Admin Panel</span>\n            </div>\n            <nav className=\"mt-5 px-2 space-y-1\">\n              {navigation.map((item) => {\n                const Icon = item.icon;\n                return (\n                  <Link\n                    key={item.name}\n                    href={item.href}\n                    className={cn(\n                      item.current\n                        ? \"bg-red-100 text-red-900\"\n                        : \"text-gray-600 hover:bg-gray-50 hover:text-gray-900\",\n                      \"group flex items-center px-2 py-2 text-base font-medium rounded-md\"\n                    )}\n                    onClick={() => setSidebarOpen(false)}\n                  >\n                    <Icon className=\"mr-4 h-6 w-6\" />\n                    {item.name}\n                  </Link>\n                );\n              })}\n            </nav>\n          </div>\n          \n          <div className=\"flex-shrink-0 flex border-t border-gray-200 p-4\">\n            <Button\n              variant=\"ghost\"\n              onClick={handleLogout}\n              className=\"w-full justify-start text-red-600 hover:text-red-700 hover:bg-red-50\"\n            >\n              <LogOut className=\"mr-2 h-4 w-4\" />\n              Αποσύνδεση\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Desktop sidebar */}\n      <div className=\"hidden md:flex md:w-64 md:flex-col md:fixed md:inset-y-0\">\n        <div className=\"flex-1 flex flex-col min-h-0 border-r border-gray-200 bg-white\">\n          <div className=\"flex-1 flex flex-col pt-5 pb-4 overflow-y-auto\">\n            <div className=\"flex items-center flex-shrink-0 px-4\">\n              <Shield className=\"h-8 w-8 text-red-600\" />\n              <span className=\"ml-2 text-xl font-bold text-gray-900\">Admin Panel</span>\n            </div>\n            <nav className=\"mt-5 flex-1 px-2 space-y-1\">\n              {navigation.map((item) => {\n                const Icon = item.icon;\n                return (\n                  <Link\n                    key={item.name}\n                    href={item.href}\n                    className={cn(\n                      item.current\n                        ? \"bg-red-100 text-red-900\"\n                        : \"text-gray-600 hover:bg-gray-50 hover:text-gray-900\",\n                      \"group flex items-center px-2 py-2 text-sm font-medium rounded-md\"\n                    )}\n                  >\n                    <Icon className=\"mr-3 h-5 w-5\" />\n                    {item.name}\n                  </Link>\n                );\n              })}\n            </nav>\n          </div>\n          \n          <div className=\"flex-shrink-0 flex border-t border-gray-200 p-4\">\n            <Button\n              variant=\"ghost\"\n              onClick={handleLogout}\n              className=\"w-full justify-start text-red-600 hover:text-red-700 hover:bg-red-50\"\n              data-testid=\"button-admin-logout\"\n            >\n              <LogOut className=\"mr-2 h-4 w-4\" />\n              Αποσύνδεση\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Main content */}\n      <div className=\"md:pl-64 flex flex-col flex-1\">\n        {/* Mobile top bar */}\n        <div className=\"sticky top-0 z-10 md:hidden pl-1 pt-1 sm:pl-3 sm:pt-3 bg-white border-b border-gray-200\">\n          <button\n            className=\"-ml-0.5 -mt-0.5 h-12 w-12 inline-flex items-center justify-center rounded-md text-gray-500 hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-red-500\"\n            onClick={() => setSidebarOpen(true)}\n          >\n            <Menu className=\"h-6 w-6\" />\n          </button>\n        </div>\n\n        {/* Page content */}\n        <main className=\"flex-1\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":6385},"client/src/components/footer.tsx":{"content":"import { Link } from \"wouter\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"glass-morphism border-t border-primary/20 relative overflow-hidden py-16\">\n      {/* Fractal background elements */}\n      <div className=\"fractal-shape w-16 h-16 top-5 left-20 opacity-10\"></div>\n      <div className=\"fractal-shape w-20 h-20 bottom-10 right-32 opacity-15\"></div>\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          {/* Company Info */}\n          <div>\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <div className=\"fractal-glow w-8 h-8 bg-gradient-to-br from-primary to-secondary rounded-lg flex items-center justify-center\">\n                <svg className=\"w-5 h-5 text-primary-foreground\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                  <path d=\"M12 2L13.09 8.26L20 9L13.09 9.74L12 16L10.91 9.74L4 9L10.91 8.26L12 2Z\"/>\n                </svg>\n              </div>\n              <h3 className=\"text-2xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n                FractalCraft\n              </h3>\n            </div>\n            <p className=\"text-gray-300 mb-4\">\n              Δημιουργούμε προσωποποιημένα παζλ υψηλής ποιότητας που φέρνουν χαρά και δημιουργικότητα στη ζωή σας.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a \n                href=\"#\" \n                className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center hover:bg-primary/80 transition-colors\"\n                data-testid=\"link-facebook\"\n              >\n                <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n                </svg>\n              </a>\n              <a \n                href=\"#\" \n                className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center hover:bg-primary/80 transition-colors\"\n                data-testid=\"link-instagram\"\n              >\n                <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M12.017 0C5.396 0 .029 5.367.029 11.987c0 6.62 5.367 11.987 11.988 11.987c6.62 0 11.987-5.367 11.987-11.987C24.014 5.367 18.637.001 12.017.001zM8.449 16.988c-1.297 0-2.448-.49-3.328-1.297L6.468 14.34c.568.568 1.34.91 2.188.91c1.694 0 3.066-1.372 3.066-3.066c0-.847-.342-1.62-.91-2.188l1.351-1.351c.807.88 1.297 2.031 1.297 3.328c0 2.692-2.183 4.875-4.875 4.875z\"/>\n                </svg>\n              </a>\n            </div>\n          </div>\n\n          {/* Quick Links */}\n          <div>\n            <h4 className=\"text-lg font-semibold mb-4\">Γρήγοροι Σύνδεσμοι</h4>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/\">\n                  <a className=\"text-gray-300 hover:text-primary transition-colors\" data-testid=\"link-footer-home\">\n                    Αρχική\n                  </a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/configurator\">\n                  <a className=\"text-gray-300 hover:text-primary transition-colors\" data-testid=\"link-footer-configurator\">\n                    Δημιουργία Παζλ\n                  </a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/templates\">\n                  <a className=\"text-gray-300 hover:text-primary transition-colors\" data-testid=\"link-footer-templates\">\n                    Πρότυπα\n                  </a>\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          {/* Customer Service */}\n          <div>\n            <h4 className=\"text-lg font-semibold mb-4\">Εξυπηρέτηση Πελατών</h4>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link href=\"/faq\">\n                  <a className=\"text-gray-300 hover:text-primary transition-colors\" data-testid=\"link-footer-faq\">\n                    Συχνές Ερωτήσεις\n                  </a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/order-tracking\">\n                  <a className=\"text-gray-300 hover:text-primary transition-colors\" data-testid=\"link-footer-tracking\">\n                    Παρακολούθηση Παραγγελίας\n                  </a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/returns\">\n                  <a className=\"text-gray-300 hover:text-primary transition-colors\" data-testid=\"link-footer-returns\">\n                    Επιστροφές\n                  </a>\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/contact\">\n                  <a className=\"text-gray-300 hover:text-primary transition-colors\" data-testid=\"link-footer-contact\">\n                    Επικοινωνία\n                  </a>\n                </Link>\n              </li>\n            </ul>\n          </div>\n\n          {/* Contact Info */}\n          <div>\n            <h4 className=\"text-lg font-semibold mb-4\">Επικοινωνία</h4>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center text-gray-300\">\n                <svg className=\"w-4 h-4 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\" />\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\" />\n                </svg>\n                <span>Αθήνα, Ελλάδα</span>\n              </div>\n              <div className=\"flex items-center text-gray-300\">\n                <svg className=\"w-4 h-4 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\" />\n                </svg>\n                <span>+30 210 123 4567</span>\n              </div>\n              <div className=\"flex items-center text-gray-300\">\n                <svg className=\"w-4 h-4 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\" />\n                </svg>\n                <span>info@puzzlecraft.gr</span>\n              </div>\n              <div className=\"flex items-center text-gray-300\">\n                <svg className=\"w-4 h-4 mr-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                </svg>\n                <span>Δευ-Παρ: 9:00-18:00</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"border-t border-gray-600 mt-12 pt-8 text-center\">\n          <p className=\"text-gray-300\">\n            © 2024 PuzzleCraft. Όλα τα δικαιώματα διατηρούνται. | \n            <a href=\"#\" className=\"hover:text-primary transition-colors ml-1\">Πολιτική Απορρήτου</a> | \n            <a href=\"#\" className=\"hover:text-primary transition-colors ml-1\">Όροι Χρήσης</a>\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":8184},"client/src/components/fractal-generator.tsx":{"content":"import { useState, useRef, useCallback } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Upload, Settings, ShoppingCart, X, Zap, RotateCcw } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCartStore } from \"@/lib/cart-store\";\n\ninterface UploadedImage {\n  file: File;\n  preview: string;\n}\n\ninterface PuzzleConfig {\n  size: string;\n  material: string;\n  pieceCount: number;\n}\n\ninterface GeneratorSettings {\n  seed: number;\n  ncols: number;\n  nrows: number;\n  radius: number;\n  arcShape: number;\n  useRandomSeed: boolean;\n  minPieceSize: number;\n  maxPieceSize: number;\n}\n\nexport default function FractalGeneratorComponent() {\n  const [uploadedImage, setUploadedImage] = useState<UploadedImage | null>(null);\n  const [puzzleConfig, setPuzzleConfig] = useState<PuzzleConfig>({\n    size: \"30x40\",\n    material: \"wood\",\n    pieceCount: 500\n  });\n  const [generatorSettings, setGeneratorSettings] = useState<GeneratorSettings>({\n    seed: 123,\n    ncols: 20,\n    nrows: 15,\n    radius: 6.0,\n    arcShape: 0, // 0=circle, 1=square, 2=octagon\n    useRandomSeed: false,\n    minPieceSize: 1,\n    maxPieceSize: 3\n  });\n  const [svgOutput, setSvgOutput] = useState<string>('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [currentStep, setCurrentStep] = useState<'upload' | 'generate' | 'configure'>('upload');\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n  const { addItem } = useCartStore();\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      handleImageUpload(file);\n    }\n  };\n\n  const handleDrop = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    const file = e.dataTransfer.files[0];\n    if (file) {\n      handleImageUpload(file);\n    }\n  }, []);\n\n  const handleDragOver = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n  }, []);\n\n  const handleImageUpload = useCallback((file: File) => {\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"Σφάλμα\",\n        description: \"Παρακαλώ επιλέξτε μια έγκυρη εικόνα\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const preview = URL.createObjectURL(file);\n    setUploadedImage({ file, preview });\n    setCurrentStep('generate');\n    \n    toast({\n      title: \"Επιτυχία!\",\n      description: \"Η εικόνα σας ανέβηκε επιτυχώς. Τώρα δημιουργήστε το παζλ!\"\n    });\n  }, [toast]);\n\n  const generatePuzzle = useCallback(async () => {\n    if (!uploadedImage) return;\n    \n    setIsGenerating(true);\n    \n    try {\n      const { CircleFractalJigsaw } = await import(\"@/lib/fractal-generator\");\n      const { seed, ncols, nrows, arcShape, minPieceSize, maxPieceSize } = generatorSettings;\n      \n      // Create puzzle generator with your exact algorithm\n      const jig = new CircleFractalJigsaw(ncols, nrows, minPieceSize, maxPieceSize);\n      jig.setSeed(seed);\n      \n      // Generate the puzzle using your algorithm\n      console.log('Starting generation...');\n      jig.generate();\n      console.log('After generate(), pieces:', jig.getPieceCount());\n      \n      let fillIterations = 0;\n      while (jig.fillholes(false) && fillIterations < 10) {\n        fillIterations++;\n        console.log(`Fillholes iteration ${fillIterations}, pieces:`, jig.getPieceCount());\n      }\n      jig.fillholes(true); // Final pass with partials allowed\n      console.log('Final piece count after fillholes:', jig.getPieceCount());\n      \n      // Export SVG using your algorithm\n      const frame = 10;\n      const crad = 15;\n      const svgData = jig.exportSVG(frame, crad, arcShape);\n      \n      console.log('Generator settings:', { seed, ncols, nrows, arcShape });\n      console.log('Generated pieces:', jig.getPieceCount());\n      console.log('SVG data length:', svgData.length);\n      console.log('Full SVG:', svgData);\n      \n      // Test if multipaths returns actual data\n      const paths = jig.multipaths(frame, crad, arcShape);\n      console.log('Number of paths:', paths.length);\n      console.log('First path sample:', paths[0]?.substring(0, 100));\n      \n      const width = ncols * 2 * crad + 2 * frame;\n      const height = nrows * 2 * crad + 2 * frame;\n      \n      // Combine the generated SVG with the background image\n      const svgContent = `\n        <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 ${width} ${height}\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMidYMid meet\" style=\"max-width: 100%; max-height: 100%; object-fit: contain;\">\n          <defs>\n            <pattern id=\"imagePattern\" patternUnits=\"userSpaceOnUse\" width=\"${width}\" height=\"${height}\">\n              <image href=\"${uploadedImage.preview}\" x=\"0\" y=\"0\" width=\"${width}\" height=\"${height}\" preserveAspectRatio=\"xMidYMid slice\"/>\n            </pattern>\n          </defs>\n          <rect width=\"${width}\" height=\"${height}\" fill=\"url(#imagePattern)\"/>\n          ${svgData.replace(/^.*?<svg[^>]*>(.*)<\\/svg>$/, '$1')}\n        </svg>\n      `;\n      \n      setSvgOutput(svgContent);\n      setCurrentStep('configure');\n      \n      const pieceCount = jig.getPieceCount();\n      const difficulty = pieceCount > 200 ? \"Πολύ δύσκολο\" : pieceCount > 120 ? \"Δύσκολο\" : pieceCount > 80 ? \"Μεσαίο\" : \"Εύκολο\";\n      \n      // Create celebration effect\n      const celebrationToast = document.createElement('div');\n      celebrationToast.className = 'celebration-toast';\n      celebrationToast.innerHTML = `\n        <div class=\"celebration-content\">\n          <div class=\"confetti-container\">\n            ${Array.from({ length: 20 }, (_, i) => `\n              <div class=\"confetti confetti-${i % 6}\" style=\"--delay: ${i * 0.1}s; --x: ${Math.random() * 100}%; --rotation: ${Math.random() * 360}deg;\"></div>\n            `).join('')}\n          </div>\n          <div class=\"celebration-message\">\n            <div class=\"celebration-title\">🎉 ΦΑΝΤΑΣΤΙΚΟ! 🎉</div>\n            <div class=\"celebration-description\">\n              Το παζλ δημιουργήθηκε με ${pieceCount} κομμάτια!\n              <br><span class=\"difficulty-badge\">${difficulty}</span>\n            </div>\n            <div class=\"ribbons\">\n              <div class=\"ribbon ribbon-left\"></div>\n              <div class=\"ribbon ribbon-right\"></div>\n            </div>\n          </div>\n        </div>\n      `;\n      \n      document.body.appendChild(celebrationToast);\n      \n      // Remove after animation\n      setTimeout(() => {\n        if (celebrationToast.parentNode) {\n          celebrationToast.parentNode.removeChild(celebrationToast);\n        }\n      }, 4000);\n      \n      // Also show regular toast for consistency\n      toast({\n        title: \"Επιτυχία!\",\n        description: `Το παζλ δημιουργήθηκε με ${pieceCount} κομμάτια! (${difficulty})`\n      });\n      \n    } catch (error) {\n      console.error('Error generating puzzle:', error);\n      const errorMessage = error instanceof Error ? error.message : 'Άγνωστο σφάλμα';\n      const errorStack = error instanceof Error ? error.stack : '';\n      console.error('Error details:', errorMessage, errorStack);\n      toast({\n        title: \"Σφάλμα\",\n        description: `Σφάλμα κατά τη δημιουργία του παζλ: ${errorMessage}`,\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsGenerating(false);\n    }\n  }, [uploadedImage, generatorSettings, toast]);\n\n  const calculatePrice = () => {\n    const basePrice = 25;\n    const materialMultiplier = {\n      'paper': 1,\n      'wood': 1.4,\n      'acrylic': 1.8\n    }[puzzleConfig.material] || 1;\n    \n    const sizeMultiplier = {\n      '20x30': 1,\n      '30x40': 1.4,\n      '40x60': 1.8,\n      '60x80': 2.6\n    }[puzzleConfig.size] || 1;\n    \n    // Calculate piece count based on generator settings\n    const pieceCount = generatorSettings.ncols * generatorSettings.nrows;\n    \n    // Add complexity multiplier based on piece count\n    const complexityMultiplier = pieceCount <= 150 ? 1 : \n                                pieceCount <= 300 ? 1.1 : \n                                pieceCount <= 500 ? 1.2 : 1.3;\n    \n    return (basePrice * materialMultiplier * sizeMultiplier * complexityMultiplier).toFixed(2);\n  };\n\n  const addToCart = () => {\n    if (!uploadedImage || !svgOutput) {\n      toast({\n        title: \"Σφάλμα\",\n        description: \"Παρακαλώ δημιουργήστε πρώτα το παζλ σας\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const pieceCount = generatorSettings.ncols * generatorSettings.nrows;\n    const materialName = puzzleConfig.material === \"wood\" ? \"Ξύλο\" : \n                        puzzleConfig.material === \"acrylic\" ? \"Ακρυλικό\" : \"Χαρτόνι\";\n\n    const cartItem = {\n      id: `fractal-${Date.now()}`,\n      name: `Προσωποποιημένο Fractal Παζλ`,\n      description: `${puzzleConfig.size} • ${materialName} • ${pieceCount} κομμάτια`,\n      price: parseFloat(calculatePrice()),\n      quantity: 1,\n      image: uploadedImage.preview,\n      type: 'custom',\n      customization: {\n        size: puzzleConfig.size,\n        material: puzzleConfig.material,\n        pieceCount: pieceCount,\n        generatorSettings: generatorSettings,\n        svgOutput: svgOutput\n      }\n    };\n\n    addItem(cartItem);\n    \n    toast({\n      title: \"Επιτυχία!\",\n      description: `Το προσωποποιημένο παζλ προστέθηκε στο καλάθι σας`,\n    });\n  };\n\n  const resetGenerator = () => {\n    setUploadedImage(null);\n    setSvgOutput('');\n    setCurrentStep('upload');\n  };\n\n  return (\n    <div className=\"min-h-screen fractal-bg py-20\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 relative\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl md:text-5xl font-bold leading-tight mb-4 text-gray-900 bg-white/95 px-6 py-3 rounded-xl shadow-lg\">\n            Δημιουργός Fractal Παζλ\n          </h1>\n          <p className=\"text-xl max-w-3xl mx-auto leading-relaxed text-gray-800 bg-white/90 px-4 py-2 rounded-lg shadow-md\">\n            Ανεβάστε τη φωτογραφία σας, χρησιμοποιήστε τη γεννήτρια και δείτε την προεπισκόπηση με τις κοπές του παζλ\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Left Column - Controls */}\n          <div className=\"space-y-6\">\n            {/* Step 1: Image Upload */}\n            <Card className=\"bg-white/95 backdrop-blur-sm border-2 border-gray-200 shadow-lg\">\n              <CardHeader className=\"bg-gray-50/80\">\n                <CardTitle className=\"flex items-center gap-2 text-gray-900 font-bold text-lg\">\n                  <Upload className=\"w-5 h-5 text-blue-600\" />\n                  Βήμα 1: Ανέβασμα Εικόνας\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {!uploadedImage ? (\n                  <div\n                    onClick={() => fileInputRef.current?.click()}\n                    onDrop={handleDrop}\n                    onDragOver={handleDragOver}\n                    className=\"border-2 border-dashed border-primary/30 rounded-lg p-8 text-center hover:border-primary/50 transition-colors cursor-pointer\"\n                    data-testid=\"upload-area\"\n                  >\n                    <Upload className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n                    <p className=\"text-lg font-bold mb-2 text-gray-900\">Κάντε κλικ ή σύρετε την εικόνα σας</p>\n                    <p className=\"text-sm font-semibold text-gray-700\">\n                      Υποστηριζόμενες μορφές: JPG, PNG, WEBP\n                    </p>\n                  </div>\n                ) : (\n                  <div className=\"relative\">\n                    <img\n                      src={uploadedImage.preview}\n                      alt=\"Uploaded\"\n                      className=\"w-full h-48 object-cover rounded-lg\"\n                      data-testid=\"img-uploaded\"\n                    />\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      className=\"absolute top-2 right-2\"\n                      onClick={resetGenerator}\n                      data-testid=\"button-reset\"\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                )}\n                <Input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={handleFileSelect}\n                  className=\"hidden\"\n                  data-testid=\"file-input\"\n                />\n              </CardContent>\n            </Card>\n\n            {/* Step 2: Puzzle Generator */}\n            {currentStep === 'generate' && uploadedImage && (\n              <Card className=\"bg-white/95 backdrop-blur-sm border-2 border-gray-200 shadow-lg\">\n                <CardHeader className=\"bg-blue-50/80\">\n                  <CardTitle className=\"flex items-center gap-2 text-gray-900 font-bold text-lg\">\n                    <Zap className=\"w-5 h-5 text-yellow-600\" />\n                    Βήμα 2: Γεννήτρια Παζλ\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <Label htmlFor=\"seed\" className=\"text-gray-900 font-bold text-base\">Σπόρος (Seed)</Label>\n                        <div className=\"group relative\">\n                          <div className=\"w-4 h-4 bg-blue-500 rounded-full flex items-center justify-center cursor-help\">\n                            <span className=\"text-white text-xs font-bold\">!</span>\n                          </div>\n                          <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-900 text-white text-sm rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-10\">\n                            Αλλάζει τη μορφή και το σχήμα των κομματιών\n                            <div className=\"absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-gray-900\"></div>\n                          </div>\n                        </div>\n                      </div>\n                      <Input\n                        id=\"seed\"\n                        type=\"number\"\n                        value={generatorSettings.seed}\n                        onChange={(e) => setGeneratorSettings(prev => ({ ...prev, seed: parseInt(e.target.value) || 1 }))}\n                        data-testid=\"input-seed\"\n                        className=\"text-lg font-bold bg-white border-2 border-gray-400 text-gray-900\"\n                      />\n                    </div>\n\n                    <div>\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <Label className=\"text-gray-900 font-bold text-base\">Μέγεθος Παζλ</Label>\n                        <div className=\"group relative\">\n                          <div className=\"w-4 h-4 bg-blue-500 rounded-full flex items-center justify-center cursor-help\">\n                            <span className=\"text-white text-xs font-bold\">!</span>\n                          </div>\n                          <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-900 text-white text-sm rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-10\">\n                            Καθορίζει τη δυσκολία και τη λεπτομέρεια του παζλ\n                            <div className=\"absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-gray-900\"></div>\n                          </div>\n                        </div>\n                      </div>\n                      <RadioGroup\n                        value={`${generatorSettings.ncols}x${generatorSettings.nrows}`}\n                        onValueChange={(value) => {\n                          const [cols, rows] = value.split('x').map(Number);\n                          setGeneratorSettings(prev => ({ ...prev, ncols: cols, nrows: rows }));\n                        }}\n                        className=\"grid grid-cols-2 gap-2 mt-2\"\n                      >\n                        <div className=\"flex items-center space-x-2 p-2 bg-white rounded border\">\n                          <RadioGroupItem value=\"15x10\" id=\"small\" />\n                          <Label htmlFor=\"small\" className=\"text-gray-900 font-semibold\">Μικρό (15×10)</Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2 p-2 bg-white rounded border\">\n                          <RadioGroupItem value=\"20x15\" id=\"medium\" />\n                          <Label htmlFor=\"medium\" className=\"text-gray-900 font-semibold\">Μεσαίο (20×15)</Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2 p-2 bg-white rounded border\">\n                          <RadioGroupItem value=\"25x20\" id=\"large\" />\n                          <Label htmlFor=\"large\" className=\"text-gray-900 font-semibold\">Μεγάλο (25×20)</Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2 p-2 bg-white rounded border\">\n                          <RadioGroupItem value=\"30x25\" id=\"xlarge\" />\n                          <Label htmlFor=\"xlarge\" className=\"text-gray-900 font-semibold\">Πολύ Μεγάλο (30×25)</Label>\n                        </div>\n                      </RadioGroup>\n                    </div>\n\n                    <div>\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <Label className=\"text-gray-900 font-bold text-base\">Σχήμα Κομματιών</Label>\n                        <div className=\"group relative\">\n                          <div className=\"w-4 h-4 bg-blue-500 rounded-full flex items-center justify-center cursor-help\">\n                            <span className=\"text-white text-xs font-bold\">!</span>\n                          </div>\n                          <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-900 text-white text-sm rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-10\">\n                            Επιλέγει το βασικό σχήμα για τα κομμάτια του παζλ\n                            <div className=\"absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-gray-900\"></div>\n                          </div>\n                        </div>\n                      </div>\n                      <RadioGroup\n                        value={generatorSettings.arcShape.toString()}\n                        onValueChange={(value) => setGeneratorSettings(prev => ({ ...prev, arcShape: parseInt(value) }))}\n                        className=\"grid grid-cols-3 gap-2 mt-2\"\n                      >\n                        <div className=\"flex items-center space-x-2 p-2 bg-white rounded border\">\n                          <RadioGroupItem value=\"0\" id=\"circle\" />\n                          <Label htmlFor=\"circle\" className=\"text-gray-900 font-semibold\">Κύκλος</Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2 p-2 bg-white rounded border\">\n                          <RadioGroupItem value=\"1\" id=\"square\" />\n                          <Label htmlFor=\"square\" className=\"text-gray-900 font-semibold\">Τετράγωνο</Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2 p-2 bg-white rounded border\">\n                          <RadioGroupItem value=\"2\" id=\"octagon\" />\n                          <Label htmlFor=\"octagon\" className=\"text-gray-900 font-semibold\">Οκτάγωνο</Label>\n                        </div>\n                      </RadioGroup>\n                    </div>\n\n                    <div>\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <Label className=\"text-gray-900 font-bold text-base\">Βαθμός Δυσκολίας</Label>\n                        <div className=\"group relative\">\n                          <div className=\"w-4 h-4 bg-blue-500 rounded-full flex items-center justify-center cursor-help\">\n                            <span className=\"text-white text-xs font-bold\">!</span>\n                          </div>\n                          <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-900 text-white text-sm rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-10\">\n                            Καθορίζει πόσο περίπλοκες θα είναι οι κοπές των κομματιών\n                            <div className=\"absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-gray-900\"></div>\n                          </div>\n                        </div>\n                      </div>\n                      <RadioGroup\n                        value={`${generatorSettings.minPieceSize}-${generatorSettings.maxPieceSize}`}\n                        onValueChange={(value) => {\n                          const [min, max] = value.split('-').map(Number);\n                          setGeneratorSettings(prev => ({ ...prev, minPieceSize: min, maxPieceSize: max }));\n                        }}\n                        className=\"grid grid-cols-1 gap-2 mt-2\"\n                      >\n                        <div className=\"flex items-center space-x-2 p-2 bg-white rounded border\">\n                          <RadioGroupItem value=\"1-2\" id=\"veryhard\" />\n                          <Label htmlFor=\"veryhard\" className=\"cursor-pointer text-gray-900 font-semibold\">\n                            Πολύ δύσκολο\n                          </Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2 p-2 bg-white rounded border\">\n                          <RadioGroupItem value=\"1-3\" id=\"hard\" />\n                          <Label htmlFor=\"hard\" className=\"cursor-pointer text-gray-900 font-semibold\">\n                            Δύσκολο\n                          </Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2 p-2 bg-white rounded border\">\n                          <RadioGroupItem value=\"2-4\" id=\"medium\" />\n                          <Label htmlFor=\"medium\" className=\"cursor-pointer text-gray-900 font-semibold\">\n                            Μεσαίο\n                          </Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2 p-2 bg-white rounded border\">\n                          <RadioGroupItem value=\"3-6\" id=\"easy\" />\n                          <Label htmlFor=\"easy\" className=\"cursor-pointer text-gray-900 font-semibold\">\n                            Εύκολο\n                          </Label>\n                        </div>\n                        <div className=\"flex items-center space-x-2 p-2 bg-white rounded border\">\n                          <RadioGroupItem value=\"4-8\" id=\"veryeasy\" />\n                          <Label htmlFor=\"veryeasy\" className=\"cursor-pointer text-gray-900 font-semibold\">\n                            Πολύ εύκολο\n                          </Label>\n                        </div>\n                      </RadioGroup>\n                    </div>\n                  </div>\n\n                  <Button \n                    onClick={generatePuzzle}\n                    disabled={isGenerating}\n                    className=\"w-full bg-gradient-to-r from-primary to-secondary hover:from-primary/90 hover:to-secondary/90\"\n                    data-testid=\"button-generate-puzzle\"\n                  >\n                    {isGenerating ? (\n                      <>\n                        <div className=\"animate-spin w-4 h-4 mr-2 border-2 border-white border-t-transparent rounded-full\"></div>\n                        Δημιουργία...\n                      </>\n                    ) : (\n                      <>\n                        <Zap className=\"w-4 h-4 mr-2\" />\n                        Δημιουργία Παζλ\n                      </>\n                    )}\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Step 3: Configuration */}\n            {currentStep === 'configure' && svgOutput && (\n              <Card className=\"bg-white/95 backdrop-blur-sm border-2 border-gray-200 shadow-lg\">\n                <CardHeader className=\"bg-green-50/80\">\n                  <CardTitle className=\"flex items-center gap-2 text-gray-900 font-bold text-lg\">\n                    <Settings className=\"w-5 h-5 text-green-600\" />\n                    Βήμα 3: Διαμόρφωση\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label className=\"text-gray-900 font-bold text-base\">Μέγεθος</Label>\n                      <RadioGroup\n                        value={puzzleConfig.size}\n                        onValueChange={(value) => setPuzzleConfig(prev => ({ ...prev, size: value }))}\n                        className=\"grid grid-cols-1 gap-2 mt-2\"\n                      >\n                        {[\n                          { value: \"20x30\", label: \"20x30cm\", price: \"€25\" },\n                          { value: \"30x40\", label: \"30x40cm\", price: \"€35\" },\n                          { value: \"40x60\", label: \"40x60cm\", price: \"€45\" },\n                          { value: \"60x80\", label: \"60x80cm\", price: \"€65\" }\n                        ].map((size) => (\n                          <div key={size.value} className=\"flex items-center space-x-2 p-3 bg-white rounded-lg border-2 border-gray-200\">\n                            <RadioGroupItem value={size.value} id={size.value} />\n                            <Label htmlFor={size.value} className=\"flex-1 cursor-pointer\">\n                              <span className=\"text-gray-900 font-bold\">{size.label}</span>\n                              <Badge variant=\"secondary\" className=\"ml-2 text-gray-900 bg-yellow-100 font-bold\">{size.price}</Badge>\n                            </Label>\n                          </div>\n                        ))}\n                      </RadioGroup>\n                    </div>\n\n                    <div>\n                      <Label className=\"text-gray-900 font-bold text-base\">Υλικό</Label>\n                      <RadioGroup\n                        value={puzzleConfig.material}\n                        onValueChange={(value) => setPuzzleConfig(prev => ({ ...prev, material: value }))}\n                        className=\"grid grid-cols-1 gap-2 mt-2\"\n                      >\n                        {[\n                          { value: \"paper\", label: \"Χαρτόνι\", extra: \"Βασική επιλογή\" },\n                          { value: \"wood\", label: \"Ξύλο\", extra: \"Premium +40%\" },\n                          { value: \"acrylic\", label: \"Ακρυλικό\", extra: \"Deluxe +80%\" }\n                        ].map((material) => (\n                          <div key={material.value} className=\"flex items-center space-x-2 p-3 bg-white rounded-lg border-2 border-gray-200\">\n                            <RadioGroupItem value={material.value} id={material.value} />\n                            <Label htmlFor={material.value} className=\"flex-1 cursor-pointer\">\n                              <span className=\"text-gray-900 font-bold\">{material.label}</span>\n                              <span className=\"text-gray-600 text-sm ml-2 font-semibold\">{material.extra}</span>\n                            </Label>\n                          </div>\n                        ))}\n                      </RadioGroup>\n                    </div>\n\n\n                  </div>\n\n                  <Separator />\n                  \n                  <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                    <div>\n                      <div className=\"text-2xl font-bold text-gray-900\">€{calculatePrice()}</div>\n                      <div className=\"text-sm text-gray-700 font-semibold\">\n                        {puzzleConfig.size} • {puzzleConfig.material === \"wood\" ? \"Ξύλο\" : puzzleConfig.material === \"acrylic\" ? \"Ακρυλικό\" : \"Χαρτόνι\"}\n                      </div>\n                    </div>\n                    <Button \n                      size=\"lg\"\n                      onClick={addToCart}\n                      className=\"bg-gradient-to-r from-primary to-secondary hover:from-primary/90 hover:to-secondary/90\"\n                      data-testid=\"add-to-cart\"\n                    >\n                      <ShoppingCart className=\"w-4 h-4 mr-2\" />\n                      Στο Καλάθι\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n\n          {/* Right Column - Preview */}\n          <div className=\"space-y-6\">\n            <Card className=\"glass-morphism border-primary/20\">\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle>Προεπισκόπηση Παζλ</CardTitle>\n                <div className=\"flex gap-2\">\n                  {currentStep === 'configure' && svgOutput && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setSvgOutput('');\n                        setCurrentStep('generate');\n                      }}\n                      className=\"text-xs\"\n                      data-testid=\"button-change-settings\"\n                    >\n                      <Settings className=\"w-3 h-3 mr-1\" />\n                      Αλλαγή Ρυθμίσεων\n                    </Button>\n                  )}\n                  {uploadedImage && (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setUploadedImage(null);\n                        setSvgOutput('');\n                        setCurrentStep('upload');\n                        if (fileInputRef.current) {\n                          fileInputRef.current.value = '';\n                        }\n                      }}\n                      className=\"text-xs\"\n                      data-testid=\"button-change-image\"\n                    >\n                      <RotateCcw className=\"w-3 h-3 mr-1\" />\n                      Αλλαγή Εικόνας\n                    </Button>\n                  )}\n                </div>\n              </CardHeader>\n              <CardContent>\n                {!uploadedImage ? (\n                  <div className=\"aspect-square bg-muted/20 rounded-lg flex items-center justify-center\">\n                    <p className=\"text-muted-foreground\">Ανεβάστε μια εικόνα για προεπισκόπηση</p>\n                  </div>\n                ) : currentStep === 'generate' ? (\n                  <div className=\"aspect-square bg-muted/20 rounded-lg flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <img\n                        src={uploadedImage.preview}\n                        alt=\"Original\"\n                        className=\"w-full max-w-64 mx-auto rounded-lg mb-4\"\n                      />\n                      <p className=\"text-muted-foreground\">Πατήστε \"Δημιουργία Παζλ\" για να δείτε τις κοπές</p>\n                    </div>\n                  </div>\n                ) : svgOutput ? (\n                  <div className=\"aspect-square text-[#000000]\">\n                    <div \n                      dangerouslySetInnerHTML={{ __html: svgOutput }} \n                      className=\"w-full h-full flex items-center justify-center overflow-hidden\" \n                      style={{ boxSizing: 'border-box' }}\n                    />\n                  </div>\n                ) : (\n                  <div className=\"aspect-square bg-muted/20 rounded-lg flex items-center justify-center\">\n                    <p className=\"text-muted-foreground\">Δημιουργήστε το παζλ για προεπισκόπηση</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":33978},"client/src/components/header.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { ShoppingCart, Menu, X, User, Heart, Search, Package, LogOut, Settings, ShoppingBag } from \"lucide-react\";\nimport { useCartStore } from \"@/lib/cart-store\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function Header() {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [location] = useLocation();\n  const { items } = useCartStore();\n  const { user, isAuthenticated, logout } = useAuth();\n\n  const itemCount = items.reduce((total, item) => total + item.quantity, 0);\n\n  const navigation = [\n    { name: \"Αρχική\", href: \"/\", current: location === \"/\" },\n    { name: \"Fractal Generator\", href: \"/fractal-generator\", current: location === \"/fractal-generator\" },\n    { name: \"Παρακολούθηση Παραγγελίας\", href: \"/order-tracking\", current: location === \"/order-tracking\" },\n    { name: \"Blog\", href: \"/blog\", current: location === \"/blog\" },\n    { name: \"Επικοινωνία\", href: \"/contact\", current: location === \"/contact\" },\n  ];\n\n  const handleLogout = async () => {\n    await logout();\n    setIsMobileMenuOpen(false);\n  };\n\n  return (\n    <header className=\"bg-background/95 backdrop-blur-sm border-b border-border/40 sticky top-0 z-50\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo */}\n          <Link href=\"/\">\n            <div className=\"flex items-center space-x-2 cursor-pointer\">\n              <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-secondary rounded-lg flex items-center justify-center\">\n                <Package className=\"w-5 h-5 text-primary-foreground\" />\n              </div>\n              <div className=\"hidden sm:block\">\n                <h1 className=\"text-xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n                  FractalCraft\n                </h1>\n                <p className=\"text-xs text-muted-foreground -mt-1\">\n                  Μοναδικά Fractal Παζλ\n                </p>\n              </div>\n            </div>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <nav className=\"hidden lg:flex items-center space-x-6\">\n            {navigation.map((item) => (\n              <Link key={item.name} href={item.href}>\n                <span\n                  className={cn(\n                    \"text-sm font-medium transition-colors hover:text-primary cursor-pointer\",\n                    item.current\n                      ? \"text-primary border-b-2 border-primary pb-1\"\n                      : \"text-muted-foreground\"\n                  )}\n                >\n                  {item.name}\n                </span>\n              </Link>\n            ))}\n          </nav>\n\n          {/* Right Side Actions */}\n          <div className=\"flex items-center space-x-3\">\n            {/* Search Button */}\n            <Button variant=\"ghost\" size=\"sm\" className=\"hidden sm:flex\">\n              <Search className=\"w-4 h-4\" />\n            </Button>\n\n            {/* Wishlist Button */}\n            <Link href=\"/wishlist\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"hidden sm:flex\" data-testid=\"button-wishlist\">\n                <Heart className=\"w-4 h-4\" />\n              </Button>\n            </Link>\n\n            {/* Shopping Cart */}\n            <Link href=\"/cart\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"relative\" data-testid=\"button-cart\">\n                <ShoppingCart className=\"w-4 h-4\" />\n                {itemCount > 0 && (\n                  <Badge \n                    variant=\"destructive\" \n                    className=\"absolute -top-2 -right-2 h-5 w-5 flex items-center justify-center p-0 text-xs\"\n                  >\n                    {itemCount}\n                  </Badge>\n                )}\n              </Button>\n            </Link>\n\n            {/* User Authentication Section - Dynamic based on login state */}\n            {isAuthenticated && user ? (\n              <div className=\"hidden sm:flex items-center\">\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" size=\"sm\" className=\"flex items-center gap-2\" data-testid=\"button-user-menu\">\n                      <Avatar className=\"w-6 h-6\">\n                        <AvatarImage src={user.profileImage || ''} alt={`${user.firstName} ${user.lastName}`} />\n                        <AvatarFallback className=\"text-xs bg-gradient-to-br from-primary to-secondary text-primary-foreground\">\n                          {user.firstName.charAt(0)}{user.lastName.charAt(0)}\n                        </AvatarFallback>\n                      </Avatar>\n                      <span className=\"hidden md:inline text-sm\">{user.firstName}</span>\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"w-48\">\n                    <DropdownMenuLabel>\n                      <div className=\"flex flex-col space-y-1\">\n                        <p className=\"text-sm font-medium\">{user.firstName} {user.lastName}</p>\n                        <p className=\"text-xs text-muted-foreground\">{user.email}</p>\n                      </div>\n                    </DropdownMenuLabel>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/profile\" className=\"w-full cursor-pointer\">\n                        <User className=\"w-4 h-4 mr-2\" />\n                        Ο Λογαριασμός μου\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/orders\" className=\"w-full cursor-pointer\">\n                        <ShoppingBag className=\"w-4 h-4 mr-2\" />\n                        Οι Παραγγελίες μου\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem onClick={handleLogout} className=\"text-destructive cursor-pointer\" data-testid=\"menu-logout\">\n                      <LogOut className=\"w-4 h-4 mr-2\" />\n                      Αποσύνδεση\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </div>\n            ) : (\n              <div className=\"hidden sm:flex items-center space-x-2\">\n                <Link href=\"/login\">\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"button-login\">\n                    <User className=\"w-4 h-4 mr-2\" />\n                    Σύνδεση\n                  </Button>\n                </Link>\n                <Link href=\"/signup\">\n                  <Button size=\"sm\" data-testid=\"button-signup\">\n                    Εγγραφή\n                  </Button>\n                </Link>\n              </div>\n            )}\n\n            {/* Mobile Menu Toggle */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"lg:hidden\"\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              data-testid=\"button-mobile-menu\"\n            >\n              {isMobileMenuOpen ? <X className=\"w-5 h-5\" /> : <Menu className=\"w-5 h-5\" />}\n            </Button>\n          </div>\n        </div>\n\n        {/* Mobile Menu */}\n        {isMobileMenuOpen && (\n          <div className=\"lg:hidden border-t border-border/40 py-4\">\n            <div className=\"flex flex-col space-y-3\">\n              {navigation.map((item) => (\n                <Link key={item.name} href={item.href}>\n                  <span\n                    className={cn(\n                      \"block px-3 py-2 text-sm font-medium rounded-md transition-colors cursor-pointer\",\n                      item.current\n                        ? \"bg-primary/10 text-primary\"\n                        : \"text-muted-foreground hover:text-primary hover:bg-primary/5\"\n                    )}\n                    onClick={() => setIsMobileMenuOpen(false)}\n                  >\n                    {item.name}\n                  </span>\n                </Link>\n              ))}\n              \n              {/* Mobile User Section - Dynamic based on login state */}\n              <div className=\"px-3 pt-3 border-t border-border/40\">\n                {isAuthenticated && user ? (\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center gap-3 p-2 rounded-lg bg-muted/50\">\n                      <Avatar className=\"w-8 h-8\">\n                        <AvatarImage src={user.profileImage || ''} alt={`${user.firstName} ${user.lastName}`} />\n                        <AvatarFallback className=\"text-xs bg-gradient-to-br from-primary to-secondary text-primary-foreground\">\n                          {user.firstName.charAt(0)}{user.lastName.charAt(0)}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-medium\">{user.firstName} {user.lastName}</p>\n                        <p className=\"text-xs text-muted-foreground\">{user.email}</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex flex-col space-y-2\">\n                      <Link href=\"/profile\">\n                        <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\" data-testid=\"button-mobile-profile\">\n                          <User className=\"w-4 h-4 mr-2\" />\n                          Ο Λογαριασμός μου\n                        </Button>\n                      </Link>\n                      <Link href=\"/orders\">\n                        <Button variant=\"outline\" size=\"sm\" className=\"w-full justify-start\" data-testid=\"button-mobile-orders\">\n                          <ShoppingBag className=\"w-4 h-4 mr-2\" />\n                          Οι Παραγγελίες μου\n                        </Button>\n                      </Link>\n                      <Button \n                        variant=\"destructive\" \n                        size=\"sm\" \n                        className=\"w-full justify-start\" \n                        onClick={handleLogout}\n                        data-testid=\"button-mobile-logout\"\n                      >\n                        <LogOut className=\"w-4 h-4 mr-2\" />\n                        Αποσύνδεση\n                      </Button>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center space-x-2\">\n                    <Link href=\"/login\" className=\"flex-1\">\n                      <Button variant=\"outline\" size=\"sm\" className=\"w-full\" data-testid=\"button-mobile-login\">\n                        <User className=\"w-4 h-4 mr-2\" />\n                        Σύνδεση\n                      </Button>\n                    </Link>\n                    <Link href=\"/signup\" className=\"flex-1\">\n                      <Button size=\"sm\" className=\"w-full\" data-testid=\"button-mobile-signup\">\n                        Εγγραφή\n                      </Button>\n                    </Link>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </header>\n  );\n}","size_bytes":11816},"client/src/components/image-editor.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Upload, \n  RotateCcw, \n  RotateCw, \n  FlipHorizontal, \n  FlipVertical, \n  Crop, \n  Download,\n  Undo,\n  Redo,\n  Palette,\n  Sliders,\n  Filter,\n  Scissors,\n  Move3D,\n  RefreshCw\n} from \"lucide-react\";\nimport { ImageEditor, ImageFilter, ColorAdjustments, CropArea, ImageTransform, imageFilters } from \"@/lib/image-editor\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ImageEditorComponentProps {\n  onImageProcessed?: (imageData: string) => void;\n  initialImage?: string;\n  className?: string;\n}\n\nexport default function ImageEditorComponent({ \n  onImageProcessed, \n  initialImage,\n  className \n}: ImageEditorComponentProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [editor, setEditor] = useState<ImageEditor | null>(null);\n  const [isImageLoaded, setIsImageLoaded] = useState(false);\n  const [activeTab, setActiveTab] = useState(\"upload\");\n  const [history, setHistory] = useState<string[]>([]);\n  const [historyIndex, setHistoryIndex] = useState(-1);\n  \n  // Color adjustments state\n  const [colorAdjustments, setColorAdjustments] = useState<ColorAdjustments>({\n    brightness: 0,\n    contrast: 0,\n    saturation: 0,\n    hue: 0,\n    gamma: 1\n  });\n  \n  // Transform state\n  const [transform, setTransform] = useState<ImageTransform>({\n    x: 0,\n    y: 0,\n    scale: 1,\n    rotation: 0,\n    flipX: false,\n    flipY: false\n  });\n  \n  // Crop state\n  const [cropMode, setCropMode] = useState(false);\n  const [cropArea, setCropArea] = useState<CropArea>({ x: 0, y: 0, width: 100, height: 100 });\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      const newEditor = new ImageEditor(canvasRef.current);\n      setEditor(newEditor);\n      \n      if (initialImage) {\n        loadImageFromUrl(initialImage);\n      }\n    }\n  }, [initialImage]);\n\n  const saveToHistory = () => {\n    if (!editor) return;\n    \n    const imageData = editor.exportImage();\n    const newHistory = [...history.slice(0, historyIndex + 1), imageData];\n    setHistory(newHistory);\n    setHistoryIndex(newHistory.length - 1);\n  };\n\n  const undo = () => {\n    if (historyIndex > 0 && editor) {\n      setHistoryIndex(historyIndex - 1);\n      const previousState = history[historyIndex - 1];\n      loadImageFromUrl(previousState);\n    }\n  };\n\n  const redo = () => {\n    if (historyIndex < history.length - 1 && editor) {\n      setHistoryIndex(historyIndex + 1);\n      const nextState = history[historyIndex + 1];\n      loadImageFromUrl(nextState);\n    }\n  };\n\n  const loadImageFromUrl = async (url: string) => {\n    if (!editor) return;\n    \n    try {\n      await editor.loadImage(url);\n      setIsImageLoaded(true);\n      if (activeTab === \"upload\") {\n        setActiveTab(\"colors\");\n      }\n    } catch (error) {\n      console.error('Error loading image:', error);\n    }\n  };\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file && editor) {\n      try {\n        await editor.loadImage(file);\n        setIsImageLoaded(true);\n        setActiveTab(\"colors\");\n        saveToHistory();\n      } catch (error) {\n        console.error('Error loading image:', error);\n      }\n    }\n    // Reset the input value to allow uploading the same file again\n    event.target.value = '';\n  };\n\n  const handleColorAdjustment = (key: keyof ColorAdjustments, value: number) => {\n    if (!editor) return;\n    \n    const newAdjustments = { ...colorAdjustments, [key]: value };\n    setColorAdjustments(newAdjustments);\n    \n    editor.resetToOriginal();\n    editor.applyColorAdjustments(newAdjustments);\n  };\n\n  const applyColorChanges = () => {\n    saveToHistory();\n    onImageProcessed?.(editor?.exportImage() || '');\n  };\n\n  const resetColorAdjustments = () => {\n    if (!editor) return;\n    \n    const resetAdjustments: ColorAdjustments = {\n      brightness: 0,\n      contrast: 0,\n      saturation: 0,\n      hue: 0,\n      gamma: 1\n    };\n    \n    setColorAdjustments(resetAdjustments);\n    editor.resetToOriginal();\n  };\n\n  const applyFilter = (filter: ImageFilter, intensity?: number) => {\n    if (!editor || !canvasRef.current) return;\n    \n    const ctx = canvasRef.current.getContext('2d');\n    if (ctx) {\n      filter.apply(canvasRef.current, ctx, intensity);\n      saveToHistory();\n      onImageProcessed?.(editor.exportImage());\n    }\n  };\n\n  const handleTransform = (key: keyof ImageTransform, value: number | boolean) => {\n    if (!editor) return;\n    \n    const newTransform = { ...transform, [key]: value };\n    setTransform(newTransform);\n    editor.applyTransform(newTransform);\n  };\n\n  const applyTransformChanges = () => {\n    saveToHistory();\n    onImageProcessed?.(editor?.exportImage() || '');\n  };\n\n  const resetTransform = () => {\n    if (!editor) return;\n    \n    const resetTransform: ImageTransform = {\n      x: 0,\n      y: 0,\n      scale: 1,\n      rotation: 0,\n      flipX: false,\n      flipY: false\n    };\n    \n    setTransform(resetTransform);\n    editor.resetToOriginal();\n  };\n\n  const applyCrop = () => {\n    if (!editor) return;\n    \n    editor.cropImage(cropArea);\n    setCropMode(false);\n    saveToHistory();\n    onImageProcessed?.(editor.exportImage());\n  };\n\n  const exportImage = () => {\n    if (!editor) return;\n    \n    const imageData = editor.exportImage('png', 0.9);\n    const link = document.createElement('a');\n    link.download = 'edited-puzzle-image.png';\n    link.href = imageData;\n    link.click();\n  };\n\n  const resetToOriginal = () => {\n    if (!editor) return;\n    \n    editor.resetToOriginal();\n    setColorAdjustments({\n      brightness: 0,\n      contrast: 0,\n      saturation: 0,\n      hue: 0,\n      gamma: 1\n    });\n    setTransform({\n      x: 0,\n      y: 0,\n      scale: 1,\n      rotation: 0,\n      flipX: false,\n      flipY: false\n    });\n    saveToHistory();\n    onImageProcessed?.(editor.exportImage());\n  };\n\n  return (\n    <div className={cn(\"w-full space-y-6\", className)}>\n      {/* Header Controls */}\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n          Επεξεργασία Εικόνας\n        </h2>\n        \n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={undo}\n            disabled={historyIndex <= 0}\n            data-testid=\"button-undo\"\n          >\n            <Undo className=\"w-4 h-4\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={redo}\n            disabled={historyIndex >= history.length - 1}\n            data-testid=\"button-redo\"\n          >\n            <Redo className=\"w-4 h-4\" />\n          </Button>\n          <Separator orientation=\"vertical\" className=\"h-6\" />\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={resetToOriginal}\n            disabled={!isImageLoaded}\n            data-testid=\"button-reset\"\n          >\n            <RefreshCw className=\"w-4 h-4 mr-2\" />\n            Επαναφορά\n          </Button>\n          <Button\n            size=\"sm\"\n            onClick={exportImage}\n            disabled={!isImageLoaded}\n            data-testid=\"button-export\"\n          >\n            <Download className=\"w-4 h-4 mr-2\" />\n            Λήψη\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid lg:grid-cols-2 gap-6\">\n        {/* Canvas Area */}\n        <Card className=\"glass-morphism border-primary/20\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Palette className=\"w-5 h-5\" />\n              Προεπισκόπηση\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"relative bg-muted/20 rounded-lg p-4 min-h-[400px] flex items-center justify-center\">\n              {!isImageLoaded ? (\n                <div className=\"text-center space-y-4\">\n                  <Upload className=\"w-16 h-16 mx-auto text-muted-foreground/50\" />\n                  <div>\n                    <p className=\"text-muted-foreground\">Ανεβάστε μια εικόνα για να ξεκινήσετε</p>\n                    <p className=\"text-sm text-muted-foreground/70\">Υποστηριζόμενες μορφές: JPG, PNG, WEBP</p>\n                  </div>\n                </div>\n              ) : (\n                <canvas\n                  ref={canvasRef}\n                  className=\"max-w-full max-h-[500px] object-contain rounded-lg shadow-lg\"\n                  style={{ imageRendering: 'pixelated' }}\n                />\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Control Panel */}\n        <Card className=\"glass-morphism border-primary/20\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Sliders className=\"w-5 h-5\" />\n              Εργαλεία Επεξεργασίας\n            </CardTitle>\n            <CardDescription>\n              Προσαρμόστε την εικόνα σας για το τέλειο παζλ\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"upload\" data-testid=\"tab-upload\">\n                  <Upload className=\"w-4 h-4\" />\n                </TabsTrigger>\n                <TabsTrigger value=\"colors\" disabled={!isImageLoaded} data-testid=\"tab-colors\">\n                  <Palette className=\"w-4 h-4\" />\n                </TabsTrigger>\n                <TabsTrigger value=\"filters\" disabled={!isImageLoaded} data-testid=\"tab-filters\">\n                  <Filter className=\"w-4 h-4\" />\n                </TabsTrigger>\n                <TabsTrigger value=\"transform\" disabled={!isImageLoaded} data-testid=\"tab-transform\">\n                  <Move3D className=\"w-4 h-4\" />\n                </TabsTrigger>\n              </TabsList>\n\n              {/* Upload Tab */}\n              <TabsContent value=\"upload\" className=\"space-y-4\">\n                <div className=\"space-y-4\">\n                  <Label htmlFor=\"image-upload\">Ανέβασμα Εικόνας</Label>\n                  <Input\n                    id=\"image-upload\"\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={handleFileUpload}\n                    ref={fileInputRef}\n                    className=\"hidden\"\n                    data-testid=\"input-image-upload\"\n                  />\n                  <Button \n                    onClick={() => fileInputRef.current?.click()} \n                    className=\"w-full\"\n                    data-testid=\"button-upload-trigger\"\n                  >\n                    <Upload className=\"w-4 h-4 mr-2\" />\n                    Επιλέξτε Εικόνα\n                  </Button>\n                  <p className=\"text-sm text-muted-foreground text-center\">\n                    Υποστηριζόμενες μορφές: JPG, PNG, GIF, WEBP\n                  </p>\n                </div>\n              </TabsContent>\n\n              {/* Color Adjustments Tab */}\n              <TabsContent value=\"colors\" className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label>Φωτεινότητα: {colorAdjustments.brightness}</Label>\n                    <Slider\n                      value={[colorAdjustments.brightness]}\n                      onValueChange={([value]) => handleColorAdjustment('brightness', value)}\n                      min={-100}\n                      max={100}\n                      step={1}\n                      className=\"mt-2\"\n                      data-testid=\"slider-brightness\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label>Αντίθεση: {colorAdjustments.contrast}</Label>\n                    <Slider\n                      value={[colorAdjustments.contrast]}\n                      onValueChange={([value]) => handleColorAdjustment('contrast', value)}\n                      min={-100}\n                      max={100}\n                      step={1}\n                      className=\"mt-2\"\n                      data-testid=\"slider-contrast\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label>Κορεσμός: {colorAdjustments.saturation}</Label>\n                    <Slider\n                      value={[colorAdjustments.saturation]}\n                      onValueChange={([value]) => handleColorAdjustment('saturation', value)}\n                      min={-100}\n                      max={100}\n                      step={1}\n                      className=\"mt-2\"\n                      data-testid=\"slider-saturation\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label>Απόχρωση: {colorAdjustments.hue}°</Label>\n                    <Slider\n                      value={[colorAdjustments.hue]}\n                      onValueChange={([value]) => handleColorAdjustment('hue', value)}\n                      min={-180}\n                      max={180}\n                      step={1}\n                      className=\"mt-2\"\n                      data-testid=\"slider-hue\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label>Gamma: {colorAdjustments.gamma.toFixed(1)}</Label>\n                    <Slider\n                      value={[colorAdjustments.gamma]}\n                      onValueChange={([value]) => handleColorAdjustment('gamma', value)}\n                      min={0.1}\n                      max={3.0}\n                      step={0.1}\n                      className=\"mt-2\"\n                      data-testid=\"slider-gamma\"\n                    />\n                  </div>\n                  \n                  <div className=\"flex gap-2 pt-4\">\n                    <Button onClick={applyColorChanges} className=\"flex-1\" data-testid=\"button-apply-colors\">\n                      Εφαρμογή\n                    </Button>\n                    <Button variant=\"outline\" onClick={resetColorAdjustments} data-testid=\"button-reset-colors\">\n                      Επαναφορά\n                    </Button>\n                  </div>\n                </div>\n              </TabsContent>\n\n              {/* Filters Tab */}\n              <TabsContent value=\"filters\" className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-3\">\n                  {imageFilters.map((filter) => (\n                    <Button\n                      key={filter.name}\n                      variant=\"outline\"\n                      onClick={() => applyFilter(filter)}\n                      className=\"text-sm\"\n                      data-testid={`filter-${filter.name}`}\n                    >\n                      {filter.displayName}\n                    </Button>\n                  ))}\n                </div>\n              </TabsContent>\n\n              {/* Transform Tab */}\n              <TabsContent value=\"transform\" className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label>Περιστροφή: {transform.rotation}°</Label>\n                    <Slider\n                      value={[transform.rotation]}\n                      onValueChange={([value]) => handleTransform('rotation', value)}\n                      min={-180}\n                      max={180}\n                      step={1}\n                      className=\"mt-2\"\n                      data-testid=\"slider-rotation\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label>Κλίμακα: {transform.scale.toFixed(2)}</Label>\n                    <Slider\n                      value={[transform.scale]}\n                      onValueChange={([value]) => handleTransform('scale', value)}\n                      min={0.1}\n                      max={3.0}\n                      step={0.1}\n                      className=\"mt-2\"\n                      data-testid=\"slider-scale\"\n                    />\n                  </div>\n                  \n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant={transform.flipX ? \"default\" : \"outline\"}\n                      onClick={() => handleTransform('flipX', !transform.flipX)}\n                      className=\"flex-1\"\n                      data-testid=\"button-flip-x\"\n                    >\n                      <FlipHorizontal className=\"w-4 h-4 mr-2\" />\n                      Οριζόντια\n                    </Button>\n                    <Button\n                      variant={transform.flipY ? \"default\" : \"outline\"}\n                      onClick={() => handleTransform('flipY', !transform.flipY)}\n                      className=\"flex-1\"\n                      data-testid=\"button-flip-y\"\n                    >\n                      <FlipVertical className=\"w-4 h-4 mr-2\" />\n                      Κάθετα\n                    </Button>\n                  </div>\n                  \n                  <div className=\"flex gap-2 pt-4\">\n                    <Button onClick={applyTransformChanges} className=\"flex-1\" data-testid=\"button-apply-transform\">\n                      Εφαρμογή\n                    </Button>\n                    <Button variant=\"outline\" onClick={resetTransform} data-testid=\"button-reset-transform\">\n                      Επαναφορά\n                    </Button>\n                  </div>\n                </div>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":18487},"client/src/components/material-showcase.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Check } from \"lucide-react\";\n\nconst materials = [\n  {\n    id: \"wood\",\n    name: \"Ξύλο Premium\",\n    description: \"Φυσική ομορφιά και διάρκεια\",\n    icon: \"🌳\",\n    imageUrl: \"https://images.unsplash.com/photo-1544985361-b420d7a77043?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\",\n    features: [\n      \"Υψηλή αντοχή στο χρόνο\",\n      \"Φυσική υφή και άρωμα\",\n      \"Πολυτελής εμφάνιση\",\n      \"Οικολογικό υλικό\"\n    ],\n    price: \"+€15.00\",\n    gradient: \"from-amber-50 to-orange-50\",\n    borderColor: \"primary/20\",\n    iconBg: \"primary\"\n  },\n  {\n    id: \"acrylic\",\n    name: \"Ακρυλικό\",\n    description: \"Μοντέρνο και κομψό\",\n    icon: \"💎\",\n    imageUrl: \"https://images.unsplash.com/photo-1584464491033-06628f3a6b7b?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\",\n    features: [\n      \"Διαφανής και λαμπερό\",\n      \"Εύκολος καθαρισμός\",\n      \"Μοντέρνα αισθητική\",\n      \"Ανθεκτικό στην υγρασία\"\n    ],\n    price: \"+€10.00\",\n    gradient: \"from-blue-50 to-cyan-50\",\n    borderColor: \"gray-200\",\n    iconBg: \"secondary\"\n  },\n  {\n    id: \"paper\",\n    name: \"Χαρτί Υψηλής Ποιότητας\",\n    description: \"Κλασικό και οικονομικό\",\n    icon: \"📄\",\n    imageUrl: \"https://images.unsplash.com/photo-1509021436665-8f07dbf5bf1d?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\",\n    features: [\n      \"Κλασική εμφάνιση\",\n      \"Οικονομική επιλογή\",\n      \"Ματ φινίρισμα\",\n      \"Ιδανικό για αρχάριους\"\n    ],\n    price: \"€25.00\",\n    gradient: \"from-gray-50 to-slate-50\",\n    borderColor: \"gray-200\",\n    iconBg: \"neutral\"\n  }\n];\n\nexport default function MaterialShowcase() {\n  return (\n    <section id=\"materials\" className=\"py-20 bg-white\" data-testid=\"material-showcase\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h3 className=\"text-3xl font-bold text-neutral mb-4\" data-testid=\"text-materials-title\">\n            Επιλέξτε το Υλικό σας\n          </h3>\n          <p className=\"text-xl text-gray-600\" data-testid=\"text-materials-description\">\n            Κάθε υλικό προσφέρει μοναδική εμπειρία και αισθητική\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {materials.map((material) => (\n            <Card \n              key={material.id} \n              className={`bg-gradient-to-br ${material.gradient} border-2 border-${material.borderColor} hover:border-${material.borderColor.replace('/20', '/50')} transition-colors`}\n              data-testid={`card-material-${material.id}`}\n            >\n              <CardContent className=\"p-8\">\n                <div className=\"text-center mb-6\">\n                  <div className={`w-16 h-16 bg-${material.iconBg} rounded-full flex items-center justify-center mx-auto mb-4`}>\n                    <span className=\"text-2xl\">{material.icon}</span>\n                  </div>\n                  <h4 className=\"text-2xl font-bold text-neutral mb-2\" data-testid={`text-material-name-${material.id}`}>\n                    {material.name}\n                  </h4>\n                  <p className=\"text-gray-600\" data-testid={`text-material-description-${material.id}`}>\n                    {material.description}\n                  </p>\n                </div>\n\n                <img\n                  src={material.imageUrl}\n                  alt={`${material.name} texture`}\n                  className=\"w-full h-48 object-cover rounded-xl mb-6 shadow-lg\"\n                  data-testid={`img-material-${material.id}`}\n                />\n\n                <div className=\"space-y-3\">\n                  {material.features.map((feature, index) => (\n                    <div key={index} className=\"flex items-center text-gray-700\" data-testid={`text-feature-${material.id}-${index}`}>\n                      <Check className={`w-5 h-5 text-${material.iconBg} mr-3`} />\n                      <span>{feature}</span>\n                    </div>\n                  ))}\n                </div>\n\n                <div className=\"mt-6 pt-6 border-t border-gray-200\">\n                  <div className=\"text-center\">\n                    <span className={`text-2xl font-bold text-${material.iconBg}`} data-testid={`text-material-price-${material.id}`}>\n                      {material.price}\n                    </span>\n                    <p className=\"text-sm text-gray-600\">\n                      {material.price.includes('+') ? 'επιπλέον κόστος' : 'βασική τιμή'}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5055},"client/src/components/materials-showcase.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Network, Gem, FileText } from \"lucide-react\";\n\nconst materials = [\n  {\n    id: \"wood\",\n    name: \"Ξύλο Premium\",\n    description: \"Φυσική ομορφιά και διάρκεια\",\n    icon: Network,\n    image: \"https://images.unsplash.com/photo-1544985361-b420d7a77043?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\",\n    price: \"+€15.00\",\n    features: [\n      \"Υψηλή αντοχή στο χρόνο\",\n      \"Φυσική υφή και άρωμα\", \n      \"Πολυτελής εμφάνιση\",\n      \"Οικολογικό υλικό\"\n    ],\n    gradientFrom: \"from-amber-50\",\n    gradientTo: \"to-orange-50\",\n    borderColor: \"border-primary/20\",\n    hoverBorderColor: \"hover:border-primary/50\",\n    textColor: \"text-primary\"\n  },\n  {\n    id: \"acrylic\",\n    name: \"Ακρυλικό\",\n    description: \"Μοντέρνο και κομψό\",\n    icon: Gem,\n    image: \"https://images.unsplash.com/photo-1584464491033-06628f3a6b7b?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\",\n    price: \"+€10.00\",\n    features: [\n      \"Διαφανής και λαμπερό\",\n      \"Εύκολος καθαρισμός\",\n      \"Μοντέρνα αισθητική\",\n      \"Ανθεκτικό στην υγρασία\"\n    ],\n    gradientFrom: \"from-blue-50\",\n    gradientTo: \"to-cyan-50\",\n    borderColor: \"border-gray-200\",\n    hoverBorderColor: \"hover:border-secondary/50\",\n    textColor: \"text-secondary\"\n  },\n  {\n    id: \"paper\",\n    name: \"Χαρτί Υψηλής Ποιότητας\",\n    description: \"Κλασικό και οικονομικό\",\n    icon: FileText,\n    image: \"https://images.unsplash.com/photo-1509021436665-8f07dbf5bf1d?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\",\n    price: \"€25.00\",\n    features: [\n      \"Κλασική εμφάνιση\",\n      \"Οικονομική επιλογή\",\n      \"Ματ φινίρισμα\",\n      \"Ιδανικό για αρχάριους\"\n    ],\n    gradientFrom: \"from-gray-50\",\n    gradientTo: \"to-slate-50\",\n    borderColor: \"border-gray-200\",\n    hoverBorderColor: \"hover:border-neutral/50\",\n    textColor: \"text-neutral\"\n  }\n];\n\nexport default function MaterialsShowcase() {\n  return (\n    <section className=\"py-20 bg-white\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl font-bold text-neutral mb-4\">Επιλέξτε το Υλικό σας</h2>\n          <p className=\"text-xl text-gray-600\">Κάθε υλικό προσφέρει μοναδική εμπειρία και αισθητική</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {materials.map((material) => {\n            const IconComponent = material.icon;\n            return (\n              <Card\n                key={material.id}\n                className={`bg-gradient-to-br ${material.gradientFrom} ${material.gradientTo} border-2 ${material.borderColor} ${material.hoverBorderColor} transition-colors`}\n                data-testid={`card-material-${material.id}`}\n              >\n                <CardContent className=\"p-8\">\n                  <div className=\"text-center mb-6\">\n                    <div className={`w-16 h-16 bg-${material.id === 'wood' ? 'primary' : material.id === 'acrylic' ? 'secondary' : 'neutral'} rounded-full flex items-center justify-center mx-auto mb-4`}>\n                      <IconComponent className=\"w-8 h-8 text-white\" />\n                    </div>\n                    <h3 className=\"text-2xl font-bold text-neutral mb-2\">{material.name}</h3>\n                    <p className=\"text-gray-600\">{material.description}</p>\n                  </div>\n                  \n                  <img \n                    src={material.image} \n                    alt={`${material.name} texture`}\n                    className=\"w-full h-48 object-cover rounded-xl mb-6 shadow-lg\"\n                    data-testid={`img-material-${material.id}`}\n                  />\n                  \n                  <div className=\"space-y-3\">\n                    {material.features.map((feature, index) => (\n                      <div key={index} className=\"flex items-center text-gray-700\">\n                        <svg className={`w-5 h-5 ${material.textColor} mr-3`} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                        </svg>\n                        <span>{feature}</span>\n                      </div>\n                    ))}\n                  </div>\n                  \n                  <div className={`mt-6 pt-6 border-t border-${material.id === 'wood' ? 'primary' : material.id === 'acrylic' ? 'secondary' : 'neutral'}/20`}>\n                    <div className=\"text-center\">\n                      <span className={`text-2xl font-bold ${material.textColor}`} data-testid={`text-material-price-${material.id}`}>\n                        {material.price}\n                      </span>\n                      <p className=\"text-sm text-gray-600\">\n                        {material.id === \"paper\" ? \"βασική τιμή\" : \"επιπλέον κόστος\"}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5468},"client/src/components/navbar.tsx":{"content":"import { Link } from \"wouter\";\nimport { ShoppingCart, Menu, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useCartStore } from \"@/lib/cart-store\";\nimport ShoppingCartComponent from \"./shopping-cart\";\nimport { useState } from \"react\";\n\nexport default function Navbar() {\n  const { cartCount } = useCartStore();\n  const [isCartOpen, setIsCartOpen] = useState(false);\n\n  return (\n    <header className=\"bg-white shadow-sm sticky top-0 z-50\" data-testid=\"navbar\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center\">\n            <Link href=\"/\" data-testid=\"link-home\">\n              <h1 className=\"text-2xl font-bold text-primary cursor-pointer\">PuzzleCraft</h1>\n            </Link>\n            <nav className=\"hidden md:ml-10 md:flex space-x-8\">\n              <Link href=\"/configurator\" data-testid=\"link-configurator\">\n                <span className=\"text-neutral hover:text-primary transition-colors cursor-pointer\">Δημιουργία</span>\n              </Link>\n              <a href=\"#templates\" className=\"text-neutral hover:text-primary transition-colors\" data-testid=\"link-templates\">Πρότυπα</a>\n              <a href=\"#materials\" className=\"text-neutral hover:text-primary transition-colors\" data-testid=\"link-materials\">Υλικά</a>\n              <a href=\"#about\" className=\"text-neutral hover:text-primary transition-colors\" data-testid=\"link-about\">Σχετικά</a>\n            </nav>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"relative\"\n              onClick={() => setIsCartOpen(true)}\n              data-testid=\"button-cart\"\n            >\n              <ShoppingCart className=\"h-5 w-5\" />\n              {cartCount > 0 && (\n                <Badge \n                  className=\"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 bg-accent\"\n                  data-testid=\"text-cart-count\"\n                >\n                  {cartCount}\n                </Badge>\n              )}\n            </Button>\n\n            {/* Mobile menu */}\n            <Sheet>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\" data-testid=\"button-mobile-menu\">\n                  <Menu className=\"h-5 w-5\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\">\n                <nav className=\"flex flex-col space-y-4 mt-6\">\n                  <Link href=\"/configurator\" data-testid=\"link-mobile-configurator\">\n                    <a className=\"text-neutral hover:text-primary transition-colors\">Δημιουργία</a>\n                  </Link>\n                  <a href=\"#templates\" className=\"text-neutral hover:text-primary transition-colors\">Πρότυπα</a>\n                  <a href=\"#materials\" className=\"text-neutral hover:text-primary transition-colors\">Υλικά</a>\n                  <a href=\"#about\" className=\"text-neutral hover:text-primary transition-colors\">Σχετικά</a>\n                </nav>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n\n      <ShoppingCartComponent \n        open={isCartOpen} \n        onOpenChange={setIsCartOpen} \n      />\n    </header>\n  );\n}\n","size_bytes":3579},"client/src/components/product-configurator.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useCartStore } from \"@/lib/cart-store\";\nimport { Upload, Network, Gem, FileText, ShoppingCart } from \"lucide-react\";\nimport { calculatePrice } from \"@/lib/puzzle-utils\";\n\ninterface ConfigurationState {\n  imageUrl: string | null;\n  templateId: string | null;\n  size: string;\n  material: string;\n  pieceCount: number;\n}\n\nexport default function ProductConfigurator() {\n  const { toast } = useToast();\n  const { addToCart } = useCartStore();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const [config, setConfig] = useState<ConfigurationState>({\n    imageUrl: null,\n    templateId: null,\n    size: \"30x40\",\n    material: \"wood\",\n    pieceCount: 500,\n  });\n\n  const [price, setPrice] = useState(\"40.00\");\n\n  // Calculate price whenever configuration changes\n  const calculatePriceMutation = useMutation({\n    mutationFn: async (configuration: Partial<ConfigurationState>) => {\n      const response = await fetch(\"/api/calculate-price\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(configuration),\n      });\n      if (!response.ok) throw new Error(\"Σφάλμα υπολογισμού τιμής\");\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setPrice(data.price);\n    },\n  });\n\n  // Upload image mutation\n  const uploadImageMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append(\"image\", file);\n      \n      const response = await fetch(\"/api/upload\", {\n        method: \"POST\",\n        body: formData,\n      });\n      \n      if (!response.ok) throw new Error(\"Σφάλμα κατά το ανέβασμα\");\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setConfig(prev => ({ ...prev, imageUrl: data.imageUrl, templateId: null }));\n      toast({ title: \"Η εικόνα ανέβηκε επιτυχώς!\" });\n    },\n    onError: () => {\n      toast({ \n        title: \"Σφάλμα\", \n        description: \"Δεν ήταν δυνατό το ανέβασμα της εικόνας\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  // Add to cart mutation\n  const addToCartMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/cart\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          imageUrl: config.imageUrl,\n          templateId: config.templateId,\n          size: config.size,\n          material: config.material,\n          pieceCount: config.pieceCount,\n          quantity: 1,\n          price: price,\n          sessionId: localStorage.getItem(\"sessionId\") || \"anonymous\",\n        }),\n      });\n      \n      if (!response.ok) throw new Error(\"Σφάλμα προσθήκης στο καλάθι\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      addToCart();\n      toast({ title: \"Το προϊόν προστέθηκε στο καλάθι!\" });\n    },\n    onError: () => {\n      toast({ \n        title: \"Σφάλμα\", \n        description: \"Δεν ήταν δυνατή η προσθήκη στο καλάθι\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  const updateConfig = (updates: Partial<ConfigurationState>) => {\n    const newConfig = { ...config, ...updates };\n    setConfig(newConfig);\n    calculatePriceMutation.mutate(newConfig);\n  };\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.size > 10 * 1024 * 1024) {\n        toast({ \n          title: \"Σφάλμα\", \n          description: \"Το αρχείο είναι πολύ μεγάλο. Μέγιστο μέγεθος: 10MB\",\n          variant: \"destructive\" \n        });\n        return;\n      }\n      uploadImageMutation.mutate(file);\n    }\n  };\n\n  const sizeOptions = [\n    { value: \"30x40\", label: \"30x40 cm\", subtitle: \"Μικρό\" },\n    { value: \"40x60\", label: \"40x60 cm\", subtitle: \"Μεσαίο\" },\n    { value: \"60x80\", label: \"60x80 cm\", subtitle: \"Μεγάλο\" },\n    { value: \"custom\", label: \"Προσαρμογή\", subtitle: \"Custom\" },\n  ];\n\n  const materialOptions = [\n    { \n      value: \"wood\", \n      label: \"Ξύλο Premium\", \n      subtitle: \"Υψηλή ποιότητα, διαρκές\",\n      icon: Network,\n      price: \"+€15\"\n    },\n    { \n      value: \"acrylic\", \n      label: \"Ακρυλικό\", \n      subtitle: \"Διαφανές, μοντέρνο\",\n      icon: Gem,\n      price: \"+€10\"\n    },\n    { \n      value: \"paper\", \n      label: \"Χαρτί Υψηλής Ποιότητας\", \n      subtitle: \"Κλασικό, οικονομικό\",\n      icon: FileText,\n      price: \"Βάση\"\n    },\n  ];\n\n  const pieceOptions = [100, 300, 500, 1000];\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n      {/* Configuration Panel */}\n      <div className=\"space-y-8\">\n        {/* Step 1: Image Upload */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-xl font-semibold text-neutral mb-4 flex items-center\">\n              <span className=\"bg-primary text-white rounded-full w-8 h-8 flex items-center justify-center text-sm mr-3\">1</span>\n              Επιλέξτε Εικόνα\n            </h3>\n            \n            <div className=\"space-y-4\">\n              <div \n                className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-primary transition-colors cursor-pointer\"\n                onClick={() => fileInputRef.current?.click()}\n                data-testid=\"upload-area\"\n              >\n                <Upload className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-600 mb-2\">Σύρετε την εικόνα εδώ ή κάντε κλικ για επιλογή</p>\n                <p className=\"text-sm text-gray-500\">PNG, JPG μέχρι 10MB</p>\n                \n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={handleFileSelect}\n                  className=\"hidden\"\n                  data-testid=\"input-file-upload\"\n                />\n              </div>\n              \n              {uploadImageMutation.isPending && (\n                <div className=\"text-center\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n                  <p className=\"text-sm text-gray-600 mt-2\">Ανέβασμα εικόνας...</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Step 2: Size Selection */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-xl font-semibold text-neutral mb-4 flex items-center\">\n              <span className=\"bg-primary text-white rounded-full w-8 h-8 flex items-center justify-center text-sm mr-3\">2</span>\n              Μέγεθος\n            </h3>\n            \n            <div className=\"grid grid-cols-2 gap-3\">\n              {sizeOptions.map((option) => (\n                <Button\n                  key={option.value}\n                  variant={config.size === option.value ? \"default\" : \"outline\"}\n                  className={`p-3 h-auto flex flex-col ${\n                    config.size === option.value\n                      ? \"bg-primary text-white\"\n                      : \"hover:border-primary hover:text-primary\"\n                  }`}\n                  onClick={() => updateConfig({ size: option.value })}\n                  data-testid={`button-size-${option.value}`}\n                >\n                  <div className=\"text-lg font-semibold\">{option.label}</div>\n                  <div className=\"text-sm opacity-80\">{option.subtitle}</div>\n                </Button>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Step 3: Material Selection */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-xl font-semibold text-neutral mb-4 flex items-center\">\n              <span className=\"bg-primary text-white rounded-full w-8 h-8 flex items-center justify-center text-sm mr-3\">3</span>\n              Υλικό\n            </h3>\n            \n            <div className=\"space-y-3\">\n              {materialOptions.map((option) => {\n                const IconComponent = option.icon;\n                return (\n                  <div\n                    key={option.value}\n                    className={`border-2 rounded-lg p-4 cursor-pointer transition-colors ${\n                      config.material === option.value\n                        ? \"border-primary bg-primary/10\"\n                        : \"border-gray-300 hover:border-primary\"\n                    }`}\n                    onClick={() => updateConfig({ material: option.value })}\n                    data-testid={`button-material-${option.value}`}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center\">\n                        <IconComponent \n                          className={`text-xl mr-3 ${\n                            config.material === option.value ? \"text-primary\" : \"text-gray-600\"\n                          }`} \n                        />\n                        <div>\n                          <div className={`font-semibold ${\n                            config.material === option.value ? \"text-primary\" : \"text-gray-700\"\n                          }`}>\n                            {option.label}\n                          </div>\n                          <div className=\"text-sm text-gray-600\">{option.subtitle}</div>\n                        </div>\n                      </div>\n                      <div className={`font-semibold ${\n                        config.material === option.value ? \"text-primary\" : \"text-gray-600\"\n                      }`}>\n                        {option.price}\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Step 4: Piece Count */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-xl font-semibold text-neutral mb-4 flex items-center\">\n              <span className=\"bg-primary text-white rounded-full w-8 h-8 flex items-center justify-center text-sm mr-3\">4</span>\n              Αριθμός Κομματιών\n            </h3>\n            \n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 mb-4\">\n              {pieceOptions.map((pieces) => (\n                <Button\n                  key={pieces}\n                  variant={config.pieceCount === pieces ? \"default\" : \"outline\"}\n                  className={config.pieceCount === pieces ? \"bg-primary text-white\" : \"\"}\n                  onClick={() => updateConfig({ pieceCount: pieces })}\n                  data-testid={`button-pieces-${pieces}`}\n                >\n                  {pieces}\n                </Button>\n              ))}\n            </div>\n            \n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">Προσαρμογή:</label>\n              <Slider\n                value={[config.pieceCount]}\n                onValueChange={(value) => updateConfig({ pieceCount: value[0] })}\n                max={2000}\n                min={100}\n                step={50}\n                className=\"w-full\"\n                data-testid=\"slider-piece-count\"\n              />\n              <div className=\"flex justify-between text-sm text-gray-500 mt-1\">\n                <span>100</span>\n                <span className=\"font-semibold text-primary\">{config.pieceCount}</span>\n                <span>2000</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Preview Panel */}\n      <div className=\"lg:sticky lg:top-24\">\n        <Card className=\"shadow-lg\">\n          <CardContent className=\"p-6\">\n            <h3 className=\"text-xl font-semibold text-neutral mb-6\">Προεπισκόπηση Παζλ</h3>\n            \n            <div className=\"aspect-square bg-gray-100 rounded-lg mb-6 flex items-center justify-center overflow-hidden\">\n              <img \n                src={config.imageUrl || \"https://images.unsplash.com/photo-1606092195730-5d7b9af1efc5?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=600\"} \n                alt=\"Puzzle preview\" \n                className=\"w-full h-full object-cover rounded-lg\"\n                data-testid=\"img-preview\"\n              />\n            </div>\n\n            {/* Price Summary */}\n            <Card className=\"bg-gray-50 mb-6\">\n              <CardContent className=\"p-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Βασική τιμή ({config.size}, {config.pieceCount} κομμάτια):</span>\n                    <span className=\"font-semibold\">€25.00</span>\n                  </div>\n                  {config.material === \"wood\" && (\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Ξύλο Premium:</span>\n                      <span className=\"font-semibold\">€15.00</span>\n                    </div>\n                  )}\n                  {config.material === \"acrylic\" && (\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Ακρυλικό:</span>\n                      <span className=\"font-semibold\">€10.00</span>\n                    </div>\n                  )}\n                  <div className=\"border-t pt-2 flex justify-between text-lg font-bold\">\n                    <span>Σύνολο:</span>\n                    <span className=\"text-primary\" data-testid=\"text-total-price\">€{price}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Add to Cart */}\n            <Button \n              className=\"w-full bg-accent text-white hover:bg-accent/90 mb-4\"\n              size=\"lg\"\n              onClick={() => addToCartMutation.mutate()}\n              disabled={addToCartMutation.isPending || (!config.imageUrl && !config.templateId)}\n              data-testid=\"button-add-to-cart\"\n            >\n              <ShoppingCart className=\"w-5 h-5 mr-2\" />\n              Προσθήκη στο Καλάθι\n            </Button>\n            \n            <div className=\"text-center text-sm text-gray-500\">\n              <svg className=\"w-4 h-4 inline mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 7V3a4 4 0 118 0v4m-4 8.5h.01M10 17h4\" />\n              </svg>\n              Δωρεάν μεταφορικά για παραγγελίες άνω των €50\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15593},"client/src/components/shopping-cart.tsx":{"content":"import { useCartStore } from \"@/lib/cart-store\";\nimport { Button } from \"@/components/ui/button\";\nimport { X, Minus, Plus, ShoppingCart as ShoppingCartIcon } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\n\nexport default function ShoppingCart() {\n  const { toast } = useToast();\n  const { \n    isCartOpen, \n    toggleCart, \n    items: cartItems, \n    removeItem: removeCartItem,\n    updateQuantity: updateCartQuantity,\n    getTotalItems,\n    getTotalPrice \n  } = useCartStore();\n\n  const updateQuantity = (id: string, newQuantity: number) => {\n    if (newQuantity < 1) return;\n    updateCartQuantity(id, newQuantity);\n  };\n\n  const removeItem = (id: string) => {\n    removeCartItem(id);\n    toast({ title: \"Το προϊόν αφαιρέθηκε από το καλάθι\" });\n  };\n\n  const subtotal = getTotalPrice();\n\n  const shippingFree = subtotal >= 50;\n\n  if (!isCartOpen) return null;\n\n  return (\n    <>\n      {/* Overlay */}\n      <div \n        className=\"fixed inset-0 bg-black bg-opacity-50 z-40\"\n        onClick={toggleCart}\n        data-testid=\"cart-overlay\"\n      />\n\n      {/* Cart Sidebar */}\n      <div className=\"fixed inset-y-0 right-0 w-96 bg-white shadow-2xl z-50 flex flex-col max-w-full\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b\">\n          <h2 className=\"text-xl font-semibold text-neutral\">Καλάθι Αγορών</h2>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={toggleCart}\n            data-testid=\"button-close-cart\"\n          >\n            <X className=\"h-5 w-5\" />\n          </Button>\n        </div>\n\n        {/* Cart Items */}\n        <div className=\"flex-1 overflow-y-auto p-6\">\n          {cartItems.length === 0 ? (\n            <div className=\"text-center py-16\">\n              <ShoppingCartIcon className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-neutral mb-2\">Το καλάθι σας είναι άδειο</h3>\n              <p className=\"text-gray-600 mb-6\">Προσθέστε μερικά όμορφα παζλ για να ξεκινήσετε!</p>\n              <Link href=\"/fractal-generator\">\n                <Button onClick={toggleCart} data-testid=\"button-start-shopping\">\n                  Ξεκινήστε Αγορές\n                </Button>\n              </Link>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {cartItems.map((item) => (\n                <div \n                  key={item.id} \n                  className=\"flex items-center space-x-4 pb-4 border-b\"\n                  data-testid={`cart-item-${item.id}`}\n                >\n                  <img \n                    src={item.image || \"https://images.unsplash.com/photo-1606092195730-5d7b9af1efc5?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\"} \n                    alt=\"Puzzle preview\" \n                    className=\"w-16 h-16 object-cover rounded-lg\"\n                    data-testid={`img-cart-item-${item.id}`}\n                  />\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-neutral text-sm\">\n                      {item.name}\n                    </h4>\n                    <p className=\"text-xs text-gray-600\">\n                      {item.description}\n                    </p>\n                    <div className=\"flex items-center justify-between mt-2\">\n                      <div className=\"flex items-center space-x-1\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"h-6 w-6 p-0\"\n                          onClick={() => updateQuantity(item.id, item.quantity - 1)}\n                          data-testid={`button-decrease-${item.id}`}\n                        >\n                          <Minus className=\"h-3 w-3\" />\n                        </Button>\n                        <span className=\"font-semibold text-sm px-2\" data-testid={`quantity-${item.id}`}>\n                          {item.quantity}\n                        </span>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"h-6 w-6 p-0\"\n                          onClick={() => updateQuantity(item.id, item.quantity + 1)}\n                          data-testid={`button-increase-${item.id}`}\n                        >\n                          <Plus className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"font-semibold text-primary text-sm\" data-testid={`price-${item.id}`}>\n                          €{(item.price * item.quantity).toFixed(2)}\n                        </span>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"h-6 w-6 p-0 text-gray-400 hover:text-red-500\"\n                          onClick={() => removeItem(item.id)}\n                          data-testid={`button-remove-${item.id}`}\n                        >\n                          <X className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Footer */}\n        {cartItems.length > 0 && (\n          <div className=\"border-t p-6\">\n            <div className=\"space-y-3 mb-6\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-gray-600\">Υποσύνολο:</span>\n                <span className=\"font-semibold\" data-testid=\"cart-subtotal\">\n                  €{subtotal.toFixed(2)}\n                </span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-gray-600\">Μεταφορικά:</span>\n                <span className={`font-semibold ${shippingFree ? 'text-secondary' : ''}`} data-testid=\"cart-shipping\">\n                  {shippingFree ? \"Δωρεάν\" : \"€5.00\"}\n                </span>\n              </div>\n              <div className=\"flex justify-between text-lg font-bold border-t pt-3\">\n                <span>Σύνολο:</span>\n                <span className=\"text-primary\" data-testid=\"cart-total\">\n                  €{(subtotal + (shippingFree ? 0 : 5)).toFixed(2)}\n                </span>\n              </div>\n            </div>\n            \n            <Link href=\"/cart\">\n              <Button \n                className=\"w-full bg-accent text-white hover:bg-accent/90 mb-3\"\n                onClick={toggleCart}\n                data-testid=\"button-checkout\"\n              >\n                Ολοκλήρωση Παραγγελίας\n              </Button>\n            </Link>\n            \n            <Button \n              variant=\"outline\"\n              className=\"w-full\"\n              onClick={toggleCart}\n              data-testid=\"button-continue-shopping\"\n            >\n              Συνέχεια Αγορών\n            </Button>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n","size_bytes":7321},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  profileImage?: string;\n  createdAt: string;\n}\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery<User>({\n    queryKey: ['/api/auth/user'],\n    retry: false,\n  });\n\n  const queryClient = useQueryClient();\n\n  const logout = async () => {\n    try {\n      await apiRequest('POST', '/api/auth/logout', {});\n      queryClient.setQueryData(['/api/auth/user'], null);\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n    } catch (error) {\n      console.error('Logout error:', error);\n    }\n  };\n\n  return {\n    user,\n    isAuthenticated: !!user && !error,\n    isLoading,\n    logout,\n  };\n}","size_bytes":839},"client/src/lib/cart-store.ts":{"content":"import { create } from 'zustand';\n\ninterface CartItem {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  quantity: number;\n  image: string;\n  type?: string;\n  customization?: any;\n}\n\ninterface CartStore {\n  isCartOpen: boolean;\n  items: CartItem[];\n  toggleCart: () => void;\n  addItem: (item: CartItem) => void;\n  removeItem: (id: string) => void;\n  updateQuantity: (id: string, quantity: number) => void;\n  clearCart: () => void;\n  getTotalItems: () => number;\n  getTotalPrice: () => number;\n}\n\nexport const useCartStore = create<CartStore>((set, get) => ({\n  isCartOpen: false,\n  items: [],\n  toggleCart: () => set((state) => ({ isCartOpen: !state.isCartOpen })),\n  addItem: (item: CartItem) => set((state) => {\n    const existingItem = state.items.find(i => i.id === item.id);\n    if (existingItem) {\n      return {\n        items: state.items.map(i => \n          i.id === item.id ? { ...i, quantity: i.quantity + 1 } : i\n        )\n      };\n    }\n    return { items: [...state.items, item] };\n  }),\n  removeItem: (id: string) => set((state) => ({\n    items: state.items.filter(item => item.id !== id)\n  })),\n  updateQuantity: (id: string, quantity: number) => set((state) => ({\n    items: state.items.map(item => \n      item.id === id ? { ...item, quantity } : item\n    )\n  })),\n  clearCart: () => set({ items: [] }),\n  getTotalItems: () => get().items.reduce((total, item) => total + item.quantity, 0),\n  getTotalPrice: () => get().items.reduce((total, item) => total + (item.price * item.quantity), 0),\n}));\n","size_bytes":1535},"client/src/lib/fractal-generator.ts":{"content":"// Exact port of the fractal puzzle generator from the HTML file\n\ninterface Tile {\n  x: number;\n  y: number;\n  hasconnections?: boolean;\n}\n\ninterface Cell {\n  x: number;\n  y: number;\n}\n\nclass DiagonalConnection {\n  p1: Tile;\n  p2: Tile;\n  p2_taken: boolean;\n  slope: number;\n  quad: number;\n  cell: Cell;\n\n  constructor(p1: Tile, p2: Tile, p2_taken: boolean) {\n    this.p1 = p1;\n    this.p2 = p2;\n    this.p2_taken = p2_taken;\n    this.slope = (p2.y - p1.y) / (p2.x - p1.x);\n    \n    const ccx = Math.min(p2.x, p1.x);\n    const ccy = Math.min(p2.y, p1.y);\n    this.cell = { x: ccx, y: ccy };\n    \n    if (this.slope > 0) {\n      if (p2.y > p1.y) {\n        this.quad = 3;\n      } else {\n        this.quad = 1;\n      }\n    } else {\n      if (p2.y > p1.y) {\n        this.quad = 2;\n      } else {\n        this.quad = 0;\n      }\n    }\n  }\n\n  eq(other: DiagonalConnection): boolean {\n    return this.cell.x === other.cell.x && \n           this.cell.y === other.cell.y && \n           this.slope === other.slope && \n           this.p2_taken === other.p2_taken;\n  }\n\n  static FromPointAndQuad(p1: Tile, quadrant: number, p2_taken: boolean): DiagonalConnection {\n    let p2: Tile;\n    switch (quadrant) {\n      case 0: p2 = { x: p1.x + 1, y: p1.y - 1 }; break;\n      case 1: p2 = { x: p1.x - 1, y: p1.y - 1 }; break;\n      case 2: p2 = { x: p1.x - 1, y: p1.y + 1 }; break;\n      case 3: p2 = { x: p1.x + 1, y: p1.y + 1 }; break;\n      default: p2 = { x: p1.x, y: p1.y }; break;\n    }\n    return new DiagonalConnection(p1, p2, p2_taken);\n  }\n}\n\nclass CellGrid {\n  nrow: number;\n  ncol: number;\n  visited: boolean[];\n  cellmap: boolean[];\n  private _nunvisited: number;\n\n  constructor(nrow: number, ncol: number) {\n    this.nrow = nrow;\n    this.ncol = ncol;\n    this.visited = new Array(this.ncol * this.nrow).fill(false);\n    this.cellmap = new Array((this.ncol - 1) * (this.nrow - 1)).fill(false);\n    this._nunvisited = this.ncol * this.nrow;\n  }\n\n  randomemptytile(randomFunc: () => number): Tile {\n    const emptytiles = this.visited.reduce((acc: number[], curr: boolean, index: number) => {\n      if (!curr) {\n        acc.push(index);\n      }\n      return acc;\n    }, []);\n\n    const index = emptytiles[Math.floor(randomFunc() * emptytiles.length)];\n    const y = Math.floor(index / this.nrow);\n    const x = index % this.nrow;\n    return { x, y };\n  }\n\n  reset(): void {\n    this.visited.fill(false);\n    this.cellmap.fill(false);\n    this._nunvisited = this.ncol * this.nrow;\n  }\n\n  istilevalid(v: Tile): boolean {\n    return v.x >= 0 && v.x < this.nrow && v.y >= 0 && v.y < this.ncol;\n  }\n\n  istilevisited(v: Tile): boolean {\n    return this.visited[v.y * this.nrow + v.x];\n  }\n\n  iscellempty(c: Cell): boolean {\n    return !this.cellmap[c.y * this.nrow + c.x];\n  }\n\n  visittile(v: Tile): void {\n    if (!this.visited[v.y * this.nrow + v.x]) {\n      this.visited[v.y * this.nrow + v.x] = true;\n      this._nunvisited--;\n    }\n  }\n\n  occupycell(c: Cell): void {\n    if (!this.cellmap[c.y * this.nrow + c.x]) {\n      this.cellmap[c.y * this.nrow + c.x] = true;\n    }\n  }\n\n  liberatecell(c: Cell): void {\n    this.cellmap[c.y * this.nrow + c.x] = false;\n  }\n\n  get nunvisited(): number {\n    return this._nunvisited;\n  }\n}\n\nclass Arc {\n  private _cp: Tile;\n  private _quad: number;\n  private _rad: number;\n  private _sign: number;\n  private _sp: Tile;\n  private _ep: Tile;\n\n  constructor(gcp: Tile, rad: number, offs: number, quad: number, sign: number) {\n    this._cp = { x: gcp.x * 2 * rad + rad + offs, y: gcp.y * 2 * rad + rad + offs };\n    this._quad = quad;\n    this._rad = rad;\n    this._sign = sign;\n    \n    let pa: Tile, pb: Tile;\n    switch (quad) {\n      case 0:\n        pa = { x: this._cp.x + rad, y: this._cp.y };\n        pb = { x: this._cp.x, y: this._cp.y - rad };\n        break;\n      case 1:\n        pa = { x: this._cp.x, y: this._cp.y - rad };\n        pb = { x: this._cp.x - rad, y: this._cp.y };\n        break;\n      case 2:\n        pa = { x: this._cp.x - rad, y: this._cp.y };\n        pb = { x: this._cp.x, y: this._cp.y + rad };\n        break;\n      case 3:\n        pa = { x: this._cp.x, y: this._cp.y + rad };\n        pb = { x: this._cp.x + rad, y: this._cp.y };\n        break;\n      default:\n        pa = { x: 0, y: 0 };\n        pb = { x: 0, y: 0 };\n    }\n    \n    if (this.sign === 0) {\n      this._sp = pa;\n      this._ep = pb;\n    } else {\n      this._sp = pb;\n      this._ep = pa;\n    }\n  }\n\n  svg(arcshape: number): string {\n    const tan225 = 0.4142135623730950488016887242097;\n    const hlen = this._rad * tan225;\n    \n    switch (arcshape) {\n      case 0:\n        return `A ${this._rad} ${this._rad} 0 0,${this.sign} ${this.ep.x} ${this.ep.y} `;\n      case 1:\n        return `L ${this.ep.x} ${this.ep.y} `;\n      case 2:\n        let quad = this._quad;\n        let sp = this.sp;\n        let ep = this.ep;\n        if (this._sign === 1) {\n          sp = this.ep;\n          ep = this.sp;\n        }\n        let mp1: number[], mp2: number[];\n        switch (quad) {\n          case 0:\n            mp1 = [sp.x, sp.y - hlen];\n            mp2 = [ep.x + hlen, ep.y];\n            break;\n          case 1:\n            mp1 = [sp.x - hlen, sp.y];\n            mp2 = [ep.x, ep.y - hlen];\n            break;\n          case 2:\n            mp1 = [sp.x, sp.y + hlen];\n            mp2 = [ep.x - hlen, ep.y];\n            break;\n          case 3:\n            mp1 = [sp.x + hlen, sp.y];\n            mp2 = [ep.x, ep.y + hlen];\n            break;\n          default:\n            mp1 = [0, 0];\n            mp2 = [0, 0];\n        }\n        if (this._sign === 1) {\n          return `L ${mp2[0]} ${mp2[1]} L ${mp1[0]} ${mp1[1]} L ${this.ep.x} ${this.ep.y} `;\n        } else {\n          return `L ${mp1[0]} ${mp1[1]} L ${mp2[0]} ${mp2[1]} L ${this.ep.x} ${this.ep.y} `;\n        }\n      default:\n        return \"\";\n    }\n  }\n\n  eq(a: Arc): boolean {\n    return this.quad === a.quad && this.cp.x === a.cp.x && this.cp.y === a.cp.y;\n  }\n\n  get cp(): Tile { return this._cp; }\n  get sign(): number { return this._sign; }\n  get sp(): Tile { return this._sp; }\n  get ep(): Tile { return this._ep; }\n  get quad(): number { return this._quad; }\n}\n\nclass CircleFractalJigsaw {\n  ncols: number;\n  nrows: number;\n  grid: CellGrid;\n  pieces: DiagonalConnection[][];\n  maxpiecelen: number;\n  minpiecelen: number;\n  maskgrid: number[][];\n  seed: number;\n\n  constructor(ncols: number, nrows: number, minpiecelen: number, maxpiecelen: number) {\n    this.ncols = ncols;\n    this.nrows = nrows;\n    this.grid = new CellGrid(ncols, nrows);\n    this.pieces = [];\n    this.maxpiecelen = maxpiecelen;\n    this.minpiecelen = minpiecelen;\n    this.maskgrid = Array(nrows).fill(null).map(() => Array(ncols).fill(0));\n    this.seed = 0;\n  }\n\n  setSeed(seed: number): void {\n    this.seed = seed;\n  }\n\n  // Seeded random number generator (same as in your HTML)\n  private random(): number {\n    this.seed = (this.seed * 9301 + 49297) % 233280;\n    return this.seed / 233280;\n  }\n\n  private uniform(min: number, max: number): number {\n    return min + this.random() * (max - min);\n  }\n\n  possibleconnections(mytiles: Tile[], allowpartials: boolean): DiagonalConnection[] {\n    const pcs: DiagonalConnection[] = [];\n    const neighbors = [[-1, -1], [-1, 1], [1, -1], [1, 1]];\n    \n    mytiles.forEach((v) => {\n      if (v.hasconnections || allowpartials) {\n        v.hasconnections = false;\n        neighbors.forEach((n) => {\n          const cpt: Tile = { x: v.x + n[0], y: v.y + n[1] };\n          if (this.grid.istilevalid(cpt) && \n              !this.maskgrid[cpt.y][cpt.x] && \n              !mytiles.find(nv => nv.x === cpt.x && nv.y === cpt.y)) {\n            \n            const dc = new DiagonalConnection(v, cpt, !this.grid.istilevisited(cpt));\n            if (this.grid.iscellempty(dc.cell)) {\n              if (allowpartials || !this.grid.istilevisited(cpt)) {\n                pcs.push(dc);\n                v.hasconnections = true;\n              }\n            }\n          }\n        });\n      }\n    });\n    return pcs;\n  }\n\n  createpiece(): void {\n    const mytiles: Tile[] = [];\n    const myconnections: DiagonalConnection[] = [];\n    const targetPieceLen = Math.round(this.uniform(this.minpiecelen, this.maxpiecelen));\n    \n    const vi = this.grid.randomemptytile(() => this.random());\n    vi.hasconnections = true;\n    mytiles.push(vi);\n    this.grid.visittile(vi);\n\n    while (this.grid.nunvisited > 0 && mytiles.length < targetPieceLen) {\n      const pcs = this.possibleconnections(mytiles, false);\n      \n      if (pcs.length === 0) {\n        break;\n      }\n\n      const chosenConnection = pcs[Math.floor(this.uniform(0, pcs.length))];\n      myconnections.push(chosenConnection);\n      chosenConnection.p2.hasconnections = true;\n      mytiles.push(chosenConnection.p2);\n      this.grid.occupycell(chosenConnection.cell);\n      this.grid.visittile(chosenConnection.p2);\n    }\n\n    if (mytiles.length >= this.minpiecelen) {\n      this.pieces.push(myconnections);\n    } else {\n      myconnections.forEach((c) => {\n        this.grid.liberatecell(c.cell);\n      });\n    }\n  }\n\n  fillholes(allowpartials: boolean): boolean {\n    let growth = false;\n    \n    this.pieces.forEach((piece) => {\n      const mytiles: Tile[] = [];\n      \n      // Rebuild tiles from connections\n      piece.forEach((dc) => {\n        if (!mytiles.find(t => t.x === dc.p1.x && t.y === dc.p1.y)) {\n          mytiles.push({ ...dc.p1, hasconnections: true });\n        }\n        if (!mytiles.find(t => t.x === dc.p2.x && t.y === dc.p2.y)) {\n          mytiles.push({ ...dc.p2, hasconnections: true });\n        }\n      });\n\n      const pcs = this.possibleconnections(mytiles, allowpartials);\n      \n      if (pcs.length > 0) {\n        const chosenConnection = pcs[Math.floor(this.uniform(0, pcs.length))];\n        piece.push(chosenConnection);\n        this.grid.occupycell(chosenConnection.cell);\n        this.grid.visittile(chosenConnection.p2);\n        growth = true;\n      }\n    });\n\n    return growth;\n  }\n\n  static addarcs(con: DiagonalConnection, connections: DiagonalConnection[], arcs: Arc[], rad: number, frame: number, first: boolean): void {\n    let newarc: Arc;\n    \n    switch (con.quad) {\n      case 0:\n        newarc = new Arc({ x: con.p1.x + 1, y: con.p1.y }, rad, frame, 1, 1);\n        break;\n      case 1:\n        newarc = new Arc({ x: con.p1.x, y: con.p1.y - 1 }, rad, frame, 2, 1);\n        break;\n      case 2:\n        newarc = new Arc({ x: con.p1.x - 1, y: con.p1.y }, rad, frame, 3, 1);\n        break;\n      case 3:\n        newarc = new Arc({ x: con.p1.x, y: con.p1.y + 1 }, rad, frame, 0, 1);\n        break;\n      default:\n        newarc = new Arc(con.p1, rad, frame, 0, 1);\n    }\n    arcs.push(newarc);\n    \n    if (con.p2_taken) {\n      const p2quads = [(con.quad + 3) % 4, (con.quad + 4) % 4, (con.quad + 5) % 4];\n      p2quads.forEach((q) => {\n        const pct = DiagonalConnection.FromPointAndQuad(con.p2, q, true);\n        const pcnt = DiagonalConnection.FromPointAndQuad(con.p2, q, false);\n        if (connections.find(c => c.eq(pct))) {\n          CircleFractalJigsaw.addarcs(pct, connections, arcs, rad, frame, false);\n        } else if (connections.find(c => c.eq(pcnt))) {\n          CircleFractalJigsaw.addarcs(pcnt, connections, arcs, rad, frame, false);\n        } else {\n          arcs.push(new Arc(con.p2, rad, frame, q, 0));\n        }\n      });\n    } else {\n      arcs.push(new Arc(con.p2, rad, frame, (con.quad + 2) % 4, 1));\n    }\n\n    switch (con.quad) {\n      case 0:\n        newarc = new Arc({ x: con.p1.x, y: con.p1.y - 1 }, rad, frame, 3, 1);\n        break;\n      case 1:\n        newarc = new Arc({ x: con.p1.x - 1, y: con.p1.y }, rad, frame, 0, 1);\n        break;\n      case 2:\n        newarc = new Arc({ x: con.p1.x, y: con.p1.y + 1 }, rad, frame, 1, 1);\n        break;\n      case 3:\n        newarc = new Arc({ x: con.p1.x + 1, y: con.p1.y }, rad, frame, 2, 1);\n        break;\n      default:\n        newarc = new Arc(con.p1, rad, frame, 0, 1);\n    }\n    arcs.push(newarc);\n\n    if (first) {\n      const p1quads = [(con.quad + 1) % 4, (con.quad + 2) % 4, (con.quad + 3) % 4];\n      p1quads.forEach((q) => {\n        const pct = DiagonalConnection.FromPointAndQuad(con.p1, q, true);\n        const pcnt = DiagonalConnection.FromPointAndQuad(con.p1, q, false);\n        if (connections.find(c => c.eq(pct))) {\n          CircleFractalJigsaw.addarcs(pct, connections, arcs, rad, frame, false);\n        } else if (connections.find(c => c.eq(pcnt))) {\n          CircleFractalJigsaw.addarcs(pcnt, connections, arcs, rad, frame, false);\n        } else {\n          arcs.push(new Arc(con.p1, rad, frame, q, 0));\n        }\n      });\n    }\n  }\n\n  multipaths(frame: number, crad: number, arcshape: number): string[] {\n    const paths: string[] = [];\n    this.pieces.forEach((p) => {\n      const data: string[] = [];\n      const arcs: Arc[] = [];\n      if (p.length > 0) {\n        CircleFractalJigsaw.addarcs(p[0], p, arcs, crad, frame, true);\n        if (arcs.length > 0) {\n          data.push(`M${arcs[0].sp.x},${arcs[0].sp.y} `);\n          arcs.forEach((a) => {\n            data.push(a.svg(arcshape));\n          });\n          data.push('Z');\n          paths.push(data.join(''));\n        }\n      }\n    });\n    return paths;\n  }\n\n  exportSVG(frame: number, crad: number, arcshape: number): string {\n    const width = this.ncols * 2 * crad + 2 * frame;\n    const height = this.nrows * 2 * crad + 2 * frame;\n    let data = `<svg width=\"${width}\" height=\"${height}\" viewBox=\"0 0 ${width} ${height}\" xmlns=\"http://www.w3.org/2000/svg\">`;\n\n    this.pieces.forEach((p) => {\n      const arcs: Arc[] = [];\n      if (p.length > 0) {\n        CircleFractalJigsaw.addarcs(p[0], p, arcs, crad, frame, true);\n        if (arcs.length > 0) {\n          data += `<path fill=\"none\" stroke=\"black\" stroke-width=\"0.5\" d=\"M${arcs[0].sp.x},${arcs[0].sp.y} `;\n          arcs.forEach((a) => {\n            data += a.svg(arcshape);\n          });\n          data += 'Z\"></path>';\n        }\n      }\n    });\n    \n    data += \"</svg>\";\n    return data;\n  }\n\n  generate(): void {\n    while (this.grid.nunvisited) {\n      this.createpiece();\n    }\n    this.regenerategrid();\n  }\n\n  npieces(): number {\n    return this.pieces.length;\n  }\n\n  regenerategrid(): void {\n    this.grid.reset();\n\n    for (let i = 0; i < this.nrows; i++) {\n      for (let j = 0; j < this.ncols; j++) {\n        if (this.maskgrid[i][j]) {\n          this.grid.occupycell({ x: j, y: i });\n        }\n      }\n    }\n    \n    this.pieces.forEach((p) => {\n      p.forEach((c) => {\n        if (!this.grid.istilevisited(c.p1)) {\n          this.grid.visittile(c.p1);\n        }\n        if (c.p2_taken) {\n          if (!this.grid.istilevisited(c.p2)) {\n            this.grid.visittile(c.p2);\n          }\n        }\n        this.grid.occupycell(c.cell);\n      });\n    });\n  }\n\n  getPieceCount(): number {\n    return this.pieces.length;\n  }\n\n  getDimensions(): { width: number; height: number } {\n    return { width: this.ncols, height: this.nrows };\n  }\n}\n\nexport { CircleFractalJigsaw };\nexport type { Tile, Cell, DiagonalConnection, Arc };","size_bytes":15035},"client/src/lib/image-editor.ts":{"content":"// Advanced image editing utilities for FractalCraft\nexport interface ImageFilter {\n  name: string;\n  displayName: string;\n  apply: (canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D, intensity?: number) => void;\n}\n\nexport interface ImageTransform {\n  x: number;\n  y: number;\n  scale: number;\n  rotation: number;\n  flipX: boolean;\n  flipY: boolean;\n}\n\nexport interface CropArea {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\nexport interface ColorAdjustments {\n  brightness: number; // -100 to 100\n  contrast: number;   // -100 to 100\n  saturation: number; // -100 to 100\n  hue: number;        // -180 to 180\n  gamma: number;      // 0.1 to 3.0\n}\n\nexport class ImageEditor {\n  private canvas: HTMLCanvasElement;\n  private ctx: CanvasRenderingContext2D;\n  private originalImageData: ImageData | null = null;\n  private currentImageData: ImageData | null = null;\n\n  constructor(canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      throw new Error('Canvas context not available');\n    }\n    this.ctx = ctx;\n  }\n\n  // Load image from file or URL\n  async loadImage(source: File | string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const img = new Image();\n      \n      img.onload = () => {\n        try {\n          // Set canvas dimensions to match image\n          this.canvas.width = img.width;\n          this.canvas.height = img.height;\n          \n          // Clear canvas and draw image\n          this.ctx.clearRect(0, 0, img.width, img.height);\n          this.ctx.drawImage(img, 0, 0);\n          \n          // Store original and current image data\n          this.originalImageData = this.ctx.getImageData(0, 0, img.width, img.height);\n          this.currentImageData = this.ctx.getImageData(0, 0, img.width, img.height);\n          \n          console.log('Image loaded successfully:', { width: img.width, height: img.height });\n          resolve();\n        } catch (error) {\n          console.error('Error processing loaded image:', error);\n          reject(error);\n        }\n      };\n      \n      img.onerror = (error) => {\n        console.error('Error loading image:', error);\n        reject(new Error('Failed to load image'));\n      };\n      \n      if (source instanceof File) {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          const result = e.target?.result;\n          if (result) {\n            img.src = result as string;\n          } else {\n            reject(new Error('Failed to read file'));\n          }\n        };\n        reader.onerror = () => reject(new Error('Failed to read file'));\n        reader.readAsDataURL(source);\n      } else {\n        // For URL sources, set crossOrigin if needed\n        if (source.startsWith('http') && !source.startsWith(window.location.origin)) {\n          img.crossOrigin = 'anonymous';\n        }\n        img.src = source;\n      }\n    });\n  }\n\n  // Reset to original image\n  resetToOriginal(): void {\n    if (this.originalImageData) {\n      this.ctx.putImageData(this.originalImageData, 0, 0);\n      this.currentImageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);\n    }\n  }\n\n  // Apply color adjustments\n  applyColorAdjustments(adjustments: Partial<ColorAdjustments>): void {\n    if (!this.currentImageData) return;\n\n    const data = this.currentImageData.data;\n    const {\n      brightness = 0,\n      contrast = 0,\n      saturation = 0,\n      hue = 0,\n      gamma = 1\n    } = adjustments;\n\n    // Convert adjustments to working values\n    const brightnessValue = brightness * 2.55; // Convert to 0-255 range\n    const contrastValue = (contrast + 100) / 100; // Convert to multiplier\n    const saturationValue = (saturation + 100) / 100;\n    const hueValue = hue * Math.PI / 180; // Convert to radians\n\n    for (let i = 0; i < data.length; i += 4) {\n      let r = data[i];\n      let g = data[i + 1];\n      let b = data[i + 2];\n\n      // Apply gamma correction\n      r = Math.pow(r / 255, 1 / gamma) * 255;\n      g = Math.pow(g / 255, 1 / gamma) * 255;\n      b = Math.pow(b / 255, 1 / gamma) * 255;\n\n      // Apply brightness\n      r += brightnessValue;\n      g += brightnessValue;\n      b += brightnessValue;\n\n      // Apply contrast\n      r = (r - 128) * contrastValue + 128;\n      g = (g - 128) * contrastValue + 128;\n      b = (b - 128) * contrastValue + 128;\n\n      // Convert RGB to HSV for saturation and hue adjustments\n      const hsv = this.rgbToHsv(r, g, b);\n      \n      // Apply saturation\n      hsv.s *= saturationValue;\n      \n      // Apply hue shift\n      hsv.h += hueValue;\n      if (hsv.h < 0) hsv.h += 2 * Math.PI;\n      if (hsv.h > 2 * Math.PI) hsv.h -= 2 * Math.PI;\n\n      // Convert back to RGB\n      const rgb = this.hsvToRgb(hsv.h, hsv.s, hsv.v);\n\n      // Clamp values\n      data[i] = Math.max(0, Math.min(255, rgb.r));\n      data[i + 1] = Math.max(0, Math.min(255, rgb.g));\n      data[i + 2] = Math.max(0, Math.min(255, rgb.b));\n    }\n\n    this.ctx.putImageData(this.currentImageData, 0, 0);\n  }\n\n  // Apply blur filter\n  applyBlur(radius: number): void {\n    if (!this.currentImageData) return;\n    \n    const tempCanvas = document.createElement('canvas');\n    tempCanvas.width = this.canvas.width;\n    tempCanvas.height = this.canvas.height;\n    const tempCtx = tempCanvas.getContext('2d')!;\n    \n    tempCtx.filter = `blur(${radius}px)`;\n    tempCtx.drawImage(this.canvas, 0, 0);\n    \n    this.ctx.drawImage(tempCanvas, 0, 0);\n    this.currentImageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  // Apply sharpen filter\n  applySharpen(intensity: number = 1): void {\n    if (!this.currentImageData) return;\n\n    const data = this.currentImageData.data;\n    const width = this.canvas.width;\n    const height = this.canvas.height;\n    const newData = new Uint8ClampedArray(data);\n\n    // Sharpening kernel\n    const kernel = [\n      0, -intensity, 0,\n      -intensity, 4 * intensity + 1, -intensity,\n      0, -intensity, 0\n    ];\n\n    for (let y = 1; y < height - 1; y++) {\n      for (let x = 1; x < width - 1; x++) {\n        for (let c = 0; c < 3; c++) { // RGB channels only\n          let sum = 0;\n          for (let ky = -1; ky <= 1; ky++) {\n            for (let kx = -1; kx <= 1; kx++) {\n              const pixelIndex = ((y + ky) * width + (x + kx)) * 4 + c;\n              const kernelIndex = (ky + 1) * 3 + (kx + 1);\n              sum += data[pixelIndex] * kernel[kernelIndex];\n            }\n          }\n          const pixelIndex = (y * width + x) * 4 + c;\n          newData[pixelIndex] = Math.max(0, Math.min(255, sum));\n        }\n      }\n    }\n\n    this.currentImageData = new ImageData(newData, width, height);\n    this.ctx.putImageData(this.currentImageData, 0, 0);\n  }\n\n  // Apply edge detection\n  applyEdgeDetection(): void {\n    if (!this.currentImageData) return;\n\n    const data = this.currentImageData.data;\n    const width = this.canvas.width;\n    const height = this.canvas.height;\n    const newData = new Uint8ClampedArray(data.length);\n\n    // Sobel edge detection kernels\n    const sobelX = [-1, 0, 1, -2, 0, 2, -1, 0, 1];\n    const sobelY = [-1, -2, -1, 0, 0, 0, 1, 2, 1];\n\n    for (let y = 1; y < height - 1; y++) {\n      for (let x = 1; x < width - 1; x++) {\n        let gx = 0, gy = 0;\n        \n        for (let ky = -1; ky <= 1; ky++) {\n          for (let kx = -1; kx <= 1; kx++) {\n            const pixelIndex = ((y + ky) * width + (x + kx)) * 4;\n            const gray = (data[pixelIndex] + data[pixelIndex + 1] + data[pixelIndex + 2]) / 3;\n            const kernelIndex = (ky + 1) * 3 + (kx + 1);\n            \n            gx += gray * sobelX[kernelIndex];\n            gy += gray * sobelY[kernelIndex];\n          }\n        }\n        \n        const magnitude = Math.sqrt(gx * gx + gy * gy);\n        const pixelIndex = (y * width + x) * 4;\n        \n        newData[pixelIndex] = magnitude;     // R\n        newData[pixelIndex + 1] = magnitude; // G\n        newData[pixelIndex + 2] = magnitude; // B\n        newData[pixelIndex + 3] = data[pixelIndex + 3]; // A\n      }\n    }\n\n    this.currentImageData = new ImageData(newData, width, height);\n    this.ctx.putImageData(this.currentImageData, 0, 0);\n  }\n\n  // Apply emboss effect\n  applyEmboss(): void {\n    if (!this.currentImageData) return;\n\n    const data = this.currentImageData.data;\n    const width = this.canvas.width;\n    const height = this.canvas.height;\n    const newData = new Uint8ClampedArray(data);\n\n    // Emboss kernel\n    const kernel = [-2, -1, 0, -1, 1, 1, 0, 1, 2];\n\n    for (let y = 1; y < height - 1; y++) {\n      for (let x = 1; x < width - 1; x++) {\n        for (let c = 0; c < 3; c++) {\n          let sum = 0;\n          for (let ky = -1; ky <= 1; ky++) {\n            for (let kx = -1; kx <= 1; kx++) {\n              const pixelIndex = ((y + ky) * width + (x + kx)) * 4 + c;\n              const kernelIndex = (ky + 1) * 3 + (kx + 1);\n              sum += data[pixelIndex] * kernel[kernelIndex];\n            }\n          }\n          const pixelIndex = (y * width + x) * 4 + c;\n          newData[pixelIndex] = Math.max(0, Math.min(255, sum + 128));\n        }\n      }\n    }\n\n    this.currentImageData = new ImageData(newData, width, height);\n    this.ctx.putImageData(this.currentImageData, 0, 0);\n  }\n\n  // Crop image\n  cropImage(cropArea: CropArea): void {\n    const tempCanvas = document.createElement('canvas');\n    const tempCtx = tempCanvas.getContext('2d')!;\n    \n    tempCanvas.width = cropArea.width;\n    tempCanvas.height = cropArea.height;\n    \n    tempCtx.drawImage(\n      this.canvas,\n      cropArea.x, cropArea.y, cropArea.width, cropArea.height,\n      0, 0, cropArea.width, cropArea.height\n    );\n    \n    this.canvas.width = cropArea.width;\n    this.canvas.height = cropArea.height;\n    this.ctx.drawImage(tempCanvas, 0, 0);\n    \n    this.currentImageData = this.ctx.getImageData(0, 0, cropArea.width, cropArea.height);\n  }\n\n  // Apply transform\n  applyTransform(transform: Partial<ImageTransform>): void {\n    const {\n      x = 0,\n      y = 0,\n      scale = 1,\n      rotation = 0,\n      flipX = false,\n      flipY = false\n    } = transform;\n\n    const tempCanvas = document.createElement('canvas');\n    const tempCtx = tempCanvas.getContext('2d')!;\n    tempCanvas.width = this.canvas.width;\n    tempCanvas.height = this.canvas.height;\n    tempCtx.drawImage(this.canvas, 0, 0);\n\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.ctx.save();\n\n    // Apply transformations\n    this.ctx.translate(this.canvas.width / 2, this.canvas.height / 2);\n    this.ctx.rotate(rotation * Math.PI / 180);\n    this.ctx.scale(scale * (flipX ? -1 : 1), scale * (flipY ? -1 : 1));\n    this.ctx.translate(-this.canvas.width / 2 + x, -this.canvas.height / 2 + y);\n\n    this.ctx.drawImage(tempCanvas, 0, 0);\n    this.ctx.restore();\n\n    this.currentImageData = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  // Convert to grayscale\n  convertToGrayscale(): void {\n    if (!this.currentImageData) return;\n\n    const data = this.currentImageData.data;\n    \n    for (let i = 0; i < data.length; i += 4) {\n      const gray = data[i] * 0.299 + data[i + 1] * 0.587 + data[i + 2] * 0.114;\n      data[i] = gray;     // R\n      data[i + 1] = gray; // G\n      data[i + 2] = gray; // B\n    }\n\n    this.ctx.putImageData(this.currentImageData, 0, 0);\n  }\n\n  // Convert to sepia\n  convertToSepia(): void {\n    if (!this.currentImageData) return;\n\n    const data = this.currentImageData.data;\n    \n    for (let i = 0; i < data.length; i += 4) {\n      const r = data[i];\n      const g = data[i + 1];\n      const b = data[i + 2];\n\n      data[i] = Math.min(255, r * 0.393 + g * 0.769 + b * 0.189);     // R\n      data[i + 1] = Math.min(255, r * 0.349 + g * 0.686 + b * 0.168); // G\n      data[i + 2] = Math.min(255, r * 0.272 + g * 0.534 + b * 0.131); // B\n    }\n\n    this.ctx.putImageData(this.currentImageData, 0, 0);\n  }\n\n  // Invert colors\n  invertColors(): void {\n    if (!this.currentImageData) return;\n\n    const data = this.currentImageData.data;\n    \n    for (let i = 0; i < data.length; i += 4) {\n      data[i] = 255 - data[i];         // R\n      data[i + 1] = 255 - data[i + 1]; // G\n      data[i + 2] = 255 - data[i + 2]; // B\n    }\n\n    this.ctx.putImageData(this.currentImageData, 0, 0);\n  }\n\n  // Export image\n  exportImage(format: 'png' | 'jpeg' | 'webp' = 'png', quality: number = 0.9): string {\n    return this.canvas.toDataURL(`image/${format}`, quality);\n  }\n\n  // Get image dimensions\n  getDimensions(): { width: number; height: number } {\n    return {\n      width: this.canvas.width,\n      height: this.canvas.height\n    };\n  }\n\n  // Helper methods for color space conversion\n  private rgbToHsv(r: number, g: number, b: number): { h: number; s: number; v: number } {\n    r /= 255;\n    g /= 255;\n    b /= 255;\n\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    const diff = max - min;\n\n    let h = 0;\n    const s = max === 0 ? 0 : diff / max;\n    const v = max;\n\n    if (diff !== 0) {\n      switch (max) {\n        case r: h = (g - b) / diff + (g < b ? 6 : 0); break;\n        case g: h = (b - r) / diff + 2; break;\n        case b: h = (r - g) / diff + 4; break;\n      }\n      h /= 6;\n    }\n\n    return { h: h * 2 * Math.PI, s, v };\n  }\n\n  private hsvToRgb(h: number, s: number, v: number): { r: number; g: number; b: number } {\n    h = h / (2 * Math.PI); // Convert to 0-1 range\n    \n    const c = v * s;\n    const x = c * (1 - Math.abs((h * 6) % 2 - 1));\n    const m = v - c;\n\n    let r = 0, g = 0, b = 0;\n\n    if (h >= 0 && h < 1/6) {\n      r = c; g = x; b = 0;\n    } else if (h >= 1/6 && h < 2/6) {\n      r = x; g = c; b = 0;\n    } else if (h >= 2/6 && h < 3/6) {\n      r = 0; g = c; b = x;\n    } else if (h >= 3/6 && h < 4/6) {\n      r = 0; g = x; b = c;\n    } else if (h >= 4/6 && h < 5/6) {\n      r = x; g = 0; b = c;\n    } else {\n      r = c; g = 0; b = x;\n    }\n\n    return {\n      r: (r + m) * 255,\n      g: (g + m) * 255,\n      b: (b + m) * 255\n    };\n  }\n}\n\n// Available filters\nexport const imageFilters: ImageFilter[] = [\n  {\n    name: 'grayscale',\n    displayName: 'Ασπρόμαυρο',\n    apply: (canvas, ctx) => {\n      const editor = new ImageEditor(canvas);\n      editor.convertToGrayscale();\n    }\n  },\n  {\n    name: 'sepia',\n    displayName: 'Σέπια',\n    apply: (canvas, ctx) => {\n      const editor = new ImageEditor(canvas);\n      editor.convertToSepia();\n    }\n  },\n  {\n    name: 'invert',\n    displayName: 'Αντιστροφή Χρωμάτων',\n    apply: (canvas, ctx) => {\n      const editor = new ImageEditor(canvas);\n      editor.invertColors();\n    }\n  },\n  {\n    name: 'blur',\n    displayName: 'Θόλωμα',\n    apply: (canvas, ctx, intensity = 2) => {\n      const editor = new ImageEditor(canvas);\n      editor.applyBlur(intensity);\n    }\n  },\n  {\n    name: 'sharpen',\n    displayName: 'Όξυνση',\n    apply: (canvas, ctx, intensity = 0.5) => {\n      const editor = new ImageEditor(canvas);\n      editor.applySharpen(intensity);\n    }\n  },\n  {\n    name: 'edge',\n    displayName: 'Ανίχνευση Άκρων',\n    apply: (canvas, ctx) => {\n      const editor = new ImageEditor(canvas);\n      editor.applyEdgeDetection();\n    }\n  },\n  {\n    name: 'emboss',\n    displayName: 'Ανάγλυφο',\n    apply: (canvas, ctx) => {\n      const editor = new ImageEditor(canvas);\n      editor.applyEmboss();\n    }\n  }\n];","size_bytes":15411},"client/src/lib/laser-svg-generator.ts":{"content":"// Laser SVG Generator - Creates optimized SVG paths for laser cutting\n// Uses the fractal algorithm to match the actual puzzle pieces generated by users\n\nimport { CircleFractalJigsaw } from './fractal-generator';\n\nexport interface PuzzleConfig {\n  pieces: number;\n  width: number;\n  height: number;\n  material: string;\n}\n\nexport interface LaserSVGOptions {\n  strokeWidth: number;\n  optimizeForLaser: boolean;\n  removeDuplicates: boolean;\n}\n\nclass LaserSVGGenerator {\n  private config: PuzzleConfig;\n  private options: LaserSVGOptions;\n\n  constructor(config: PuzzleConfig, options: Partial<LaserSVGOptions> = {}) {\n    this.config = config;\n    this.options = {\n      strokeWidth: 0.1, // Very thin for laser cutting\n      optimizeForLaser: true,\n      removeDuplicates: true,\n      ...options\n    };\n  }\n\n  // Generate puzzle piece paths using the fractal algorithm\n  private generatePuzzlePaths(): string[] {\n    const { pieces, width, height } = this.config;\n    \n    try {\n      // Create a fractal jigsaw generator with the same parameters as the user interface\n      const fractalGenerator = new CircleFractalJigsaw(\n        Math.floor(width / 10), // Scale down for grid calculation\n        Math.floor(height / 10),\n        pieces,\n        0.5, // Default radius\n        10,  // Default frame\n        2,   // Min piece length\n        8,   // Max piece length\n        () => Math.random() // Random function\n      );\n      \n      // Generate the fractal puzzle\n      fractalGenerator.generate();\n      \n      // Get the SVG paths using the same method as the user interface\n      const paths = fractalGenerator.multipaths(10, 0.5, 1);\n      \n      // Scale the paths to match the target dimensions\n      const dimensions = fractalGenerator.getDimensions();\n      const scaleX = width / (dimensions.width * 2);\n      const scaleY = height / (dimensions.height * 2);\n      \n      const scaledPaths = paths.map(path => {\n        // Scale the path coordinates to match target size and handle all SVG path commands\n        return path.replace(/([MLHVCSQTA])([0-9.-]+)(?:,([0-9.-]+))?/g, (match, command, x, y) => {\n          const scaledX = (parseFloat(x) * scaleX).toFixed(2);\n          if (y !== undefined) {\n            const scaledY = (parseFloat(y) * scaleY).toFixed(2);\n            return `${command}${scaledX},${scaledY}`;\n          } else {\n            return `${command}${scaledX}`;\n          }\n        });\n      });\n      \n      return scaledPaths;\n      \n    } catch (error) {\n      console.error('Error generating fractal puzzle paths:', error);\n      // Fallback to simple paths if fractal generation fails\n      return this.generateFallbackPaths();\n    }\n  }\n  \n  // Fallback method if fractal generation fails\n  private generateFallbackPaths(): string[] {\n    const { pieces, width, height } = this.config;\n    const aspectRatio = width / height;\n    const cols = Math.ceil(Math.sqrt(pieces * aspectRatio));\n    const rows = Math.ceil(pieces / cols);\n    const pieceWidth = width / cols;\n    const pieceHeight = height / rows;\n    \n    const paths: string[] = [];\n    for (let i = 0; i < pieces; i++) {\n      const row = Math.floor(i / cols);\n      const col = i % cols;\n      const x = col * pieceWidth;\n      const y = row * pieceHeight;\n      paths.push(`M${x},${y} L${x + pieceWidth},${y} L${x + pieceWidth},${y + pieceHeight} L${x},${y + pieceHeight} Z`);\n    }\n    return paths;\n  }\n\n\n\n\n\n  // Remove overlapping segments for laser optimization\n  private optimizePaths(paths: string[]): string[] {\n    if (!this.options.removeDuplicates) return paths;\n    \n    // Simple optimization - clean up paths\n    return paths.map(path => {\n      // Remove extra spaces and normalize the path\n      return path.replace(/\\s+/g, ' ').trim();\n    });\n  }\n\n  // Generate complete laser-optimized SVG\n  public generateLaserSVG(): string {\n    const paths = this.generatePuzzlePaths();\n    const optimizedPaths = this.optimizePaths(paths);\n    \n    const { width, height } = this.config;\n    const { strokeWidth } = this.options;\n    \n    console.log(`Generating SVG for ${this.config.pieces} pieces, ${paths.length} paths generated`);\n    \n    let svg = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg width=\"${width}mm\" height=\"${height}mm\" viewBox=\"0 0 ${width} ${height}\" \n     xmlns=\"http://www.w3.org/2000/svg\">\n  <defs>\n    <!-- Laser cutting style - Red lines for laser cutting -->\n    <style>\n      .laser-cut {\n        fill: none;\n        stroke: #FF0000;\n        stroke-width: ${strokeWidth}mm;\n        stroke-linecap: round;\n        stroke-linejoin: round;\n        vector-effect: non-scaling-stroke;\n      }\n    </style>\n  </defs>\n  \n  <!-- Generated on ${new Date().toISOString()} -->\n  <!-- Puzzle: ${this.config.pieces} pieces, ${this.config.material} material -->\n  <!-- Dimensions: ${width}mm x ${height}mm -->\n  \n  <!-- Puzzle pieces for laser cutting -->\n  <g class=\"puzzle-pieces\">`;\n\n    optimizedPaths.forEach((path, index) => {\n      if (path && path.length > 0) {\n        svg += `\n    <path id=\"piece-${index + 1}\" d=\"${path}\" class=\"laser-cut\"/>`;\n      }\n    });\n\n    svg += `\n  </g>\n  \n  <!-- Metadata for manufacturing -->\n  <metadata>\n    <rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n      <rdf:Description>\n        <pieces>${this.config.pieces}</pieces>\n        <material>${this.config.material}</material>\n        <dimensions>${width}mm x ${height}mm</dimensions>\n        <optimizedForLaser>true</optimizedForLaser>\n      </rdf:Description>\n    </rdf:RDF>\n  </metadata>\n</svg>`;\n\n    return svg;\n  }\n\n  // Generate SVG and return as blob for download\n  public generateSVGBlob(): Blob {\n    const svgContent = this.generateLaserSVG();\n    return new Blob([svgContent], { type: 'image/svg+xml' });\n  }\n\n  // Generate filename for the SVG\n  public generateFilename(orderId?: string): string {\n    const timestamp = new Date().toISOString().slice(0, 10);\n    const orderPrefix = orderId ? `${orderId}_` : '';\n    return `${orderPrefix}puzzle_${this.config.pieces}pieces_${timestamp}.svg`;\n  }\n}\n\n// Helper function to create laser SVG from puzzle configuration\nexport function createLaserSVG(config: PuzzleConfig, options?: Partial<LaserSVGOptions>): LaserSVGGenerator {\n  return new LaserSVGGenerator(config, options);\n}\n\n// Helper to download SVG file\nexport function downloadSVG(svgContent: string, filename: string): void {\n  try {\n    // Add UTF-8 BOM for better compatibility\n    const BOM = '\\uFEFF';\n    const blob = new Blob([BOM + svgContent], { \n      type: 'image/svg+xml;charset=utf-8' \n    });\n    \n    console.log('Creating download blob, size:', blob.size);\n    \n    const url = URL.createObjectURL(blob);\n    \n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename;\n    link.style.display = 'none';\n    \n    document.body.appendChild(link);\n    \n    // Force click and clean up\n    link.click();\n    \n    setTimeout(() => {\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    }, 100);\n    \n    console.log('SVG download initiated:', filename);\n  } catch (error) {\n    console.error('Error downloading SVG:', error);\n  }\n}","size_bytes":7152},"client/src/lib/puzzle-utils.ts":{"content":"export interface PuzzleConfiguration {\n  size: string;\n  material: string;\n  pieceCount: number;\n  imageUrl?: string;\n  templateId?: string;\n  totalPrice: number;\n}\n\nexport const puzzleSizes = [\n  { value: \"small\", label: \"Μικρό (20x30cm)\", basePrice: 15 },\n  { value: \"medium\", label: \"Μεσαίο (30x40cm)\", basePrice: 25 },\n  { value: \"large\", label: \"Μεγάλο (40x50cm)\", basePrice: 35 },\n  { value: \"xlarge\", label: \"Πολύ Μεγάλο (50x70cm)\", basePrice: 45 },\n];\n\nexport const puzzleMaterials = [\n  { value: \"paper\", label: \"Χαρτί\", multiplier: 1.0 },\n  { value: \"wood\", label: \"Ξύλο\", multiplier: 1.5 },\n  { value: \"acrylic\", label: \"Ακρυλικό\", multiplier: 2.0 },\n];\n\nexport const puzzlePieceCounts = [\n  { value: 100, label: \"100 κομμάτια\", multiplier: 1.0 },\n  { value: 300, label: \"300 κομμάτια\", multiplier: 1.2 },\n  { value: 500, label: \"500 κομμάτια\", multiplier: 1.4 },\n  { value: 1000, label: \"1000 κομμάτια\", multiplier: 1.8 },\n  { value: 1500, label: \"1500 κομμάτια\", multiplier: 2.2 },\n];\n\nexport function calculatePrice(size: string, material: string, pieceCount: number): number {\n  const sizeData = puzzleSizes.find(s => s.value === size);\n  const materialData = puzzleMaterials.find(m => m.value === material);\n  const pieceData = puzzlePieceCounts.find(p => p.value === pieceCount);\n  \n  if (!sizeData || !materialData || !pieceData) {\n    return 25; // fallback price\n  }\n  \n  return Math.round(sizeData.basePrice * materialData.multiplier * pieceData.multiplier);\n}\n\nexport function formatPrice(price: number): string {\n  return `€${price.toFixed(2)}`;\n}\n\nexport function getSizeLabel(value: string): string {\n  return puzzleSizes.find(s => s.value === value)?.label || value;\n}\n\nexport function getMaterialLabel(value: string): string {\n  return puzzleMaterials.find(m => m.value === value)?.label || value;\n}\n\nexport function getPieceCountLabel(value: number): string {\n  return puzzlePieceCounts.find(p => p.value === value)?.label || `${value} κομμάτια`;\n}","size_bytes":2070},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/ar-preview.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { \n  Camera,\n  RotateCw,\n  Move3D,\n  ZoomIn,\n  ZoomOut,\n  Eye,\n  EyeOff,\n  Download,\n  Share,\n  Settings,\n  Info,\n  Smartphone,\n  AlertTriangle,\n  CheckCircle\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ARPreviewProps {\n  puzzleImage?: string;\n  puzzleSize?: string;\n  material?: string;\n}\n\nexport default function ARPreview({ puzzleImage, puzzleSize = \"30x22cm\", material = \"Ξύλο\" }: ARPreviewProps) {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [isARActive, setIsARActive] = useState(false);\n  const [isVideoReady, setIsVideoReady] = useState(false);\n  const [stream, setStream] = useState<MediaStream | null>(null);\n  const [puzzleScale, setPuzzleScale] = useState([50]);\n  const [puzzleRotation, setPuzzleRotation] = useState(0);\n  const [puzzlePosition, setPuzzlePosition] = useState({ x: 50, y: 50 });\n  const [showPuzzleOverlay, setShowPuzzleOverlay] = useState(true);\n  const [isCapturing, setIsCapturing] = useState(false);\n  const [deviceOrientation, setDeviceOrientation] = useState<string>('landscape');\n  const { toast } = useToast();\n\n  // Initialize AR camera\n  const startAR = async () => {\n    try {\n      const mediaStream = await navigator.mediaDevices.getUserMedia({\n        video: { \n          facingMode: { ideal: 'environment' }, // Rear camera preferred\n          width: { ideal: 1280 },\n          height: { ideal: 720 }\n        }\n      });\n      \n      setStream(mediaStream);\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = mediaStream;\n        videoRef.current.onloadedmetadata = () => {\n          setIsVideoReady(true);\n          setIsARActive(true);\n          toast({\n            title: \"AR Ενεργοποιήθηκε!\",\n            description: \"Στρέψτε την κάμερα προς μια επίπεδη επιφάνεια\",\n          });\n        };\n      }\n    } catch (error) {\n      console.error('Error accessing camera:', error);\n      toast({\n        title: \"Σφάλμα Κάμερας\",\n        description: \"Δεν μπόρεσα να προσπελάσω την κάμερα. Επιτρέψτε την πρόσβαση.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  // Stop AR camera\n  const stopAR = () => {\n    if (stream) {\n      stream.getTracks().forEach(track => track.stop());\n      setStream(null);\n    }\n    setIsARActive(false);\n    setIsVideoReady(false);\n  };\n\n  // Capture AR screenshot\n  const captureAR = () => {\n    if (!canvasRef.current || !videoRef.current) return;\n    \n    setIsCapturing(true);\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    if (ctx) {\n      // Set canvas size to video size\n      canvas.width = videoRef.current.videoWidth;\n      canvas.height = videoRef.current.videoHeight;\n      \n      // Draw video frame\n      ctx.drawImage(videoRef.current, 0, 0);\n      \n      // Create download link\n      const link = document.createElement('a');\n      link.download = `fractal-puzzle-ar-preview-${Date.now()}.png`;\n      link.href = canvas.toDataURL();\n      link.click();\n      \n      toast({\n        title: \"Φωτογραφία Αποθηκεύτηκε!\",\n        description: \"Η AR προεπισκόπηση αποθηκεύτηκε επιτυχώς\",\n      });\n    }\n    \n    setTimeout(() => setIsCapturing(false), 1000);\n  };\n\n  // Handle device orientation\n  useEffect(() => {\n    const handleOrientationChange = () => {\n      const orientation = window.screen.orientation?.type || \n                         (window.innerWidth > window.innerHeight ? 'landscape' : 'portrait');\n      setDeviceOrientation(orientation);\n    };\n\n    window.addEventListener('orientationchange', handleOrientationChange);\n    handleOrientationChange();\n\n    return () => window.removeEventListener('orientationchange', handleOrientationChange);\n  }, []);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      stopAR();\n    };\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-background py-8\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-4\">\n            <span className=\"bg-gradient-to-r from-primary via-secondary to-accent bg-clip-text text-transparent\">\n              AR Προεπισκόπηση Παζλ\n            </span>\n          </h1>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Δείτε πώς θα μοιάζει το παζλ σας στον πραγματικό χώρο με επαυξημένη πραγματικότητα\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* AR Viewer */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"glass-morphism overflow-hidden\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"flex items-center\">\n                    <Camera className=\"w-5 h-5 mr-2 text-primary\" />\n                    AR Προβολή\n                  </CardTitle>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant={isARActive ? \"default\" : \"secondary\"}>\n                      {isARActive ? \"Ενεργό\" : \"Ανενεργό\"}\n                    </Badge>\n                    {isARActive && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {deviceOrientation}\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <div className=\"relative aspect-video bg-gradient-to-br from-gray-900 to-gray-800 flex items-center justify-center overflow-hidden\">\n                  {!isARActive ? (\n                    // AR Start Screen\n                    <div className=\"text-center space-y-6 p-8\">\n                      <div className=\"w-20 h-20 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center mx-auto\">\n                        <Camera className=\"w-10 h-10 text-primary-foreground\" />\n                      </div>\n                      <div className=\"space-y-3\">\n                        <h3 className=\"text-xl font-semibold text-white\">Ξεκινήστε AR Προεπισκόπηση</h3>\n                        <p className=\"text-gray-300 max-w-md\">\n                          Χρησιμοποιήστε την κάμερά σας για να δείτε το παζλ στον πραγματικό χώρο\n                        </p>\n                      </div>\n                      <div className=\"flex flex-col space-y-3\">\n                        <Button onClick={startAR} size=\"lg\" className=\"bg-gradient-to-r from-primary to-secondary\">\n                          <Camera className=\"w-5 h-5 mr-2\" />\n                          Ενεργοποίηση AR\n                        </Button>\n                        <div className=\"text-xs text-gray-400 flex items-center justify-center\">\n                          <Smartphone className=\"w-4 h-4 mr-1\" />\n                          Βέλτιστο για κινητές συσκευές\n                        </div>\n                      </div>\n                    </div>\n                  ) : (\n                    // AR Camera View\n                    <>\n                      <video\n                        ref={videoRef}\n                        autoPlay\n                        playsInline\n                        muted\n                        className=\"w-full h-full object-cover\"\n                      />\n                      \n                      {/* AR Puzzle Overlay */}\n                      {isVideoReady && showPuzzleOverlay && (\n                        <div \n                          className=\"absolute pointer-events-none\"\n                          style={{\n                            left: `${puzzlePosition.x}%`,\n                            top: `${puzzlePosition.y}%`,\n                            transform: `translate(-50%, -50%) rotate(${puzzleRotation}deg) scale(${puzzleScale[0] / 100})`,\n                            transition: 'all 0.3s ease'\n                          }}\n                        >\n                          <div className=\"relative\">\n                            {/* Puzzle Shadow */}\n                            <div \n                              className=\"absolute inset-0 bg-black/20 blur-md\"\n                              style={{ transform: 'translate(4px, 4px)' }}\n                            />\n                            \n                            {/* Puzzle Image */}\n                            <div className=\"relative bg-white rounded-lg shadow-2xl border-4 border-white\">\n                              {puzzleImage ? (\n                                <img \n                                  src={puzzleImage} \n                                  alt=\"AR Puzzle Preview\"\n                                  className=\"w-48 h-36 object-cover rounded\"\n                                />\n                              ) : (\n                                <div className=\"w-48 h-36 bg-gradient-to-br from-primary/20 to-secondary/20 rounded flex items-center justify-center\">\n                                  <div className=\"text-center text-gray-600\">\n                                    <div className=\"text-2xl mb-1\">🧩</div>\n                                    <div className=\"text-xs\">Fractal Παζλ</div>\n                                  </div>\n                                </div>\n                              )}\n                              \n                              {/* Puzzle Info Badge */}\n                              <div className=\"absolute -top-2 -right-2 bg-primary text-primary-foreground text-xs px-2 py-1 rounded-full\">\n                                {puzzleSize}\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n                      \n                      {/* AR Controls Overlay */}\n                      <div className=\"absolute bottom-4 left-4 right-4 flex justify-between items-end\">\n                        <div className=\"space-y-2\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => setShowPuzzleOverlay(!showPuzzleOverlay)}\n                            className=\"bg-black/50 border-white/20 text-white hover:bg-black/70\"\n                          >\n                            {showPuzzleOverlay ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                          </Button>\n                        </div>\n                        \n                        <div className=\"flex space-x-2\">\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={captureAR}\n                            disabled={isCapturing}\n                            className=\"bg-black/50 border-white/20 text-white hover:bg-black/70\"\n                          >\n                            {isCapturing ? (\n                              <div className=\"w-4 h-4 animate-spin border-2 border-white border-t-transparent rounded-full\" />\n                            ) : (\n                              <Download className=\"w-4 h-4\" />\n                            )}\n                          </Button>\n                          <Button \n                            variant=\"destructive\" \n                            size=\"sm\"\n                            onClick={stopAR}\n                            className=\"bg-red-600/80 hover:bg-red-600\"\n                          >\n                            Τερματισμός\n                          </Button>\n                        </div>\n                      </div>\n                    </>\n                  )}\n                  \n                  {/* Hidden canvas for capturing */}\n                  <canvas ref={canvasRef} className=\"hidden\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* AR Controls */}\n          <div className=\"space-y-6\">\n            {/* Puzzle Info */}\n            <Card className=\"glass-morphism\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-sm\">\n                  <Info className=\"w-4 h-4 mr-2 text-secondary\" />\n                  Πληροφορίες Παζλ\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span>Μέγεθος:</span>\n                    <Badge variant=\"secondary\">{puzzleSize}</Badge>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Υλικό:</span>\n                    <Badge variant=\"secondary\">{material}</Badge>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Τύπος:</span>\n                    <Badge variant=\"secondary\">Fractal</Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* AR Controls */}\n            {isARActive && (\n              <Card className=\"glass-morphism\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center text-sm\">\n                    <Settings className=\"w-4 h-4 mr-2 text-primary\" />\n                    Ελέγχοι AR\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  {/* Scale Control */}\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <label className=\"text-sm font-medium\">Μέγεθος</label>\n                      <span className=\"text-xs text-muted-foreground\">{puzzleScale[0]}%</span>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <ZoomOut className=\"w-4 h-4 text-muted-foreground\" />\n                      <Slider\n                        value={puzzleScale}\n                        onValueChange={setPuzzleScale}\n                        max={150}\n                        min={25}\n                        step={5}\n                        className=\"flex-1\"\n                      />\n                      <ZoomIn className=\"w-4 h-4 text-muted-foreground\" />\n                    </div>\n                  </div>\n\n                  {/* Rotation Control */}\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <label className=\"text-sm font-medium\">Περιστροφή</label>\n                      <span className=\"text-xs text-muted-foreground\">{puzzleRotation}°</span>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => setPuzzleRotation(r => r - 15)}\n                      >\n                        ↺\n                      </Button>\n                      <Slider\n                        value={[puzzleRotation]}\n                        onValueChange={([value]) => setPuzzleRotation(value)}\n                        max={360}\n                        min={0}\n                        step={15}\n                        className=\"flex-1\"\n                      />\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => setPuzzleRotation(r => r + 15)}\n                      >\n                        ↻\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Position Reset */}\n                  <div className=\"pt-3 border-t\">\n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full\" \n                      size=\"sm\"\n                      onClick={() => {\n                        setPuzzlePosition({ x: 50, y: 50 });\n                        setPuzzleRotation(0);\n                        setPuzzleScale([50]);\n                      }}\n                    >\n                      <RotateCw className=\"w-4 h-4 mr-2\" />\n                      Επαναφορά\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* AR Instructions */}\n            <Card className=\"glass-morphism bg-gradient-to-r from-primary/5 to-secondary/5 border-primary/20\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center text-sm\">\n                  <CheckCircle className=\"w-4 h-4 mr-2 text-primary\" />\n                  Οδηγίες AR\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"text-sm space-y-2\">\n                  <div className=\"flex items-start space-x-2\">\n                    <div className=\"w-1.5 h-1.5 bg-primary rounded-full mt-1.5 flex-shrink-0\" />\n                    <p>Στρέψτε την κάμερα σε επίπεδη επιφάνεια</p>\n                  </div>\n                  <div className=\"flex items-start space-x-2\">\n                    <div className=\"w-1.5 h-1.5 bg-secondary rounded-full mt-1.5 flex-shrink-0\" />\n                    <p>Χρησιμοποιήστε τα controls για προσαρμογή</p>\n                  </div>\n                  <div className=\"flex items-start space-x-2\">\n                    <div className=\"w-1.5 h-1.5 bg-accent rounded-full mt-1.5 flex-shrink-0\" />\n                    <p>Κάντε capture για αποθήκευση</p>\n                  </div>\n                  <div className=\"flex items-start space-x-2\">\n                    <div className=\"w-1.5 h-1.5 bg-primary rounded-full mt-1.5 flex-shrink-0\" />\n                    <p>Καλύτερα αποτελέσματα με καλό φωτισμό</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Share Options */}\n            {isARActive && (\n              <Card className=\"glass-morphism\">\n                <CardContent className=\"p-4\">\n                  <Button variant=\"outline\" className=\"w-full\" onClick={captureAR}>\n                    <Share className=\"w-4 h-4 mr-2\" />\n                    Μοιραστείτε AR Preview\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n\n        {/* Browser Compatibility Notice */}\n        {!navigator.mediaDevices && (\n          <Card className=\"glass-morphism mt-6 border-yellow-500/20 bg-yellow-500/5\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-start space-x-3\">\n                <AlertTriangle className=\"w-5 h-5 text-yellow-500 mt-0.5 flex-shrink-0\" />\n                <div>\n                  <h4 className=\"font-semibold text-yellow-700 dark:text-yellow-300 mb-1\">\n                    Μη Υποστηριζόμενο Πρόγραμμα Περιήγησης\n                  </h4>\n                  <p className=\"text-sm text-yellow-600 dark:text-yellow-400\">\n                    Η λειτουργία AR απαιτεί σύγχρονο browser με υποστήριξη WebRTC. \n                    Χρησιμοποιήστε Chrome, Firefox, Safari ή Edge για καλύτερη εμπειρία.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":20504},"client/src/pages/blog.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Calendar, Clock, User, Search, BookOpen, Lightbulb, Star, TrendingUp } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\n\nexport default function BlogPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n\n  // Mock blog data - in real app would come from API\n  const { data: blogPosts = [] } = useQuery({\n    queryKey: ['/api/blog', selectedCategory],\n    enabled: false, // Disabled until API is implemented\n  });\n\n  // Mock blog posts for demo\n  const mockBlogPosts = [\n    {\n      id: \"1\",\n      title: \"Η Μαγεία των Fractal Puzzles: Μια Εισαγωγή στα Μαθηματικά της Φύσης\",\n      slug: \"magia-fractal-puzzles-eisagogi\",\n      excerpt: \"Ανακαλύψτε πώς τα fractal patterns που βλέπετε στη φύση μπορούν να γίνουν όμορφα puzzle που συνδυάζουν τέχνη και επιστήμη.\",\n      content: \"...\",\n      author: \"Dr. Maria Παπαδοπούλου\",\n      category: \"education\",\n      tags: [\"fractals\", \"μαθηματικά\", \"φύση\"],\n      featuredImage: \"https://images.unsplash.com/photo-1635070041078-e363dbe005cb?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n      publishedAt: new Date(\"2025-08-10\"),\n      readTime: 8,\n      views: 1247\n    },\n    {\n      id: \"2\", \n      title: \"5 Συμβουλές για να Λύσετε Γρηγορότερα τα Fractal Puzzles σας\",\n      slug: \"5-symvoules-fractal-puzzles\",\n      excerpt: \"Μάθετε τεχνικές που θα σας βοηθήσουν να ολοκληρώνετε τα puzzle σας πιο αποτελεσματικά και να απολαμβάνετε περισσότερο τη διαδικασία.\",\n      content: \"...\",\n      author: \"Νίκος Γεωργίου\",\n      category: \"tips\",\n      tags: [\"συμβουλές\", \"τεχνική\", \"ταχύτητα\"],\n      featuredImage: \"https://images.unsplash.com/photo-1517077304055-6e89abbf09b0?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n      publishedAt: new Date(\"2025-08-08\"),\n      readTime: 5,\n      views: 892\n    },\n    {\n      id: \"3\",\n      title: \"Πελάτισσα της Εβδομάδας: Η Ελένη και το Mandelbrot Set των 2000 κομματιών\",\n      slug: \"pelatissa-evdomadas-eleni-mandelbrot\",\n      excerpt: \"Γνωρίστε την Ελένη, που ολοκλήρωσε το πιο δύσκολο puzzle μας σε χρόνο ρεκόρ και μοιράζεται τις εμπειρίες της.\",\n      content: \"...\",\n      author: \"PuzzleCraft Team\",\n      category: \"spotlight\",\n      tags: [\"πελάτης\", \"επιτυχία\", \"mandelbrot\"],\n      featuredImage: \"https://images.unsplash.com/photo-1541961017774-22349e4a1262?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n      publishedAt: new Date(\"2025-08-05\"),\n      readTime: 4,\n      views: 654\n    },\n    {\n      id: \"4\",\n      title: \"Νέα Συλλογή: Φρακταλικά Δέντρα - Όταν η Φύση Συναντά τα Μαθηματικά\",\n      slug: \"nea-syllogei-fraktalika-dentra\",\n      excerpt: \"Παρουσιάζουμε τη νέα μας συλλογή εμπνευσμένη από τα φρακταλικά patterns των δέντρων και των φυτών.\",\n      content: \"...\",\n      author: \"Άννα Κωνσταντίνου\",\n      category: \"news\",\n      tags: [\"νέα συλλογή\", \"φύση\", \"δέντρα\"],\n      featuredImage: \"https://images.unsplash.com/photo-1502134249126-9f3755a50d78?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n      publishedAt: new Date(\"2025-08-03\"),\n      readTime: 6,\n      views: 1105\n    },\n    {\n      id: \"5\",\n      title: \"DIY: Κατασκευάστε το Δικό σας Fractal Art με Απλά Εργαλεία\",\n      slug: \"diy-kataskevasate-fractal-art\",\n      excerpt: \"Οδηγός βήμα προς βήμα για να δημιουργήσετε τα δικά σας fractal patterns που μπορούν να γίνουν custom puzzle.\",\n      content: \"...\",\n      author: \"Γιάννης Μιχαηλίδης\",\n      category: \"education\",\n      tags: [\"diy\", \"tutorial\", \"δημιουργία\"],\n      featuredImage: \"https://images.unsplash.com/photo-1518709268805-4e9042af2176?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n      publishedAt: new Date(\"2025-08-01\"),\n      readTime: 12,\n      views: 743\n    }\n  ];\n\n  const categories = [\n    { id: \"all\", name: \"Όλα\", icon: BookOpen, count: mockBlogPosts.length },\n    { id: \"education\", name: \"Εκπαίδευση\", icon: Lightbulb, count: mockBlogPosts.filter(p => p.category === \"education\").length },\n    { id: \"tips\", name: \"Συμβουλές\", icon: Star, count: mockBlogPosts.filter(p => p.category === \"tips\").length },\n    { id: \"news\", name: \"Νέα\", icon: TrendingUp, count: mockBlogPosts.filter(p => p.category === \"news\").length },\n    { id: \"spotlight\", name: \"Spotlight\", icon: User, count: mockBlogPosts.filter(p => p.category === \"spotlight\").length },\n  ];\n\n  const filteredPosts = mockBlogPosts.filter(post => {\n    const matchesSearch = post.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         post.excerpt.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         post.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));\n    const matchesCategory = selectedCategory === \"all\" || post.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'education': return 'bg-blue-100 text-blue-800';\n      case 'tips': return 'bg-green-100 text-green-800';\n      case 'news': return 'bg-purple-100 text-purple-800';\n      case 'spotlight': return 'bg-orange-100 text-orange-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getCategoryName = (category: string) => {\n    const cat = categories.find(c => c.id === category);\n    return cat?.name || category;\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-4xl font-bold mb-4 text-center bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n          PuzzleCraft Blog\n        </h1>\n        <p className=\"text-lg text-muted-foreground text-center\">\n          Ανακαλύψτε τον κόσμο των fractal puzzles, μάθετε νέες τεχνικές και εμπνευστείτε από τις ιστορίες των πελατών μας\n        </p>\n      </div>\n\n      {/* Search and Filter */}\n      <div className=\"mb-8\">\n        <div className=\"flex flex-col md:flex-row gap-4 items-center\">\n          <div className=\"relative flex-1 max-w-md\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n            <Input\n              placeholder=\"Αναζήτηση άρθρων...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-blog\"\n            />\n          </div>\n          <div className=\"flex flex-wrap gap-2\">\n            {categories.map(category => (\n              <Button\n                key={category.id}\n                variant={selectedCategory === category.id ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setSelectedCategory(category.id)}\n                data-testid={`filter-${category.id}`}\n              >\n                <category.icon className=\"w-4 h-4 mr-2\" />\n                {category.name} ({category.count})\n              </Button>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Featured Post */}\n      {filteredPosts.length > 0 && (\n        <Card className=\"mb-8 overflow-hidden hover:shadow-lg transition-shadow\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2\">\n            <div className=\"relative\">\n              <img \n                src={filteredPosts[0].featuredImage}\n                alt={filteredPosts[0].title}\n                className=\"w-full h-64 lg:h-full object-cover\"\n              />\n              <div className=\"absolute top-4 left-4\">\n                <Badge className={getCategoryColor(filteredPosts[0].category)}>\n                  Επιλεγμένο Άρθρο\n                </Badge>\n              </div>\n            </div>\n            <CardContent className=\"p-6 flex flex-col justify-center\">\n              <Badge className={`${getCategoryColor(filteredPosts[0].category)} mb-3 w-fit`}>\n                {getCategoryName(filteredPosts[0].category)}\n              </Badge>\n              <h2 className=\"text-2xl font-bold mb-3 leading-tight\">\n                {filteredPosts[0].title}\n              </h2>\n              <p className=\"text-muted-foreground mb-4 line-clamp-3\">\n                {filteredPosts[0].excerpt}\n              </p>\n              <div className=\"flex items-center gap-4 text-sm text-muted-foreground mb-4\">\n                <div className=\"flex items-center gap-1\">\n                  <User className=\"w-4 h-4\" />\n                  {filteredPosts[0].author}\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <Calendar className=\"w-4 h-4\" />\n                  {filteredPosts[0].publishedAt.toLocaleDateString('el-GR')}\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <Clock className=\"w-4 h-4\" />\n                  {filteredPosts[0].readTime} λεπτά\n                </div>\n              </div>\n              <Button asChild data-testid={`read-more-${filteredPosts[0].id}`}>\n                <Link href={`/blog/${filteredPosts[0].slug}`}>\n                  Διαβάστε Περισσότερα\n                </Link>\n              </Button>\n            </CardContent>\n          </div>\n        </Card>\n      )}\n\n      {/* Blog Posts Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n        {filteredPosts.slice(1).map((post) => (\n          <Card key={post.id} className=\"overflow-hidden hover:shadow-lg transition-shadow\">\n            <div className=\"relative\">\n              <img \n                src={post.featuredImage}\n                alt={post.title}\n                className=\"w-full h-48 object-cover\"\n              />\n              <div className=\"absolute top-3 left-3\">\n                <Badge className={getCategoryColor(post.category)}>\n                  {getCategoryName(post.category)}\n                </Badge>\n              </div>\n            </div>\n            <CardHeader>\n              <CardTitle className=\"text-lg leading-tight line-clamp-2\">\n                {post.title}\n              </CardTitle>\n              <CardDescription className=\"line-clamp-3\">\n                {post.excerpt}\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between text-sm text-muted-foreground mb-4\">\n                <div className=\"flex items-center gap-1\">\n                  <User className=\"w-4 h-4\" />\n                  {post.author}\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <Clock className=\"w-4 h-4\" />\n                  {post.readTime}min\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">\n                  {post.publishedAt.toLocaleDateString('el-GR')}\n                </span>\n                <Button variant=\"outline\" size=\"sm\" asChild data-testid={`read-post-${post.id}`}>\n                  <Link href={`/blog/${post.slug}`}>\n                    Διαβάστε\n                  </Link>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Empty State */}\n      {filteredPosts.length === 0 && (\n        <Card className=\"text-center py-16\">\n          <CardContent>\n            <Search className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold mb-2\">Δεν βρέθηκαν άρθρα</h3>\n            <p className=\"text-muted-foreground mb-6\">\n              Δοκιμάστε διαφορετικούς όρους αναζήτησης ή κατηγορίες\n            </p>\n            <Button \n              variant=\"outline\" \n              onClick={() => {\n                setSearchTerm(\"\");\n                setSelectedCategory(\"all\");\n              }}\n              data-testid=\"button-clear-filters\"\n            >\n              Καθαρισμός Φίλτρων\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Newsletter Subscription */}\n      <Card className=\"bg-gradient-to-r from-blue-50 to-purple-50\">\n        <CardContent className=\"p-8 text-center\">\n          <h3 className=\"text-2xl font-bold mb-4\">Μείνετε Ενημερωμένοι</h3>\n          <p className=\"text-muted-foreground mb-6\">\n            Λάβετε τα τελευταία άρθρα, συμβουλές και νέα για fractal puzzles απευθείας στο email σας\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 max-w-md mx-auto\">\n            <Input\n              placeholder=\"Το email σας\"\n              type=\"email\"\n              data-testid=\"input-newsletter-email\"\n            />\n            <Button data-testid=\"button-subscribe-newsletter\">\n              Εγγραφή\n            </Button>\n          </div>\n          <p className=\"text-xs text-muted-foreground mt-4\">\n            Δεν θα σπαμάρουμε. Μπορείτε να κάνετε unsubscribe οποτεδήποτε.\n          </p>\n        </CardContent>\n      </Card>\n\n      {/* Popular Tags */}\n      <Card className=\"mt-8\">\n        <CardHeader>\n          <CardTitle>Δημοφιλή Θέματα</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-2\">\n            {['fractals', 'μαθηματικά', 'συμβουλές', 'τεχνική', 'φύση', 'mandelbrot', 'julia', 'diy', 'tutorial', 'επιτυχία'].map(tag => (\n              <Button \n                key={tag}\n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => setSearchTerm(tag)}\n                data-testid={`tag-${tag}`}\n              >\n                #{tag}\n              </Button>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":15223},"client/src/pages/cart.tsx":{"content":"import { useCartStore } from \"@/lib/cart-store\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Minus, Plus, Trash2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\n\nexport default function Cart() {\n  const { toast } = useToast();\n  const { \n    items: cartItems, \n    removeItem: removeCartItem,\n    updateQuantity: updateCartQuantity,\n    getTotalPrice \n  } = useCartStore();\n\n  const updateQuantity = (id: string, newQuantity: number) => {\n    if (newQuantity < 1) return;\n    updateCartQuantity(id, newQuantity);\n  };\n\n  const removeItem = (id: string) => {\n    removeCartItem(id);\n    toast({ title: \"Το προϊόν αφαιρέθηκε από το καλάθι\" });\n  };\n\n  const subtotal = getTotalPrice();\n\n  const shippingFree = subtotal >= 50;\n\n\n\n  if (cartItems.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 py-20\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <Card>\n            <CardContent className=\"text-center py-16\">\n              <h1 className=\"text-2xl font-bold text-neutral mb-4\">Το καλάθι σας είναι άδειο</h1>\n              <p className=\"text-gray-600 mb-8\">Προσθέστε μερικά όμορφα παζλ για να ξεκινήσετε!</p>\n              <Link href=\"/fractal-generator\">\n                <Button \n                  className=\"bg-primary text-white hover:bg-primary/90\"\n                  data-testid=\"button-create-puzzle\"\n                >\n                  Δημιουργήστε Παζλ\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-20\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <h1 className=\"text-3xl font-bold text-neutral mb-8\">Καλάθι Αγορών</h1>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Cart Items */}\n          <div className=\"lg:col-span-2 space-y-4\">\n            {cartItems.map((item) => (\n              <Card key={item.id}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center space-x-4\">\n                    <img \n                      src={item.image || \"https://images.unsplash.com/photo-1606092195730-5d7b9af1efc5?ixlib=rb-4.0.3&auto=format&fit=crop&w=200&h=200\"} \n                      alt=\"Puzzle preview\" \n                      className=\"w-20 h-20 object-cover rounded-lg\"\n                      data-testid={`img-cart-item-${item.id}`}\n                    />\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold text-neutral\">\n                        {item.name}\n                      </h3>\n                      <p className=\"text-sm text-gray-600\">\n                        {item.description}\n                      </p>\n                      <div className=\"flex items-center justify-between mt-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => updateQuantity(item.id, item.quantity - 1)}\n                            data-testid={`button-decrease-${item.id}`}\n                          >\n                            <Minus className=\"w-4 h-4\" />\n                          </Button>\n                          <span className=\"font-semibold px-3\" data-testid={`text-quantity-${item.id}`}>\n                            {item.quantity}\n                          </span>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => updateQuantity(item.id, item.quantity + 1)}\n                            data-testid={`button-increase-${item.id}`}\n                          >\n                            <Plus className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                        <div className=\"flex items-center space-x-4\">\n                          <span className=\"font-semibold text-primary\" data-testid={`text-price-${item.id}`}>\n                            €{(item.price * item.quantity).toFixed(2)}\n                          </span>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => removeItem(item.id)}\n                            data-testid={`button-remove-${item.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Order Summary */}\n          <div>\n            <Card>\n              <CardHeader>\n                <CardTitle>Σύνοψη Παραγγελίας</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Υποσύνολο:</span>\n                  <span className=\"font-semibold\" data-testid=\"text-subtotal\">\n                    €{subtotal.toFixed(2)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Μεταφορικά:</span>\n                  <span className={`font-semibold ${shippingFree ? 'text-secondary' : ''}`} data-testid=\"text-shipping\">\n                    {shippingFree ? \"Δωρεάν\" : \"€5.00\"}\n                  </span>\n                </div>\n                <div className=\"border-t pt-4 flex justify-between text-lg font-bold\">\n                  <span>Σύνολο:</span>\n                  <span className=\"text-primary\" data-testid=\"text-total\">\n                    €{(subtotal + (shippingFree ? 0 : 5)).toFixed(2)}\n                  </span>\n                </div>\n                \n                {!shippingFree && (\n                  <p className=\"text-sm text-gray-600\">\n                    Προσθέστε €{(50 - subtotal).toFixed(2)} για δωρεάν μεταφορικά\n                  </p>\n                )}\n\n                <Button \n                  className=\"w-full bg-accent text-white hover:bg-accent/90 mt-6\"\n                  size=\"lg\"\n                  asChild\n                  data-testid=\"button-checkout\"\n                >\n                  <Link href=\"/checkout\">\n                    Ολοκλήρωση Παραγγελίας\n                  </Link>\n                </Button>\n                \n                <Button \n                  variant=\"outline\" \n                  className=\"w-full\"\n                  asChild\n                  data-testid=\"button-continue-shopping\"\n                >\n                  <Link href=\"/fractal-generator\">\n                    Συνέχεια Αγορών\n                  </Link>\n                </Button>\n\n                <div className=\"text-center text-sm text-gray-500 mt-4\">\n                  <svg className=\"w-4 h-4 inline mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M8 7V3a4 4 0 118 0v4m-4 8.5h.01M10 17h4\" />\n                  </svg>\n                  Ασφαλής πληρωμή\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7841},"client/src/pages/checkout.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport { useCartStore } from \"@/lib/cart-store\";\nimport { CreditCard, Truck, MapPin, User, Mail, Phone } from \"lucide-react\";\n\nconst checkoutSchema = z.object({\n  // Personal Information\n  firstName: z.string().min(2, \"Το όνομα πρέπει να έχει τουλάχιστον 2 χαρακτήρες\"),\n  lastName: z.string().min(2, \"Το επώνυμο πρέπει να έχει τουλάχιστον 2 χαρακτήρες\"),\n  email: z.string().email(\"Εισάγετε έγκυρο email\"),\n  phone: z.string().min(10, \"Εισάγετε έγκυρο τηλέφωνο\"),\n  \n  // Shipping Address\n  address: z.string().min(5, \"Η διεύθυνση πρέπει να έχει τουλάχιστον 5 χαρακτήρες\"),\n  city: z.string().min(2, \"Η πόλη πρέπει να έχει τουλάχιστον 2 χαρακτήρες\"),\n  postalCode: z.string().min(5, \"Ο ταχυδρομικός κώδικας πρέπει να έχει τουλάχιστον 5 χαρακτήρες\"),\n  \n  // Payment Method\n  paymentMethod: z.enum([\"credit_card\", \"paypal\", \"bank_transfer\", \"cash_on_delivery\"]),\n  \n  // Credit Card (conditional)\n  cardNumber: z.string().optional(),\n  cardExpiry: z.string().optional(),\n  cardCvv: z.string().optional(),\n  cardHolderName: z.string().optional(),\n});\n\ntype CheckoutForm = z.infer<typeof checkoutSchema>;\n\nexport default function Checkout() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const { items: cartItems, getTotalPrice, clearCart } = useCartStore();\n\n  const form = useForm<CheckoutForm>({\n    resolver: zodResolver(checkoutSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n      city: \"\",\n      postalCode: \"\",\n      paymentMethod: \"credit_card\",\n      cardNumber: \"\",\n      cardExpiry: \"\",\n      cardCvv: \"\",\n      cardHolderName: \"\",\n    },\n  });\n\n  const watchPaymentMethod = form.watch(\"paymentMethod\");\n\n  const subtotal = getTotalPrice();\n  const shipping = subtotal >= 50 ? 0 : 5.99;\n  const tax = subtotal * 0.24; // Greek VAT 24%\n  const total = subtotal + shipping + tax;\n\n  const submitOrderMutation = useMutation({\n    mutationFn: async (orderData: CheckoutForm) => {\n      return await apiRequest('POST', '/api/orders', {\n        ...orderData,\n        items: cartItems,\n        subtotal,\n        shipping,\n        tax,\n        total,\n      });\n    },\n    onSuccess: (data) => {\n      clearCart();\n      toast({\n        title: \"Παραγγελία Ολοκληρώθηκε!\",\n        description: \"Η παραγγελία σας υποβλήθηκε επιτυχώς.\",\n      });\n      setLocation('/order-confirmation');\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Σφάλμα Παραγγελίας\",\n        description: error.message || \"Δεν ήταν δυνατή η επεξεργασία της παραγγελίας σας.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = async (data: CheckoutForm) => {\n    if (cartItems.length === 0) {\n      toast({\n        title: \"Άδειο Καλάθι\",\n        description: \"Προσθέστε προϊόντα στο καλάθι πριν την ολοκλήρωση της παραγγελίας.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      await submitOrderMutation.mutateAsync(data);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  if (cartItems.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 py-20\">\n        <div className=\"max-w-2xl mx-auto px-4 text-center\">\n          <Card>\n            <CardContent className=\"py-16\">\n              <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Το καλάθι σας είναι άδειο</h1>\n              <p className=\"text-gray-600 mb-8\">Προσθέστε προϊόντα για να προχωρήσετε στην ολοκλήρωση της παραγγελίας.</p>\n              <Button onClick={() => setLocation('/fractal-generator')} data-testid=\"button-back-to-shopping\">\n                Επιστροφή στις Αγορές\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-20\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 mb-8\">Ολοκλήρωση Παραγγελίας</h1>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Checkout Form */}\n          <div className=\"space-y-6\">\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                {/* Personal Information */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <User className=\"w-5 h-5\" />\n                      Προσωπικά Στοιχεία\n                    </CardTitle>\n                    <CardDescription>Συμπληρώστε τα στοιχεία επικοινωνίας σας</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"firstName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Όνομα</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Γιάννης\" data-testid=\"input-first-name\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"lastName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Επώνυμο</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Παπαδόπουλος\" data-testid=\"input-last-name\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <Mail className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                                <Input type=\"email\" placeholder=\"john@example.com\" className=\"pl-10\" data-testid=\"input-email\" {...field} />\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"phone\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Τηλέφωνο</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <Phone className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                                <Input placeholder=\"+30 123 456 7890\" className=\"pl-10\" data-testid=\"input-phone\" {...field} />\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Shipping Address */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <MapPin className=\"w-5 h-5\" />\n                      Διεύθυνση Παράδοσης\n                    </CardTitle>\n                    <CardDescription>Πού θα θέλατε να παραδοθεί η παραγγελία σας;</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"address\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Διεύθυνση</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Οδός Παπάφη 25\" data-testid=\"input-address\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"city\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Πόλη</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"Αθήνα\" data-testid=\"input-city\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"postalCode\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Ταχυδρομικός Κώδικας</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"12345\" data-testid=\"input-postal-code\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Payment Method */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <CreditCard className=\"w-5 h-5\" />\n                      Τρόπος Πληρωμής\n                    </CardTitle>\n                    <CardDescription>Επιλέξτε πώς θέλετε να πληρώσετε</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"paymentMethod\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormControl>\n                            <RadioGroup \n                              onValueChange={field.onChange} \n                              defaultValue={field.value}\n                              className=\"space-y-3\"\n                            >\n                              <div className=\"flex items-center space-x-3 p-3 rounded-lg border\">\n                                <RadioGroupItem value=\"credit_card\" id=\"credit_card\" />\n                                <label htmlFor=\"credit_card\" className=\"flex-1 cursor-pointer\">\n                                  <div className=\"font-medium\">Πιστωτική/Χρεωστική Κάρτα</div>\n                                  <div className=\"text-sm text-muted-foreground\">Visa, Mastercard, American Express</div>\n                                </label>\n                              </div>\n                              <div className=\"flex items-center space-x-3 p-3 rounded-lg border\">\n                                <RadioGroupItem value=\"paypal\" id=\"paypal\" />\n                                <label htmlFor=\"paypal\" className=\"flex-1 cursor-pointer\">\n                                  <div className=\"font-medium\">PayPal</div>\n                                  <div className=\"text-sm text-muted-foreground\">Πληρωμή μέσω PayPal</div>\n                                </label>\n                              </div>\n                              <div className=\"flex items-center space-x-3 p-3 rounded-lg border\">\n                                <RadioGroupItem value=\"bank_transfer\" id=\"bank_transfer\" />\n                                <label htmlFor=\"bank_transfer\" className=\"flex-1 cursor-pointer\">\n                                  <div className=\"font-medium\">Τραπεζική Μεταφορά</div>\n                                  <div className=\"text-sm text-muted-foreground\">Πληρωμή με τραπεζικό έμβασμα</div>\n                                </label>\n                              </div>\n                              <div className=\"flex items-center space-x-3 p-3 rounded-lg border\">\n                                <RadioGroupItem value=\"cash_on_delivery\" id=\"cash_on_delivery\" />\n                                <label htmlFor=\"cash_on_delivery\" className=\"flex-1 cursor-pointer\">\n                                  <div className=\"font-medium\">Αντικαταβολή</div>\n                                  <div className=\"text-sm text-muted-foreground\">Πληρωμή κατά την παράδοση (+€2.00)</div>\n                                </label>\n                              </div>\n                            </RadioGroup>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {/* Credit Card Details */}\n                    {watchPaymentMethod === \"credit_card\" && (\n                      <div className=\"space-y-4 mt-4 p-4 bg-gray-50 rounded-lg\">\n                        <FormField\n                          control={form.control}\n                          name=\"cardHolderName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Όνομα Κατόχου Κάρτας</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Γιάννης Παπαδόπουλος\" data-testid=\"input-card-holder\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"cardNumber\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Αριθμός Κάρτας</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"1234 5678 9012 3456\" data-testid=\"input-card-number\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"cardExpiry\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Ημερομηνία Λήξης</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"MM/YY\" data-testid=\"input-card-expiry\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={form.control}\n                            name=\"cardCvv\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>CVV</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"123\" data-testid=\"input-card-cvv\" {...field} />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  size=\"lg\"\n                  disabled={isSubmitting}\n                  data-testid=\"button-complete-order\"\n                >\n                  {isSubmitting ? \"Επεξεργασία...\" : `Ολοκλήρωση Παραγγελίας - €${total.toFixed(2)}`}\n                </Button>\n              </form>\n            </Form>\n          </div>\n\n          {/* Order Summary */}\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Σύνοψη Παραγγελίας</CardTitle>\n                <CardDescription>{cartItems.length} προϊόν(τα) στο καλάθι</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {cartItems.map((item) => (\n                  <div key={item.id} className=\"flex justify-between items-start\">\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-sm\">\n                        {item.name}\n                      </h4>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {item.description} × {item.quantity}\n                      </p>\n                    </div>\n                    <span className=\"font-medium text-sm\">\n                      €{(item.price * item.quantity).toFixed(2)}\n                    </span>\n                  </div>\n                ))}\n                \n                <Separator />\n                \n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Υποσύνολο:</span>\n                    <span>€{subtotal.toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">Μεταφορικά:</span>\n                    <span>{shipping === 0 ? \"Δωρεάν\" : `€${shipping.toFixed(2)}`}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-muted-foreground\">ΦΠΑ (24%):</span>\n                    <span>€{tax.toFixed(2)}</span>\n                  </div>\n                  {watchPaymentMethod === \"cash_on_delivery\" && (\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Χρέωση Αντικαταβολής:</span>\n                      <span>€2.00</span>\n                    </div>\n                  )}\n                  <Separator />\n                  <div className=\"flex justify-between font-bold text-lg\">\n                    <span>Σύνολο:</span>\n                    <span>€{(total + (watchPaymentMethod === \"cash_on_delivery\" ? 2 : 0)).toFixed(2)}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Truck className=\"w-5 h-5\" />\n                  Πληροφορίες Παράδοσης\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Εκτιμώμενη Παράδοση:</span>\n                  <span className=\"font-medium\">3-7 εργάσιμες ημέρες</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Δωρεάν Μεταφορικά:</span>\n                  <span className=\"font-medium\">Παραγγελίες άνω των €50</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">Παρακολούθηση:</span>\n                  <span className=\"font-medium\">Email ενημερώσεις</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":22550},"client/src/pages/configurator.tsx":{"content":"import ProductConfigurator from \"@/components/product-configurator\";\n\nexport default function Configurator() {\n  return (\n    <div className=\"py-20 bg-white\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-3xl font-bold text-neutral mb-4\">Δημιουργήστε το Παζλ σας</h1>\n          <p className=\"text-xl text-gray-600\">Ακολουθήστε τα απλά βήματα για να φτιάξετε το τέλειο προσωποποιημένο παζλ</p>\n        </div>\n        <ProductConfigurator />\n      </div>\n    </div>\n  );\n}\n","size_bytes":646},"client/src/pages/contact.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  MapPin,\n  Phone,\n  Mail,\n  Clock,\n  MessageSquare,\n  Send,\n  Building,\n  Users,\n  Award,\n  Globe,\n  Calendar,\n  HeadphonesIcon\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Contact() {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    subject: \"\",\n    message: \"\"\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    \n    // Simulate form submission\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    toast({\n      title: \"Μήνυμα εστάλη!\",\n      description: \"Θα επικοινωνήσουμε μαζί σας εντός 24 ωρών.\",\n    });\n    \n    setFormData({ name: \"\", email: \"\", subject: \"\", message: \"\" });\n    setIsSubmitting(false);\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background py-12\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-4\">\n            <span className=\"bg-gradient-to-r from-primary via-secondary to-accent bg-clip-text text-transparent\">\n              Επικοινωνία\n            </span>\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Είμαστε εδώ για να σας βοηθήσουμε! Επικοινωνήστε μαζί μας για οποιαδήποτε ερώτηση \n            σχετικά με τα fractal παζλ μας.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n          {/* Contact Form */}\n          <div className=\"space-y-6\">\n            <Card className=\"glass-morphism\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Send className=\"w-6 h-6 mr-3 text-primary\" />\n                  Στείλτε μας Μήνυμα\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmit} className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"name\">Ονοματεπώνυμο *</Label>\n                      <Input\n                        id=\"name\"\n                        value={formData.name}\n                        onChange={(e) => handleInputChange(\"name\", e.target.value)}\n                        required\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"email\">Email *</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        value={formData.email}\n                        onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                        required\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"subject\">Θέμα *</Label>\n                    <Input\n                      id=\"subject\"\n                      value={formData.subject}\n                      onChange={(e) => handleInputChange(\"subject\", e.target.value)}\n                      placeholder=\"Σύντομη περιγραφή του θέματος\"\n                      required\n                    />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"message\">Μήνυμα *</Label>\n                    <Textarea\n                      id=\"message\"\n                      value={formData.message}\n                      onChange={(e) => handleInputChange(\"message\", e.target.value)}\n                      placeholder=\"Περιγράψτε λεπτομερώς την ερώτησή σας...\"\n                      rows={6}\n                      required\n                    />\n                  </div>\n                  \n                  <Button\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    className=\"w-full bg-gradient-to-r from-primary to-secondary hover:from-primary/90 hover:to-secondary/90\"\n                    size=\"lg\"\n                  >\n                    {isSubmitting ? (\n                      \"Αποστολή...\"\n                    ) : (\n                      <>\n                        <Send className=\"w-5 h-5 mr-2\" />\n                        Αποστολή Μηνύματος\n                      </>\n                    )}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n\n            {/* Quick Contact */}\n            <Card className=\"glass-morphism bg-gradient-to-r from-primary/5 to-secondary/5 border-primary/20\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <HeadphonesIcon className=\"w-6 h-6 mr-3 text-primary\" />\n                  Γρήγορη Επικοινωνία\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <Button variant=\"outline\" className=\"h-auto p-4 justify-start\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Phone className=\"w-6 h-6 text-primary\" />\n                      <div className=\"text-left\">\n                        <p className=\"font-semibold\">Τηλεφωνικά</p>\n                        <p className=\"text-sm text-muted-foreground\">+30 210 123 4567</p>\n                        <Badge variant=\"secondary\" className=\"mt-1 text-xs\">\n                          Δευ-Παρ 9:00-21:00\n                        </Badge>\n                      </div>\n                    </div>\n                  </Button>\n                  \n                  <Button variant=\"outline\" className=\"h-auto p-4 justify-start\">\n                    <div className=\"flex items-center space-x-3\">\n                      <MessageSquare className=\"w-6 h-6 text-secondary\" />\n                      <div className=\"text-left\">\n                        <p className=\"font-semibold\">Live Chat</p>\n                        <p className=\"text-sm text-muted-foreground\">Άμεση βοήθεια</p>\n                        <Badge variant=\"default\" className=\"mt-1 text-xs\">\n                          Online τώρα\n                        </Badge>\n                      </div>\n                    </div>\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Contact Information */}\n          <div className=\"space-y-6\">\n            {/* Office Locations */}\n            <Card className=\"glass-morphism\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Building className=\"w-6 h-6 mr-3 text-secondary\" />\n                  Γραφεία & Εγκαταστάσεις\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Athens Office */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"font-semibold text-lg\">Κεντρικά Γραφεία - Αθήνα</h3>\n                    <Badge variant=\"default\">Κεντρικό</Badge>\n                  </div>\n                  <div className=\"space-y-2 text-sm\">\n                    <p className=\"flex items-center text-muted-foreground\">\n                      <MapPin className=\"w-4 h-4 mr-2\" />\n                      Λεωφόρος Κηφισίας 123, 15124 Μαρούσι\n                    </p>\n                    <p className=\"flex items-center text-muted-foreground\">\n                      <Phone className=\"w-4 h-4 mr-2\" />\n                      +30 210 123 4567\n                    </p>\n                    <p className=\"flex items-center text-muted-foreground\">\n                      <Mail className=\"w-4 h-4 mr-2\" />\n                      athens@fractalcraft.gr\n                    </p>\n                    <p className=\"flex items-center text-muted-foreground\">\n                      <Clock className=\"w-4 h-4 mr-2\" />\n                      Δευτέρα - Παρασκευή: 9:00 - 18:00\n                    </p>\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Thessaloniki Production */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"font-semibold text-lg\">Παραγωγή - Θεσσαλονίκη</h3>\n                    <Badge variant=\"outline\">Παραγωγή</Badge>\n                  </div>\n                  <div className=\"space-y-2 text-sm\">\n                    <p className=\"flex items-center text-muted-foreground\">\n                      <MapPin className=\"w-4 h-4 mr-2\" />\n                      Βιομηχανική Περιοχή Σίνδου, 57022\n                    </p>\n                    <p className=\"flex items-center text-muted-foreground\">\n                      <Phone className=\"w-4 h-4 mr-2\" />\n                      +30 2310 987 654\n                    </p>\n                    <p className=\"flex items-center text-muted-foreground\">\n                      <Mail className=\"w-4 h-4 mr-2\" />\n                      production@fractalcraft.gr\n                    </p>\n                    <p className=\"flex items-center text-muted-foreground\">\n                      <Clock className=\"w-4 h-4 mr-2\" />\n                      Δευτέρα - Παρασκευή: 8:00 - 16:00\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Company Info */}\n            <Card className=\"glass-morphism\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Users className=\"w-6 h-6 mr-3 text-accent\" />\n                  Η Εταιρεία Μας\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4 text-center\">\n                  <div className=\"p-3 bg-accent/10 rounded-lg\">\n                    <Calendar className=\"w-8 h-8 text-accent mx-auto mb-2\" />\n                    <p className=\"font-semibold\">2019</p>\n                    <p className=\"text-sm text-muted-foreground\">Έτος Ίδρυσης</p>\n                  </div>\n                  <div className=\"p-3 bg-accent/10 rounded-lg\">\n                    <Users className=\"w-8 h-8 text-accent mx-auto mb-2\" />\n                    <p className=\"font-semibold\">25+</p>\n                    <p className=\"text-sm text-muted-foreground\">Εργαζόμενοι</p>\n                  </div>\n                  <div className=\"p-3 bg-accent/10 rounded-lg\">\n                    <Globe className=\"w-8 h-8 text-accent mx-auto mb-2\" />\n                    <p className=\"font-semibold\">15</p>\n                    <p className=\"text-sm text-muted-foreground\">Χώρες</p>\n                  </div>\n                  <div className=\"p-3 bg-accent/10 rounded-lg\">\n                    <Award className=\"w-8 h-8 text-accent mx-auto mb-2\" />\n                    <p className=\"font-semibold\">50K+</p>\n                    <p className=\"text-sm text-muted-foreground\">Ευχαριστημένοι Πελάτες</p>\n                  </div>\n                </div>\n                \n                <div className=\"pt-4\">\n                  <h4 className=\"font-semibold mb-2\">Η Ιστορία Μας</h4>\n                  <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                    Από το 2019, η FractalCraft επαναστατεί στον κόσμο των παζλ με την τεχνολογία fractal. \n                    Συνδυάζουμε μαθηματική ακρίβεια με καλλιτεχνική δημιουργικότητα για να φτιάχνουμε \n                    μοναδικά προϊόντα που εμπνέουν και διασκεδάζουν.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Support Hours */}\n            <Card className=\"glass-morphism\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Clock className=\"w-6 h-6 mr-3 text-primary\" />\n                  Ωράριο Υποστήριξης\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span>Δευτέρα - Παρασκευή</span>\n                    <Badge variant=\"secondary\">9:00 - 21:00</Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span>Σάββατο</span>\n                    <Badge variant=\"secondary\">10:00 - 18:00</Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span>Κυριακή</span>\n                    <Badge variant=\"outline\">Κλειστά</Badge>\n                  </div>\n                  <Separator />\n                  <div className=\"flex justify-between items-center\">\n                    <span>Επείγουσα Υποστήριξη</span>\n                    <Badge variant=\"destructive\">24/7</Badge>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Για επείγοντα θέματα: +30 6900 123 456\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Map Section */}\n        <Card className=\"glass-morphism mt-12\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <MapPin className=\"w-6 h-6 mr-3 text-secondary\" />\n              Βρείτε μας\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"aspect-video bg-gradient-to-r from-primary/10 to-secondary/10 rounded-lg flex items-center justify-center\">\n              <div className=\"text-center space-y-3\">\n                <MapPin className=\"w-16 h-16 text-primary mx-auto\" />\n                <h3 className=\"text-xl font-semibold\">Χάρτης Τοποθεσίας</h3>\n                <p className=\"text-muted-foreground max-w-md\">\n                  Επισκεφτείτε τα γραφεία μας στη Μαρούσι για προσωπική εξυπηρέτηση \n                  και να δείτε από κοντά τα fractal παζλ μας\n                </p>\n                <Button className=\"mt-4\">\n                  <MapPin className=\"w-4 h-4 mr-2\" />\n                  Άνοιγμα στο Google Maps\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":16064},"client/src/pages/customer-service.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Phone, \n  Mail, \n  Clock, \n  MapPin, \n  MessageSquare, \n  User,\n  HeadphonesIcon,\n  Calendar,\n  Award,\n  Shield\n} from \"lucide-react\";\n\nexport default function CustomerService() {\n  return (\n    <div className=\"min-h-screen bg-background py-12\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-4\">\n            <span className=\"bg-gradient-to-r from-primary via-secondary to-accent bg-clip-text text-transparent\">\n              Εξυπηρέτηση Πελατών\n            </span>\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Είμαστε εδώ για να σας βοηθήσουμε! Η ομάδα μας είναι έτοιμη να απαντήσει \n            σε κάθε ερώτηση και να λύσει οποιοδήποτε πρόβλημα.\n          </p>\n        </div>\n\n        {/* Contact Methods Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12\">\n          <Card className=\"glass-morphism hover:shadow-lg transition-all duration-300\">\n            <CardHeader className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Phone className=\"w-8 h-8 text-primary-foreground\" />\n              </div>\n              <CardTitle>Τηλεφωνική Υποστήριξη</CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-center space-y-3\">\n              <div className=\"space-y-2\">\n                <p className=\"font-semibold text-lg\">+30 210 123 4567</p>\n                <Badge variant=\"secondary\">Δωρεάν κλήση</Badge>\n              </div>\n              <div className=\"flex items-center justify-center text-sm text-muted-foreground\">\n                <Clock className=\"w-4 h-4 mr-2\" />\n                Δευ-Παρ: 9:00-21:00<br />\n                Σαβ: 10:00-18:00\n              </div>\n              <Button className=\"w-full mt-4\">\n                <Phone className=\"w-4 h-4 mr-2\" />\n                Κλήση Τώρα\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass-morphism hover:shadow-lg transition-all duration-300\">\n            <CardHeader className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-secondary to-accent rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Mail className=\"w-8 h-8 text-primary-foreground\" />\n              </div>\n              <CardTitle>Email Υποστήριξη</CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-center space-y-3\">\n              <div className=\"space-y-2\">\n                <p className=\"font-semibold\">support@fractalcraft.gr</p>\n                <Badge variant=\"outline\">Απάντηση σε 2-4 ώρες</Badge>\n              </div>\n              <div className=\"flex items-center justify-center text-sm text-muted-foreground\">\n                <MessageSquare className=\"w-4 h-4 mr-2\" />\n                24/7 Διαθέσιμο\n              </div>\n              <Button variant=\"outline\" className=\"w-full mt-4\">\n                <Mail className=\"w-4 h-4 mr-2\" />\n                Αποστολή Email\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass-morphism hover:shadow-lg transition-all duration-300\">\n            <CardHeader className=\"text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-accent to-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n                <MessageSquare className=\"w-8 h-8 text-primary-foreground\" />\n              </div>\n              <CardTitle>Live Chat</CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-center space-y-3\">\n              <div className=\"space-y-2\">\n                <p className=\"font-semibold\">Άμεση Συνομιλία</p>\n                <Badge variant=\"default\">Online τώρα</Badge>\n              </div>\n              <div className=\"flex items-center justify-center text-sm text-muted-foreground\">\n                <User className=\"w-4 h-4 mr-2\" />\n                Μέσος χρόνος απάντησης: 2 λεπτά\n              </div>\n              <Button variant=\"secondary\" className=\"w-full mt-4\">\n                <MessageSquare className=\"w-4 h-4 mr-2\" />\n                Ξεκίνησε Chat\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Service Features */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-12\">\n          <Card className=\"glass-morphism\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Award className=\"w-6 h-6 mr-3 text-primary\" />\n                Υψηλή Ποιότητα Εξυπηρέτησης\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-primary rounded-full mt-2\"></div>\n                  <div>\n                    <h4 className=\"font-semibold\">Εκπαιδευμένο Προσωπικό</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Ειδικοί στην τεχνολογία fractal και την παραγωγή παζλ\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-secondary rounded-full mt-2\"></div>\n                  <div>\n                    <h4 className=\"font-semibold\">Γρήγορη Απάντηση</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Απαντάμε άμεσα σε όλες τις επικοινωνίες\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-accent rounded-full mt-2\"></div>\n                  <div>\n                    <h4 className=\"font-semibold\">Προσωπική Φροντίδα</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Κάθε πελάτης είναι μοναδικός για εμάς\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass-morphism\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Shield className=\"w-6 h-6 mr-3 text-secondary\" />\n                Εγγυήσεις & Πολιτικές\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-primary rounded-full mt-2\"></div>\n                  <div>\n                    <h4 className=\"font-semibold\">30 Ημέρες Εγγύηση</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Πλήρης εγγύηση ικανοποίησης σε όλα τα προϊόντα\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-secondary rounded-full mt-2\"></div>\n                  <div>\n                    <h4 className=\"font-semibold\">Δωρεάν Αντικατάσταση</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Αντικαθιστούμε χωρίς χρέωση ελαττωματικά προϊόντα\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-2 h-2 bg-accent rounded-full mt-2\"></div>\n                  <div>\n                    <h4 className=\"font-semibold\">Ασφάλεια Πληρωμών</h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Κρυπτογραφημένες και ασφαλείς συναλλαγές\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Office Information */}\n        <Card className=\"glass-morphism mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <MapPin className=\"w-6 h-6 mr-3 text-accent\" />\n              Τα Γραφεία Μας\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">Κεντρικά Γραφεία - Αθήνα</h3>\n                <div className=\"space-y-2 text-muted-foreground\">\n                  <p className=\"flex items-center\">\n                    <MapPin className=\"w-4 h-4 mr-2\" />\n                    Λεωφόρος Κηφισίας 123, 15124 Μαρούσι\n                  </p>\n                  <p className=\"flex items-center\">\n                    <Clock className=\"w-4 h-4 mr-2\" />\n                    Δευτέρα - Παρασκευή: 9:00 - 18:00\n                  </p>\n                  <p className=\"flex items-center\">\n                    <Phone className=\"w-4 h-4 mr-2\" />\n                    +30 210 123 4567\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">Παραγωγή - Θεσσαλονίκη</h3>\n                <div className=\"space-y-2 text-muted-foreground\">\n                  <p className=\"flex items-center\">\n                    <MapPin className=\"w-4 h-4 mr-2\" />\n                    Βιομηχανική Περιοχή Σίνδου, 57022\n                  </p>\n                  <p className=\"flex items-center\">\n                    <Clock className=\"w-4 h-4 mr-2\" />\n                    Δευτέρα - Παρασκευή: 8:00 - 16:00\n                  </p>\n                  <p className=\"flex items-center\">\n                    <Phone className=\"w-4 h-4 mr-2\" />\n                    +30 2310 987 654\n                  </p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Emergency Contact */}\n        <Card className=\"glass-morphism bg-gradient-to-r from-primary/5 to-secondary/5 border-primary/20\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center\">\n                  <HeadphonesIcon className=\"w-6 h-6 text-primary-foreground\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-lg\">Επείγουσα Υποστήριξη</h3>\n                  <p className=\"text-muted-foreground\">\n                    Για επείγοντα προβλήματα με παραγγελίες σε εξέλιξη\n                  </p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"font-bold text-lg\">+30 6900 123 456</p>\n                <Badge variant=\"destructive\">24/7 Διαθέσιμο</Badge>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":12341},"client/src/pages/faq.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/components/ui/collapsible\";\nimport { \n  ChevronDown,\n  Search,\n  HelpCircle,\n  Package,\n  CreditCard,\n  Truck,\n  Settings,\n  Zap,\n  Shield\n} from \"lucide-react\";\n\nconst faqCategories = [\n  {\n    icon: Package,\n    title: \"Προϊόντα & Παραγγελίες\",\n    color: \"from-primary to-secondary\",\n    questions: [\n      {\n        question: \"Τι είναι τα fractal παζλ;\",\n        answer: \"Τα fractal παζλ είναι μοναδικά παζλ που δημιουργούνται με μαθηματικούς αλγόριθμους fractal. Κάθε κομμάτι έχει ένα μοναδικό, γεωμετρικό σχήμα που δημιουργείται αυτόματα, παράγοντας απείρως πολύπλοκα και όμορφα σχέδια που δεν μπορούν να αναπαραχθούν με παραδοσιακές μεθόδους.\"\n      },\n      {\n        question: \"Πόσο καιρό χρειάζεται για να φτιαχτεί ένα παζλ;\",\n        answer: \"Η παραγωγή των fractal παζλ διαρκεί 3-7 εργάσιμες ημέρες ανάλογα με το υλικό και το μέγεθος. Τα παζλ σε χαρτί είναι έτοιμα σε 3-4 ημέρες, ενώ τα ξύλινα και ακρυλικά χρειάζονται 5-7 ημέρες λόγω της ειδικής επεξεργασίας.\"\n      },\n      {\n        question: \"Μπορώ να διαλέξω τον αριθμό των κομματιών;\",\n        answer: \"Όχι, ο αριθμός των κομματιών καθορίζεται αυτόματα από τον fractal αλγόριθμο βάσει της δυσκολίας που επιλέγετε. Αυτό εξασφαλίζει ότι κάθε κομμάτι έχει το σωστό μέγεθος και πολυπλοκότητα για τη βέλτιστη εμπειρία παιχνιδιού.\"\n      },\n      {\n        question: \"Ποια είναι τα διαθέσιμα μεγέθη;\",\n        answer: \"Προσφέρουμε 5 μεγέθη: Μικρό (20x15cm), Μεσαίο (30x22cm), Μεγάλο (40x30cm), Extra Μεγάλο (50x37cm), και Jumbo (60x45cm). Κάθε μέγεθος έχει διαφορετική τιμή και χρόνο παραγωγής.\"\n      }\n    ]\n  },\n  {\n    icon: Zap,\n    title: \"Γεννήτρια Fractal\",\n    color: \"from-secondary to-accent\",\n    questions: [\n      {\n        question: \"Πώς λειτουργεί η γεννήτρια fractal;\",\n        answer: \"Η γεννήτρια μας χρησιμοποιεί προηγμένους αλγόριθμους για να δημιουργήσει μοναδικά σχήματα κομματιών. Ανεβάζετε την εικόνα σας, επιλέγετε σχήμα, μέγεθος, seed και δυσκολία, και ο αλγόριθμος δημιουργεί αυτόματα τα fractal κομμάτια που ταιριάζουν τέλεια μεταξύ τους.\"\n      },\n      {\n        question: \"Τι σημαίνει το 'seed' στη γεννήτρια;\",\n        answer: \"Το seed είναι ένας αριθμός που καθορίζει τη μοναδικότητα του σχεδίου. Ο ίδιος seed με τις ίδιες ρυθμίσεις θα δώσει πάντα το ίδιο αποτέλεσμα. Αλλάζοντας το seed, παίρνετε εντελώς διαφορετικά σχέδια fractal.\"\n      },\n      {\n        question: \"Ποιες είναι οι διαφορές στη δυσκολία;\",\n        answer: \"Η δυσκολία καθορίζει το μέγεθος των κομματιών: Πολύ Εύκολο (μεγάλα κομμάτια), Εύκολο, Κανονικό, Δύσκολο, και Πολύ Δύσκολο (πολύ μικρά κομμάτια). Μεγαλύτερη δυσκολία σημαίνει περισσότερα και μικρότερα κομμάτια.\"\n      },\n      {\n        question: \"Μπορώ να προεπισκοπήσω το παζλ πριν το παραγγείλω;\",\n        answer: \"Ναι! Μετά τη δημιουργία, βλέπετε μια πλήρη προεπισκόπηση με τα πραγματικά κοψίματα του παζλ. Μπορείτε να δείτε ακριβώς πώς θα μοιάζει το τελικό προϊόν και να κάνετε αλλαγές αν χρειαστεί.\"\n      }\n    ]\n  },\n  {\n    icon: CreditCard,\n    title: \"Πληρωμές & Τιμές\",\n    color: \"from-accent to-primary\",\n    questions: [\n      {\n        question: \"Ποιοι τρόποι πληρωμής δέχονται;\",\n        answer: \"Δεχόμαστε όλες τις κύριες πιστωτικές κάρτες (Visa, Mastercard, American Express), PayPal, τραπεζικό έμβασμα, και πληρωμή με αντικαταβολή για παραγγελίες εντός Ελλάδας.\"\n      },\n      {\n        question: \"Πώς υπολογίζεται η τιμή;\",\n        answer: \"Η τιμή εξαρτάται από το υλικό (χαρτί €15-35, ξύλο €25-65, ακρυλικό €35-85) και το μέγεθος. Ο αριθμός των κομματιών δεν επηρεάζει την τιμή καθώς καθορίζεται αυτόματα από τον αλγόριθμο.\"\n      },\n      {\n        question: \"Υπάρχουν εκπτώσεις για πολλαπλές παραγγελίες;\",\n        answer: \"Ναι! Για 3+ παζλ: 10% έκπτωση, για 5+ παζλ: 15% έκπτωση, για 10+ παζλ: 20% έκπτωση. Οι εκπτώσεις εφαρμόζονται αυτόματα στο καλάθι.\"\n      },\n      {\n        question: \"Πότε χρεώνεται η κάρτα μου;\",\n        answer: \"Η χρέωση γίνεται κατά την επιβεβαίωση της παραγγελίας. Για custom παραγγελίες, χρεώνουμε 50% προκαταβολή και το υπόλοιπο πριν την αποστολή.\"\n      }\n    ]\n  },\n  {\n    icon: Truck,\n    title: \"Αποστολές\",\n    color: \"from-primary to-accent\",\n    questions: [\n      {\n        question: \"Πόσο κοστίζει η αποστολή;\",\n        answer: \"Αποστολή εντός Ελλάδας: €4.90 (δωρεάν για παραγγελίες άνω των €50). Κύπρος: €12. Ευρώπη: €15-25. Υπεύθυνη αποστολή με ασφάλιση: +€3.\"\n      },\n      {\n        question: \"Σε πόσο καιρό φτάνει η παραγγελία μου;\",\n        answer: \"Εντός Ελλάδας: 1-2 εργάσιμες ημέρες. Κύπρος: 3-5 ημέρες. Ευρώπη: 5-10 ημέρες. Ο χρόνος παραγωγής (3-7 ημέρες) προστίθεται στον χρόνο αποστολής.\"\n      },\n      {\n        question: \"Μπορώ να παρακολουθήσω την παραγγελία μου;\",\n        answer: \"Ναι! Λαμβάνετε tracking number μόλις σταλεί η παραγγελία. Μπορείτε να την παρακολουθείτε στη σελίδα 'Παρακολούθηση Παραγγελίας' με τον κωδικό σας.\"\n      },\n      {\n        question: \"Στέλνετε στο εξωτερικό;\",\n        answer: \"Στέλνουμε σε όλη την Ευρώπη και επιλεγμένες χώρες παγκοσμίως. Οι χρόνοι και κόστη αποστολής διαφέρουν ανά προορισμό. Επικοινωνήστε μαζί μας για συγκεκριμένους προορισμούς.\"\n      }\n    ]\n  },\n  {\n    icon: Shield,\n    title: \"Επιστροφές & Εγγυήσεις\",\n    color: \"from-secondary to-primary\",\n    questions: [\n      {\n        question: \"Ποια είναι η πολιτική επιστροφών;\",\n        answer: \"30 ημέρες πλήρης εγγύηση ικανοποίησης. Αν δεν είστε ευχαριστημένοι, επιστρέφουμε πλήρως τα χρήματά σας. Τα custom παζλ από προσωπικές φωτογραφίες δεν επιστρέφονται εκτός αν υπάρχει ελάττωμα.\"\n      },\n      {\n        question: \"Τι γίνεται αν το παζλ φτάσει σπασμένο;\",\n        answer: \"Αντικαθιστούμε άμεσα χωρίς επιπλέον χρέωση οποιοδήποτε προϊόν φτάσει ελαττωματικό ή σπασμένο. Αρκεί να μας στείλετε φωτογραφίες εντός 48 ωρών από την παραλαβή.\"\n      },\n      {\n        question: \"Πώς κάνω επιστροφή;\",\n        answer: \"Επικοινωνήστε μαζί μας στο support@fractalcraft.gr ή τηλεφωνικά. Θα σας στείλουμε prepaid ετικέτα επιστροφής. Τα χρήματα επιστρέφονται εντός 5-10 εργασίμων ημερών μετά την παραλαβή.\"\n      },\n      {\n        question: \"Υπάρχει εγγύηση ποιότητας;\",\n        answer: \"Ναι! Όλα τα προϊόντα μας έχουν εγγύηση ποιότητας. Χρησιμοποιούμε premium υλικά και προηγμένη τεχνολογία κοπής laser για τέλεια αποτελέσματα.\"\n      }\n    ]\n  },\n  {\n    icon: Settings,\n    title: \"Τεχνικές Ερωτήσεις\",\n    color: \"from-accent to-secondary\",\n    questions: [\n      {\n        question: \"Τι ανάλυση πρέπει να έχει η φωτογραφία μου;\",\n        answer: \"Συνιστούμε τουλάχιστον 1200x900 pixels για καλή ποιότητα. Για καλύτερα αποτελέσματα: 2400x1800+ pixels. Αποδεκτές μορφές: JPG, PNG, PDF έως 10MB.\"\n      },\n      {\n        question: \"Μπορώ να χρησιμοποιήσω οποιαδήποτε φωτογραφία;\",\n        answer: \"Ναι, αλλά οι καθαρές, υψηλής αντίθεσης φωτογραφίες δίνουν καλύτερα αποτελέσματα. Αποφύγετε θολές ή πολύ σκοτεινές εικόνες. Η ομάδα μας μπορεί να σας συμβουλεύσει για βελτιστοποίηση.\"\n      },\n      {\n        question: \"Τι είναι τα σχήματα στη γεννήτρια;\",\n        answer: \"Διαφορετικά fractal patterns: Κλασικό (παραδοσιακά σχήματα), Οργανικό (φυσικές καμπύλες), Γεωμετρικό (αιχμηρές γωνίες), Στρογγυλό (μαλακές καμπύλες). Κάθε σχήμα δίνει διαφορετική αισθητική στο παζλ.\"\n      },\n      {\n        question: \"Μπορώ να αποθηκεύσω το σχέδιό μου;\",\n        answer: \"Ναι! Μπορείτε να κατεβάσετε το fractal design ως εικόνα υψηλής ανάλυσης ή να το αποθηκεύσετε στο προφίλ σας για μελλοντική χρήση ή τροποποίηση.\"\n      }\n    ]\n  }\n];\n\nexport default function FAQ() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [openSections, setOpenSections] = useState<string[]>([\"Προϊόντα & Παραγγελίες\"]);\n\n  const filteredCategories = faqCategories.map(category => ({\n    ...category,\n    questions: category.questions.filter(\n      q => \n        q.question.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        q.answer.toLowerCase().includes(searchTerm.toLowerCase())\n    )\n  })).filter(category => category.questions.length > 0);\n\n  const toggleSection = (title: string) => {\n    setOpenSections(prev => \n      prev.includes(title) \n        ? prev.filter(t => t !== title)\n        : [...prev, title]\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background py-12\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-4\">\n            <span className=\"bg-gradient-to-r from-primary via-secondary to-accent bg-clip-text text-transparent\">\n              Συχνές Ερωτήσεις\n            </span>\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto mb-8\">\n            Βρείτε γρήγορα απαντήσεις στις πιο συχνές ερωτήσεις για τα fractal παζλ\n          </p>\n          \n          {/* Search */}\n          <div className=\"relative max-w-md mx-auto\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-5 h-5\" />\n            <Input\n              placeholder=\"Αναζητήστε ερωτήσεις...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n        </div>\n\n        {/* FAQ Categories */}\n        <div className=\"space-y-6\">\n          {filteredCategories.map((category) => {\n            const IconComponent = category.icon;\n            const isOpen = openSections.includes(category.title);\n            \n            return (\n              <Card key={category.title} className=\"glass-morphism overflow-hidden\">\n                <Collapsible\n                  open={isOpen}\n                  onOpenChange={() => toggleSection(category.title)}\n                >\n                  <CollapsibleTrigger asChild>\n                    <CardHeader className=\"cursor-pointer hover:bg-accent/5 transition-colors\">\n                      <CardTitle className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center\">\n                          <div className={`w-10 h-10 bg-gradient-to-r ${category.color} rounded-lg flex items-center justify-center mr-4`}>\n                            <IconComponent className=\"w-5 h-5 text-white\" />\n                          </div>\n                          <span>{category.title}</span>\n                          <Badge variant=\"secondary\" className=\"ml-3\">\n                            {category.questions.length} ερωτήσεις\n                          </Badge>\n                        </div>\n                        <ChevronDown className={`w-5 h-5 transition-transform ${isOpen ? 'rotate-180' : ''}`} />\n                      </CardTitle>\n                    </CardHeader>\n                  </CollapsibleTrigger>\n                  \n                  <CollapsibleContent>\n                    <CardContent className=\"pt-0\">\n                      <div className=\"space-y-4\">\n                        {category.questions.map((item, index) => (\n                          <Card key={index} className=\"border border-border/50 hover:border-primary/20 transition-colors\">\n                            <CardContent className=\"p-4\">\n                              <div className=\"space-y-3\">\n                                <h4 className=\"font-semibold flex items-start\">\n                                  <HelpCircle className=\"w-5 h-5 text-primary mr-2 mt-0.5 flex-shrink-0\" />\n                                  {item.question}\n                                </h4>\n                                <p className=\"text-muted-foreground leading-relaxed ml-7\">\n                                  {item.answer}\n                                </p>\n                              </div>\n                            </CardContent>\n                          </Card>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </CollapsibleContent>\n                </Collapsible>\n              </Card>\n            );\n          })}\n        </div>\n\n        {filteredCategories.length === 0 && searchTerm && (\n          <Card className=\"glass-morphism text-center p-12\">\n            <HelpCircle className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold mb-2\">Δεν βρέθηκαν αποτελέσματα</h3>\n            <p className=\"text-muted-foreground mb-6\">\n              Δε βρήκαμε ερωτήσεις που να ταιριάζουν με την αναζήτησή σας.\n            </p>\n            <Button onClick={() => setSearchTerm(\"\")}>\n              Καθαρισμός αναζήτησης\n            </Button>\n          </Card>\n        )}\n\n        {/* Contact CTA */}\n        <Card className=\"glass-morphism mt-12 bg-gradient-to-r from-primary/5 to-secondary/5 border-primary/20\">\n          <CardContent className=\"p-8 text-center\">\n            <h3 className=\"text-2xl font-semibold mb-4\">\n              Δεν βρήκατε την απάντηση που ψάχνατε;\n            </h3>\n            <p className=\"text-muted-foreground mb-6\">\n              Η ομάδα εξυπηρέτησης πελατών μας είναι εδώ για να σας βοηθήσει!\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button size=\"lg\">\n                Επικοινωνία με Υποστήριξη\n              </Button>\n              <Button variant=\"outline\" size=\"lg\">\n                Live Chat\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":18034},"client/src/pages/fractal-generator.tsx":{"content":"import FractalGeneratorComponent from \"@/components/fractal-generator\";\n\nexport default function FractalGeneratorPage() {\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-20\">\n      <FractalGeneratorComponent />\n    </div>\n  );\n}","size_bytes":238},"client/src/pages/home.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Sparkles, Zap, Layers, Upload, Palette, Cpu, Truck } from \"lucide-react\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen fractal-bg\">\n      {/* Fractal decorative elements */}\n      <div className=\"fractal-shape w-32 h-32 top-20 left-10 opacity-30\"></div>\n      <div className=\"fractal-shape w-24 h-24 top-40 right-20 opacity-20\"></div>\n      <div className=\"fractal-shape w-16 h-16 bottom-40 left-1/4 opacity-25\"></div>\n      {/* Hero Section */}\n      <section className=\"relative py-20 overflow-hidden\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-16 items-center\">\n            <div className=\"space-y-8\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-3 mb-4\">\n                  <div className=\"fractal-glow w-12 h-12 bg-gradient-to-br from-primary to-secondary rounded-xl flex items-center justify-center\">\n                    <Sparkles className=\"w-6 h-6 text-primary-foreground\" />\n                  </div>\n                  <span className=\"text-primary font-medium\">Τεχνολογία Fractal</span>\n                </div>\n                <h1 className=\"text-5xl md:text-7xl font-bold leading-tight\">\n                  <span className=\"bg-gradient-to-r from-primary via-secondary to-accent bg-clip-text text-transparent\">\n                    Φράκταλ Παζλ\n                  </span>\n                  <br />\n                  <span className=\"text-neutral\">\n                    Νέας Γενιάς\n                  </span>\n                </h1>\n              </div>\n              <p className=\"text-xl text-muted-foreground leading-relaxed\">\n                Ανακαλύψτε τη μαγεία των μαθηματικών fractal σε μοναδικά παζλ. \n                Δημιουργήστε απείρως πολύπλοκα σχέδια με αλγόριθμους που παράγουν \n                εκπληκτικά γεωμετρικά μοτίβα.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-6\">\n                <Link href=\"/fractal-generator\">\n                  <Button \n                    size=\"lg\" \n                    className=\"bg-gradient-to-r from-primary to-secondary hover:from-primary/90 hover:to-secondary/90 text-primary-foreground px-8 py-4 text-lg fractal-glow\"\n                    data-testid=\"button-create-fractal\"\n                  >\n                    <Zap className=\"w-5 h-5 mr-2\" />\n                    Δημιουργία Fractal\n                  </Button>\n                </Link>\n                <Link href=\"/fractal-generator\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"lg\" \n                    className=\"border-2 border-primary/30 text-primary hover:bg-primary/10 px-8 py-4 text-lg glass-morphism\"\n                    data-testid=\"button-upload-photo\"\n                  >\n                    <Layers className=\"w-5 h-5 mr-2\" />\n                    Ανέβασμα Φωτό\n                  </Button>\n                </Link>\n              </div>\n            </div>\n            <div className=\"relative\">\n              <div className=\"fractal-element\">\n                <div className=\"relative w-full h-96 rounded-3xl overflow-hidden glass-morphism border border-primary/20\">\n                  <div className=\"absolute inset-0 bg-gradient-to-br from-primary/20 via-secondary/15 to-accent/10\"></div>\n                  <div className=\"absolute inset-4 flex items-center justify-center\">\n                    <svg className=\"w-full h-full animated-fractal\" viewBox=\"0 0 400 400\" xmlns=\"http://www.w3.org/2000/svg\">\n                      {/* Animated Fractal Puzzle Pattern */}\n                      <defs>\n                        <linearGradient id=\"animatedGrad1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n                          <stop offset=\"0%\" stopColor=\"hsl(280, 85%, 65%)\" stopOpacity=\"0.8\">\n                            <animate attributeName=\"stop-color\" values=\"hsl(280, 85%, 65%);hsl(320, 75%, 55%);hsl(200, 90%, 55%);hsl(280, 85%, 65%)\" dur=\"6s\" repeatCount=\"indefinite\" />\n                          </stop>\n                          <stop offset=\"50%\" stopColor=\"hsl(320, 75%, 55%)\" stopOpacity=\"0.9\">\n                            <animate attributeName=\"stop-color\" values=\"hsl(320, 75%, 55%);hsl(200, 90%, 55%);hsl(280, 85%, 65%);hsl(320, 75%, 55%)\" dur=\"6s\" repeatCount=\"indefinite\" />\n                          </stop>\n                          <stop offset=\"100%\" stopColor=\"hsl(200, 90%, 55%)\" stopOpacity=\"0.7\">\n                            <animate attributeName=\"stop-color\" values=\"hsl(200, 90%, 55%);hsl(280, 85%, 65%);hsl(320, 75%, 55%);hsl(200, 90%, 55%)\" dur=\"6s\" repeatCount=\"indefinite\" />\n                          </stop>\n                        </linearGradient>\n                        \n                        <linearGradient id=\"animatedGrad2\" x1=\"100%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                          <stop offset=\"0%\" stopColor=\"hsl(320, 75%, 55%)\" stopOpacity=\"0.6\">\n                            <animate attributeName=\"stop-color\" values=\"hsl(320, 75%, 55%);hsl(280, 85%, 65%);hsl(200, 90%, 55%);hsl(320, 75%, 55%)\" dur=\"8s\" repeatCount=\"indefinite\" />\n                          </stop>\n                          <stop offset=\"100%\" stopColor=\"hsl(200, 90%, 55%)\" stopOpacity=\"0.8\">\n                            <animate attributeName=\"stop-color\" values=\"hsl(200, 90%, 55%);hsl(320, 75%, 55%);hsl(280, 85%, 65%);hsl(200, 90%, 55%)\" dur=\"8s\" repeatCount=\"indefinite\" />\n                          </stop>\n                        </linearGradient>\n                      </defs>\n                      \n                      {/* Animated Puzzle Pieces */}\n                      <g className=\"puzzle-group-1\">\n                        <path\n                          d=\"M80,80 L 100 60 L 120 40 L 140 60 L 160 80 L 180 100 L 200 120 L 220 100 L 240 80 L 260 60 L 280 40 L 300 60 L 320 80 L 300 100 L 280 120 L 260 100 L 240 120 L 220 140 L 200 160 L 180 140 L 160 120 L 140 100 L 120 120 L 100 100 L 80 80 Z\"\n                          fill=\"url(#animatedGrad1)\"\n                          stroke=\"hsl(var(--primary))\"\n                          strokeWidth=\"1.5\"\n                          opacity=\"0.7\"\n                        >\n                          <animateTransform\n                            attributeName=\"transform\"\n                            type=\"rotate\"\n                            values=\"0 200 200;360 200 200\"\n                            dur=\"20s\"\n                            repeatCount=\"indefinite\"\n                          />\n                        </path>\n                        \n                        <path\n                          d=\"M50,150 L 70 130 L 90 110 L 110 130 L 130 150 L 150 170 L 170 190 L 190 170 L 210 150 L 230 130 L 250 110 L 270 130 L 290 150 L 270 170 L 250 190 L 230 170 L 210 190 L 190 210 L 170 230 L 150 210 L 130 190 L 110 170 L 90 190 L 70 170 L 50 150 Z\"\n                          fill=\"url(#animatedGrad2)\"\n                          stroke=\"hsl(var(--secondary))\"\n                          strokeWidth=\"1.5\"\n                          opacity=\"0.6\"\n                        >\n                          <animateTransform\n                            attributeName=\"transform\"\n                            type=\"rotate\"\n                            values=\"360 200 200;0 200 200\"\n                            dur=\"15s\"\n                            repeatCount=\"indefinite\"\n                          />\n                        </path>\n                      </g>\n                      \n                      <g className=\"puzzle-group-2\">\n                        <path\n                          d=\"M120,250 L 140 230 L 160 210 L 180 230 L 200 250 L 220 270 L 240 290 L 260 270 L 280 250 L 300 230 L 320 210 L 340 230 L 360 250 L 340 270 L 320 290 L 300 270 L 280 290 L 260 310 L 240 330 L 220 310 L 200 290 L 180 270 L 160 290 L 140 270 L 120 250 Z\"\n                          fill=\"url(#animatedGrad1)\"\n                          stroke=\"hsl(var(--accent))\"\n                          strokeWidth=\"1.5\"\n                          opacity=\"0.5\"\n                        >\n                          <animateTransform\n                            attributeName=\"transform\"\n                            type=\"rotate\"\n                            values=\"0 200 200;-360 200 200\"\n                            dur=\"25s\"\n                            repeatCount=\"indefinite\"\n                          />\n                        </path>\n                        \n                        <circle cx=\"200\" cy=\"200\" r=\"15\" fill=\"url(#animatedGrad2)\" opacity=\"0.8\">\n                          <animate attributeName=\"r\" values=\"15;25;15\" dur=\"4s\" repeatCount=\"indefinite\" />\n                          <animate attributeName=\"opacity\" values=\"0.8;0.4;0.8\" dur=\"4s\" repeatCount=\"indefinite\" />\n                        </circle>\n                      </g>\n                      \n                      {/* Floating puzzle pieces */}\n                      {Array.from({ length: 6 }, (_, i) => (\n                        <g key={i}>\n                          <path\n                            d={`M${50 + i * 60},${50 + i * 10} L ${70 + i * 60} ${40 + i * 10} L ${90 + i * 60} ${60 + i * 10} L ${70 + i * 60} ${80 + i * 10} L ${50 + i * 60} ${60 + i * 10} Z`}\n                            fill=\"url(#animatedGrad1)\"\n                            opacity=\"0.4\"\n                          >\n                            <animateTransform\n                              attributeName=\"transform\"\n                              type=\"translate\"\n                              values={`0,0;${10 - i * 2},${-5 + i};0,0`}\n                              dur={`${3 + i}s`}\n                              repeatCount=\"indefinite\"\n                            />\n                          </path>\n                        </g>\n                      ))}\n                    </svg>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* How Fractal Puzzles Work */}\n      <section className=\"py-20 relative overflow-hidden\">\n        <div className=\"fractal-shape w-40 h-40 top-10 right-10 opacity-20\"></div>\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-neutral mb-4\">\n              <span className=\"bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n                Fractal Μαγεία\n              </span>\n            </h2>\n            <p className=\"text-xl text-muted-foreground\">Τεχνολογία αιχμής για μοναδικά γεωμετρικά παζλ</p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"text-center group\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-primary to-secondary rounded-2xl fractal-glow flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform\">\n                <Cpu className=\"w-8 h-8 text-primary-foreground\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-neutral mb-3\">1. Αλγόριθμος Fractal</h3>\n              <p className=\"text-muted-foreground\">Εξελιγμένοι μαθηματικοί αλγόριθμοι δημιουργούν μοναδικά γεωμετρικά μοτίβα</p>\n            </div>\n\n            <div className=\"text-center group\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-accent to-primary rounded-2xl fractal-glow flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform\">\n                <Palette className=\"w-8 h-8 text-primary-foreground\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-neutral mb-3\">2. Δημιουργία</h3>\n              <p className=\"text-muted-foreground\">Παραγωγή υψηλής ανάλυσης σε ξύλο, ακρυλικό ή premium χαρτί</p>\n            </div>\n\n            <div className=\"text-center group\">\n              <div className=\"w-20 h-20 bg-gradient-to-br from-primary to-secondary rounded-2xl fractal-glow flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform\">\n                <Truck className=\"w-8 h-8 text-primary-foreground\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-neutral mb-3\">3. Παράδοση</h3>\n              <p className=\"text-muted-foreground\">Ασφαλής συσκευασία και γρήγορη παράδοση σε όλη την Ελλάδα</p>\n            </div>\n          </div>\n        </div>\n      </section>\n      {/* Fractal Features */}\n      <section className=\"py-20 relative overflow-hidden\">\n        <div className=\"fractal-shape w-40 h-40 top-10 right-10 opacity-20\"></div>\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <Card className=\"glass-morphism border border-primary/20 shadow-2xl\">\n            <CardContent className=\"p-12\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n                <div className=\"space-y-8\">\n                  <h2 className=\"text-4xl font-bold text-neutral mb-6\">\n                    Γιατί <span className=\"bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">FractalCraft</span>?\n                  </h2>\n                  <div className=\"space-y-6\">\n                    <div className=\"flex items-start group\">\n                      <div className=\"fractal-glow w-12 h-12 bg-gradient-to-br from-primary to-secondary rounded-xl flex items-center justify-center mr-4 mt-1 group-hover:scale-110 transition-transform\">\n                        <Sparkles className=\"w-6 h-6 text-primary-foreground\" />\n                      </div>\n                      <div>\n                        <h3 className=\"font-semibold text-neutral text-lg mb-2\">Μοναδικότητα</h3>\n                        <p className=\"text-muted-foreground\">Κάθε fractal είναι μαθηματικά μοναδικό - δεν υπάρχουν δύο ίδια</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-start group\">\n                      <div className=\"fractal-glow w-12 h-12 bg-gradient-to-br from-accent to-primary rounded-xl flex items-center justify-center mr-4 mt-1 group-hover:scale-110 transition-transform\">\n                        <Layers className=\"w-6 h-6 text-primary-foreground\" />\n                      </div>\n                      <div>\n                        \n                        <p className=\"text-muted-foreground\">Ξύλο, ακρυλικό και χαρτί museum-quality για διαρκή αποτελέσματα</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"relative\">\n                  <div className=\"fractal-element\">\n                    <div className=\"relative w-full h-80 rounded-3xl overflow-hidden glass-morphism border border-primary/30\">\n                      <div className=\"absolute inset-0 bg-gradient-to-br from-primary/10 via-secondary/5 to-accent/10\"></div>\n                      <div className=\"absolute inset-4 flex items-center justify-center\">\n                        <svg className=\"w-full h-full fractal-pulse\" viewBox=\"0 0 300 300\" xmlns=\"http://www.w3.org/2000/svg\">\n                          <defs>\n                            <radialGradient id=\"fractalRadial\" cx=\"50%\" cy=\"50%\" r=\"50%\">\n                              <stop offset=\"0%\" stopColor=\"hsl(280, 85%, 65%)\" />\n                              <stop offset=\"50%\" stopColor=\"hsl(320, 75%, 55%)\" />\n                              <stop offset=\"100%\" stopColor=\"hsl(200, 90%, 55%)\" />\n                            </radialGradient>\n                          </defs>\n                          \n                          <g transform=\"translate(150,150)\">\n                            {/* Spiral fractal pattern */}\n                            {Array.from({ length: 12 }, (_, i) => (\n                              <g key={i} transform={`rotate(${i * 30}) scale(${1 - i * 0.08})`}>\n                                <path\n                                  d=\"M0,0 Q30,20 60,0 Q30,-20 0,0 Q-30,20 -60,0 Q-30,-20 0,0\"\n                                  fill=\"none\"\n                                  stroke=\"url(#fractalRadial)\"\n                                  strokeWidth=\"2\"\n                                  opacity={0.8 - i * 0.05}\n                                />\n                                <circle cx=\"30\" cy=\"0\" r=\"4\" fill=\"url(#fractalRadial)\" opacity={0.7 - i * 0.04} />\n                                <circle cx=\"-30\" cy=\"0\" r=\"4\" fill=\"url(#fractalRadial)\" opacity={0.7 - i * 0.04} />\n                              </g>\n                            ))}\n                          </g>\n                        </svg>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n      {/* CTA Section */}\n      <section className=\"py-20 relative overflow-hidden\">\n        <div className=\"fractal-shape w-20 h-20 top-20 left-20 opacity-30\"></div>\n        <div className=\"fractal-shape w-32 h-32 bottom-20 right-20 opacity-25\"></div>\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <div className=\"space-y-8\">\n            <h2 className=\"text-5xl font-bold\">\n              <span className=\"bg-gradient-to-r from-primary via-secondary to-accent bg-clip-text text-transparent\">\n                Ξεκινήστε Τώρα\n              </span>\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Δημιουργήστε το δικό σας μοναδικό fractal παζλ και ανακαλύψτε τη μαγεία \n              των μαθηματικών μοτίβων σε κάθε κομμάτι.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-6 justify-center\">\n              <Link href=\"/fractal-generator\">\n                <Button \n                  size=\"lg\" \n                  className=\"bg-gradient-to-r from-primary to-secondary hover:from-primary/90 hover:to-secondary/90 text-primary-foreground px-12 py-6 text-xl fractal-glow\"\n                  data-testid=\"button-start-creating\"\n                >\n                  <Sparkles className=\"w-6 h-6 mr-3\" />\n                  Δημιουργία Fractal\n                </Button>\n              </Link>\n              <Link href=\"/puzzle-generator\">\n                <Button \n                  variant=\"outline\" \n                  size=\"lg\" \n                  className=\"border-2 border-primary/30 text-primary hover:bg-primary/10 px-12 py-6 text-xl glass-morphism\"\n                  data-testid=\"button-upload-puzzle\"\n                >\n                  <Upload className=\"w-6 h-6 mr-3\" />\n                  Ανέβασμα Φωτό\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":19619},"client/src/pages/image-editor.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, Share2, Save, Sparkles } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport ImageEditorComponent from \"@/components/image-editor\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function ImageEditorPage() {\n  const [processedImage, setProcessedImage] = useState<string>(\"\");\n  const { toast } = useToast();\n\n  const handleImageProcessed = (imageData: string) => {\n    setProcessedImage(imageData);\n  };\n\n  const handleShare = () => {\n    if (navigator.share && processedImage) {\n      navigator.share({\n        title: 'Η επεξεργασμένη μου εικόνα από FractalCraft',\n        text: 'Δείτε την εικόνα που επεξεργάστηκα για το παζλ μου!',\n        url: processedImage\n      });\n    } else {\n      // Fallback to copying to clipboard\n      navigator.clipboard.writeText(processedImage);\n      toast({\n        title: \"Αντιγράφηκε\",\n        description: \"Ο σύνδεσμος της εικόνας αντιγράφηκε στο πρόχειρο\",\n      });\n    }\n  };\n\n  const handleSaveToLibrary = () => {\n    // In a real app, this would save to user's library\n    toast({\n      title: \"Αποθηκεύτηκε\",\n      description: \"Η εικόνα αποθηκεύτηκε στη βιβλιοθήκη σας\",\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background/95 to-primary/5\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center gap-4\">\n            <Link href=\"/fractal-generator\">\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-back\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Πίσω στη Γενήτρια Fractal\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-3xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n                Επεξεργαστής Εικόνας\n              </h1>\n              <p className=\"text-muted-foreground mt-1\">\n                Προσαρμόστε την εικόνα σας πριν τη μετατρέψετε σε παζλ\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            {processedImage && (\n              <>\n                <Button variant=\"outline\" onClick={handleShare} data-testid=\"button-share\">\n                  <Share2 className=\"w-4 h-4 mr-2\" />\n                  Κοινοποίηση\n                </Button>\n                <Button onClick={handleSaveToLibrary} data-testid=\"button-save\">\n                  <Save className=\"w-4 h-4 mr-2\" />\n                  Αποθήκευση\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Features Overview */}\n        <div className=\"grid md:grid-cols-4 gap-4 mb-8\">\n          <Card className=\"glass-morphism border-primary/20\">\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"w-12 h-12 mx-auto mb-3 bg-gradient-to-br from-primary to-secondary rounded-lg flex items-center justify-center\">\n                <Sparkles className=\"w-6 h-6 text-primary-foreground\" />\n              </div>\n              <h3 className=\"font-semibold mb-1\">Έξυπνα Φίλτρα</h3>\n              <p className=\"text-sm text-muted-foreground\">Προτεινόμενα φίλτρα για παζλ</p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"glass-morphism border-primary/20\">\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"w-12 h-12 mx-auto mb-3 bg-gradient-to-br from-secondary to-primary rounded-lg flex items-center justify-center\">\n                <Save className=\"w-6 h-6 text-primary-foreground\" />\n              </div>\n              <h3 className=\"font-semibold mb-1\">Ιστορικό Αλλαγών</h3>\n              <p className=\"text-sm text-muted-foreground\">Undo/Redo υποστήριξη</p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"glass-morphism border-primary/20\">\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"w-12 h-12 mx-auto mb-3 bg-gradient-to-br from-primary to-secondary rounded-lg flex items-center justify-center\">\n                <Share2 className=\"w-6 h-6 text-primary-foreground\" />\n              </div>\n              <h3 className=\"font-semibold mb-1\">Άμεση Κοινοποίηση</h3>\n              <p className=\"text-sm text-muted-foreground\">Μοιραστείτε τη δημιουργία σας</p>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"glass-morphism border-primary/20\">\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"w-12 h-12 mx-auto mb-3 bg-gradient-to-br from-secondary to-primary rounded-lg flex items-center justify-center\">\n                <ArrowLeft className=\"w-6 h-6 text-primary-foreground\" />\n              </div>\n              <h3 className=\"font-semibold mb-1\">Seamless Integration</h3>\n              <p className=\"text-sm text-muted-foreground\">Άμεση μετάβαση στη γενήτρια</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Editor */}\n        <ImageEditorComponent \n          onImageProcessed={handleImageProcessed}\n          className=\"mb-8\"\n        />\n\n        {/* Tips & Recommendations */}\n        <Card className=\"glass-morphism border-primary/20\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Sparkles className=\"w-5 h-5 text-primary\" />\n              Συμβουλές για Καλύτερα Παζλ\n            </CardTitle>\n            <CardDescription>\n              Προτάσεις για βελτιστοποίηση της εικόνας σας\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div className=\"space-y-3\">\n                <h4 className=\"font-semibold text-primary\">Χρώματα & Αντίθεση</h4>\n                <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                  <li>• Αυξήστε την αντίθεση για πιο ευκρινή κομμάτια παζλ</li>\n                  <li>• Χρησιμοποιήστε ζωντανά χρώματα για ευκολότερη συναρμολόγηση</li>\n                  <li>• Αποφύγετε υπερβολικό κορεσμό που μπορεί να κουράσει τα μάτια</li>\n                </ul>\n              </div>\n              \n              <div className=\"space-y-3\">\n                <h4 className=\"font-semibold text-primary\">Λεπτομέρειες & Φίλτρα</h4>\n                <ul className=\"space-y-2 text-sm text-muted-foreground\">\n                  <li>• Η όξυνση βοηθά στον διαχωρισμό των κομματιών</li>\n                  <li>• Αποφύγετε το θόλωμα εκτός αν θέλετε χαλαρωτικό παζλ</li>\n                  <li>• Τα φίλτρα άκρων μπορούν να δημιουργήσουν ενδιαφέρον εφέ</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Next Steps */}\n        {processedImage && (\n          <Card className=\"glass-morphism border-primary/20 mt-6\">\n            <CardContent className=\"p-6\">\n              <div className=\"text-center space-y-4\">\n                <div className=\"flex items-center justify-center gap-2\">\n                  <Badge variant=\"outline\" className=\"text-primary border-primary/20\">\n                    Εικόνα Έτοιμη\n                  </Badge>\n                </div>\n                <h3 className=\"text-lg font-semibold\">Η εικόνα σας είναι έτοιμη!</h3>\n                <p className=\"text-muted-foreground\">\n                  Συνεχίστε στη γενήτρια fractal για να δημιουργήσετε το παζλ σας\n                </p>\n                <div className=\"flex items-center justify-center gap-4\">\n                  <Link href=\"/fractal-generator\">\n                    <Button data-testid=\"button-continue-puzzle\">\n                      Συνέχεια στη Γενήτρια Fractal\n                    </Button>\n                  </Link>\n                  <Link href=\"/configurator\">\n                    <Button variant=\"outline\" data-testid=\"button-advanced-config\">\n                      Προχωρημένες Ρυθμίσεις\n                    </Button>\n                  </Link>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":9301},"client/src/pages/loyalty.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Star, Gift, Trophy, Crown, Clock, ShoppingBag } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function LoyaltyPage() {\n  // Mock user for demo - in real app would come from auth\n  const mockUser = {\n    loyaltyPoints: 1250,\n    loyaltyTier: 'gold',\n    totalSpent: '345.50',\n  };\n\n  const { data: transactions = [] } = useQuery({\n    queryKey: ['/api/loyalty/transactions'],\n    enabled: false, // Disabled until user auth is implemented\n  });\n\n  const tierInfo = {\n    bronze: { name: 'Χάλκινος', min: 0, max: 500, color: 'bg-orange-500', benefits: ['5% έκπτωση', 'Δωρεάν μεταφορικά άνω €50'] },\n    silver: { name: 'Ασημένιος', min: 500, max: 1000, color: 'bg-gray-400', benefits: ['10% έκπτωση', 'Προτεραιότητα στην εξυπηρέτηση', 'Δωρεάν μεταφορικά άνω €30'] },\n    gold: { name: 'Χρυσός', min: 1000, max: 2000, color: 'bg-yellow-500', benefits: ['15% έκπτωση', 'Πρόσβαση σε αποκλειστικά σχέδια', 'Δωρεάν μεταφορικά πάντα'] },\n    platinum: { name: 'Πλατινένιος', min: 2000, max: null, color: 'bg-purple-500', benefits: ['20% έκπτωση', 'Προσωπικός σύμβουλος', 'Αποκλειστικές εκδηλώσεις'] },\n  };\n\n  const currentTier = tierInfo[mockUser.loyaltyTier as keyof typeof tierInfo];\n  const nextTier = mockUser.loyaltyTier === 'platinum' ? null : \n    tierInfo[mockUser.loyaltyTier === 'bronze' ? 'silver' : \n           mockUser.loyaltyTier === 'silver' ? 'gold' : 'platinum'];\n\n  const progressToNext = nextTier ? \n    ((mockUser.loyaltyPoints - currentTier.min) / (nextTier.min - currentTier.min)) * 100 : 100;\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-4xl font-bold mb-4 text-center bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent\">\n          Πρόγραμμα Πιστότητας PuzzleCraft\n        </h1>\n        <p className=\"text-lg text-muted-foreground text-center\">\n          Κερδίστε πόντους και ανταμοιβές με κάθε αγορά fractal puzzle\n        </p>\n      </div>\n\n      {/* Current Status */}\n      <Card className=\"mb-8 bg-gradient-to-r from-blue-50 to-purple-50 border-2\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center gap-2 mb-2\">\n            <Crown className=\"w-8 h-8 text-yellow-500\" />\n            <CardTitle className=\"text-2xl\">\n              Κατηγορία: {currentTier.name}\n            </CardTitle>\n          </div>\n          <CardDescription className=\"text-lg\">\n            {mockUser.loyaltyPoints} πόντοι διαθέσιμοι\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {nextTier && (\n              <div>\n                <div className=\"flex justify-between items-center mb-2\">\n                  <span>Πρόοδος προς {nextTier.name}</span>\n                  <span className=\"text-sm text-muted-foreground\">\n                    {mockUser.loyaltyPoints}/{nextTier.min} πόντοι\n                  </span>\n                </div>\n                <Progress value={progressToNext} className=\"h-3\" />\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  Χρειάζεστε {nextTier.min - mockUser.loyaltyPoints} πόντους ακόμη\n                </p>\n              </div>\n            )}\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-6\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">{mockUser.loyaltyPoints}</div>\n                <div className=\"text-sm text-muted-foreground\">Διαθέσιμοι Πόντοι</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">€{mockUser.totalSpent}</div>\n                <div className=\"text-sm text-muted-foreground\">Συνολικά Αγορές</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-purple-600\">15%</div>\n                <div className=\"text-sm text-muted-foreground\">Τρέχουσα Έκπτωση</div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Tabs defaultValue=\"tiers\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"tiers\" data-testid=\"tab-tiers\">Κατηγορίες</TabsTrigger>\n          <TabsTrigger value=\"rewards\" data-testid=\"tab-rewards\">Ανταμοιβές</TabsTrigger>\n          <TabsTrigger value=\"history\" data-testid=\"tab-history\">Ιστορικό</TabsTrigger>\n        </TabsList>\n\n        {/* Tier Information */}\n        <TabsContent value=\"tiers\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {Object.entries(tierInfo).map(([tier, info]) => (\n              <Card key={tier} className={`relative overflow-hidden ${mockUser.loyaltyTier === tier ? 'ring-2 ring-blue-500' : ''}`}>\n                <div className={`absolute top-0 left-0 right-0 h-2 ${info.color}`} />\n                <CardHeader className=\"text-center\">\n                  <CardTitle className=\"flex items-center justify-center gap-2\">\n                    {tier === 'bronze' && <Star className=\"w-5 h-5 text-orange-500\" />}\n                    {tier === 'silver' && <Star className=\"w-5 h-5 text-gray-400\" />}\n                    {tier === 'gold' && <Star className=\"w-5 h-5 text-yellow-500\" />}\n                    {tier === 'platinum' && <Crown className=\"w-5 h-5 text-purple-500\" />}\n                    {info.name}\n                  </CardTitle>\n                  <CardDescription>\n                    {info.min}+ πόντοι\n                    {mockUser.loyaltyTier === tier && (\n                      <Badge className=\"ml-2 bg-blue-500\">Τρέχουσα</Badge>\n                    )}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ul className=\"space-y-2\">\n                    {info.benefits.map((benefit, index) => (\n                      <li key={index} className=\"text-sm flex items-start gap-2\">\n                        <Gift className=\"w-4 h-4 mt-0.5 text-green-600 flex-shrink-0\" />\n                        {benefit}\n                      </li>\n                    ))}\n                  </ul>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Rewards */}\n        <TabsContent value=\"rewards\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            <Card data-testid=\"reward-free-shipping\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <ShoppingBag className=\"w-5 h-5 text-blue-600\" />\n                  Δωρεάν Μεταφορικά\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-2xl font-bold text-blue-600 mb-2\">100 πόντοι</p>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Δωρεάν μεταφορικά για την επόμενη παραγγελία σας\n                </p>\n                <Button className=\"w-full\" disabled={mockUser.loyaltyPoints < 100}>\n                  Εξαργύρωση\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"reward-discount\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Gift className=\"w-5 h-5 text-green-600\" />\n                  Έκπτωση 10%\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-2xl font-bold text-green-600 mb-2\">250 πόντοι</p>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  10% έκπτωση στην επόμενη αγορά σας\n                </p>\n                <Button className=\"w-full\" disabled={mockUser.loyaltyPoints < 250}>\n                  Εξαργύρωση\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"reward-exclusive\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Trophy className=\"w-5 h-5 text-purple-600\" />\n                  Αποκλειστικό Σχέδιο\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-2xl font-bold text-purple-600 mb-2\">500 πόντοι</p>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Πρόσβαση σε αποκλειστικό fractal σχέδιο\n                </p>\n                <Button className=\"w-full\" disabled={mockUser.loyaltyPoints < 500}>\n                  Εξαργύρωση\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"reward-custom-frame\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Star className=\"w-5 h-5 text-yellow-600\" />\n                  Δωρεάν Κάδρο\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-2xl font-bold text-yellow-600 mb-2\">800 πόντοι</p>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Δωρεάν κάδρο premium για το puzzle σας\n                </p>\n                <Button className=\"w-full\" disabled={mockUser.loyaltyPoints < 800}>\n                  Εξαργύρωση\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"reward-consultation\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Clock className=\"w-5 h-5 text-indigo-600\" />\n                  Προσωπική Συμβουλή\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-2xl font-bold text-indigo-600 mb-2\">1000 πόντοι</p>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  1 ώρα προσωπικής συμβουλής για fractal design\n                </p>\n                <Button className=\"w-full\" disabled={mockUser.loyaltyPoints < 1000}>\n                  Εξαργύρωση\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"reward-mystery-box\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Gift className=\"w-5 h-5 text-pink-600\" />\n                  Mystery Box\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-2xl font-bold text-pink-600 mb-2\">1500 πόντοι</p>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Συλλογή 3 αποκλειστικών mini-puzzles\n                </p>\n                <Button className=\"w-full\" disabled={mockUser.loyaltyPoints < 1500}>\n                  Εξαργύρωση\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Transaction History */}\n        <TabsContent value=\"history\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Ιστορικό Πόντων</CardTitle>\n              <CardDescription>\n                Δείτε πώς κερδίσατε και χρησιμοποιήσατε τους πόντους σας\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {/* Mock transactions */}\n                <div className=\"flex items-center justify-between py-3 border-b\" data-testid=\"transaction-earned\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n                      <Gift className=\"w-5 h-5 text-green-600\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">Αγορά puzzle - Mandelbrot Set</p>\n                      <p className=\"text-sm text-muted-foreground\">12 Αυγ 2025</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-green-600 font-semibold\">+85 πόντοι</p>\n                    <p className=\"text-xs text-muted-foreground\">€85.00</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between py-3 border-b\" data-testid=\"transaction-redeemed\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                      <ShoppingBag className=\"w-5 h-5 text-blue-600\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">Εξαργύρωση - Δωρεάν Μεταφορικά</p>\n                      <p className=\"text-sm text-muted-foreground\">10 Αυγ 2025</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-red-600 font-semibold\">-100 πόντοι</p>\n                    <p className=\"text-xs text-muted-foreground\">Εξοικονόμηση €8</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between py-3 border-b\" data-testid=\"transaction-bonus\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center\">\n                      <Star className=\"w-5 h-5 text-purple-600\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium\">Bonus εγγραφής στο newsletter</p>\n                      <p className=\"text-sm text-muted-foreground\">5 Αυγ 2025</p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-green-600 font-semibold\">+50 πόντοι</p>\n                    <p className=\"text-xs text-muted-foreground\">Δώρο</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"mt-6 p-4 bg-muted rounded-lg\">\n                <h4 className=\"font-semibold mb-2\">Πώς να κερδίσετε περισσότερους πόντους:</h4>\n                <ul className=\"text-sm space-y-1 text-muted-foreground\">\n                  <li>• 1 πόντος για κάθε €1 που ξοδεύετε</li>\n                  <li>• 50 πόντοι για κάθε κριτική που αφήνετε</li>\n                  <li>• 100 πόντοι όταν προσκαλείτε φίλους</li>\n                  <li>• 25 πόντοι για κοινοποίηση στα social media</li>\n                </ul>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":16236},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/order-confirmation.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { CheckCircle, Package, Truck, Mail, Phone } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function OrderConfirmation() {\n  // In real app, would get order details from URL params or state\n  const mockOrder = {\n    id: \"ORD-1723456789\",\n    date: new Date().toLocaleDateString('el-GR'),\n    total: 89.90,\n    status: \"confirmed\",\n    estimatedDelivery: \"3-7 εργάσιμες ημέρες\",\n    trackingNumber: \"TR123456789GR\",\n    customerEmail: \"customer@example.com\"\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-20\">\n      <div className=\"max-w-3xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Success Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center\">\n              <CheckCircle className=\"w-10 h-10 text-green-600\" />\n            </div>\n          </div>\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            Η παραγγελία σας ολοκληρώθηκε!\n          </h1>\n          <p className=\"text-lg text-gray-600\">\n            Θα λάβετε email επιβεβαίωσης σύντομα\n          </p>\n        </div>\n\n        {/* Order Details */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Στοιχεία Παραγγελίας</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Αριθμός Παραγγελίας</p>\n                <p className=\"font-semibold text-lg\">{mockOrder.id}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Ημερομηνία</p>\n                <p className=\"font-semibold\">{mockOrder.date}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Συνολικό Ποσό</p>\n                <p className=\"font-semibold text-lg text-green-600\">€{mockOrder.total.toFixed(2)}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Κατάσταση</p>\n                <p className=\"font-semibold text-green-600 capitalize\">Επιβεβαιωμένη</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Delivery Information */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Truck className=\"w-5 h-5\" />\n              Πληροφορίες Παράδοσης\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Εκτιμώμενη Παράδοση</p>\n                <p className=\"font-semibold\">{mockOrder.estimatedDelivery}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Κωδικός Παρακολούθησης</p>\n                <p className=\"font-semibold text-blue-600\">{mockOrder.trackingNumber}</p>\n              </div>\n            </div>\n            <div className=\"bg-blue-50 p-4 rounded-lg\">\n              <p className=\"text-sm text-blue-800\">\n                <strong>Σημείωση:</strong> Θα λάβετε email με τον κωδικό παρακολούθησης μόλις η παραγγελία σας αποσταλεί.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Next Steps */}\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Επόμενα Βήματα</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0\">\n                  <Mail className=\"w-4 h-4 text-blue-600\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold\">Email Επιβεβαίωσης</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Θα στείλουμε επιβεβαίωση στο {mockOrder.customerEmail} με όλες τις λεπτομέρειες.\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center flex-shrink-0\">\n                  <Package className=\"w-4 h-4 text-green-600\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold\">Προετοιμασία Παραγγελίας</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Η ομάδα μας θα ξεκινήσει την προετοιμασία του παζλ σας εντός 24 ωρών.\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start gap-3\">\n                <div className=\"w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center flex-shrink-0\">\n                  <Truck className=\"w-4 h-4 text-purple-600\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold\">Παρακολούθηση Παράδοσης</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Μπορείτε να παρακολουθήσετε την παραγγελία σας χρησιμοποιώντας τον κωδικό παρακολούθησης.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Action Buttons */}\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n          <Button asChild variant=\"outline\">\n            <Link href=\"/order-tracking\" data-testid=\"button-track-order\">\n              Παρακολούθηση Παραγγελίας\n            </Link>\n          </Button>\n          \n          <Button asChild>\n            <Link href=\"/fractal-generator\" data-testid=\"button-create-another\">\n              Δημιούργησε Άλλο Παζλ\n            </Link>\n          </Button>\n        </div>\n\n        {/* Support Information */}\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <CardTitle>Χρειάζεστε Βοήθεια;</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"flex items-center gap-3\">\n                <Mail className=\"w-5 h-5 text-muted-foreground\" />\n                <div>\n                  <p className=\"font-semibold\">Email</p>\n                  <p className=\"text-sm text-muted-foreground\">support@fractalcraft.gr</p>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                <Phone className=\"w-5 h-5 text-muted-foreground\" />\n                <div>\n                  <p className=\"font-semibold\">Τηλέφωνο</p>\n                  <p className=\"text-sm text-muted-foreground\">+30 210 123 4567</p>\n                </div>\n              </div>\n            </div>\n            <div className=\"mt-4\">\n              <Button variant=\"outline\" asChild className=\"w-full sm:w-auto\">\n                <Link href=\"/contact\" data-testid=\"button-contact-support\">\n                  Επικοινωνία με την Υποστήριξη\n                </Link>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":8155},"client/src/pages/order-tracking.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Search,\n  Package,\n  Truck,\n  CheckCircle,\n  Clock,\n  MapPin,\n  Calendar,\n  Phone,\n  Mail,\n  AlertTriangle,\n  Copy,\n  ExternalLink\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Mock order data - in real app this would come from API\nconst mockOrders = {\n  \"FC2025001234\": {\n    id: \"FC2025001234\",\n    status: \"shipped\",\n    statusText: \"Στο δρόμο προς εσάς\",\n    progress: 75,\n    orderDate: \"2025-01-10\",\n    estimatedDelivery: \"2025-01-15\",\n    trackingNumber: \"GR123456789EL\",\n    carrier: \"ELTA Courier\",\n    carrierPhone: \"+30 210 123 4567\",\n    items: [\n      {\n        name: \"Fractal Παζλ - Προσωπική Φωτογραφία\",\n        material: \"Premium Ξύλο\",\n        size: \"30x22cm\",\n        difficulty: \"Κανονικό\",\n        quantity: 1,\n        price: 45\n      }\n    ],\n    timeline: [\n      {\n        status: \"ordered\",\n        title: \"Παραγγελία Καταχωρήθηκε\",\n        description: \"Η παραγγελία σας έχει καταχωρηθεί επιτυχώς\",\n        date: \"2025-01-10\",\n        time: \"14:30\",\n        completed: true\n      },\n      {\n        status: \"processing\",\n        title: \"Σε Επεξεργασία\",\n        description: \"Δημιουργία fractal design και προετοιμασία υλικών\",\n        date: \"2025-01-11\",\n        time: \"09:00\",\n        completed: true\n      },\n      {\n        status: \"production\",\n        title: \"Παραγωγή\",\n        description: \"Κοπή και συναρμολόγηση του παζλ σας\",\n        date: \"2025-01-12\",\n        time: \"15:45\",\n        completed: true\n      },\n      {\n        status: \"shipped\",\n        title: \"Στάλθηκε\",\n        description: \"Το παζλ σας παραδόθηκε στην εταιρεία μεταφοράς\",\n        date: \"2025-01-13\",\n        time: \"11:20\",\n        completed: true\n      },\n      {\n        status: \"delivered\",\n        title: \"Παραδόθηκε\",\n        description: \"Το παζλ σας θα παραδοθεί σήμερα\",\n        date: \"2025-01-15\",\n        time: \"Αναμένεται\",\n        completed: false\n      }\n    ],\n    shippingAddress: {\n      name: \"Ιωάννης Παπαδόπουλος\",\n      address: \"Λεωφόρος Αθηνών 123\",\n      city: \"Αθήνα\",\n      postal: \"12345\",\n      phone: \"+30 210 987 6543\"\n    }\n  }\n};\n\nexport default function OrderTracking() {\n  const [orderCode, setOrderCode] = useState(\"\");\n  const [orderData, setOrderData] = useState<any>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const { toast } = useToast();\n\n  const handleTrackOrder = () => {\n    if (!orderCode.trim()) {\n      setError(\"Παρακαλώ εισάγετε τον κωδικό παραγγελίας\");\n      return;\n    }\n\n    setIsLoading(true);\n    setError(\"\");\n\n    // Simulate API call\n    setTimeout(() => {\n      const order = mockOrders[orderCode as keyof typeof mockOrders];\n      if (order) {\n        setOrderData(order);\n        setError(\"\");\n      } else {\n        setError(\"Δεν βρέθηκε παραγγελία με αυτόν τον κωδικό\");\n        setOrderData(null);\n      }\n      setIsLoading(false);\n    }, 1000);\n  };\n\n  const copyTrackingNumber = () => {\n    if (orderData?.trackingNumber) {\n      navigator.clipboard.writeText(orderData.trackingNumber);\n      toast({\n        title: \"Αντιγράφτηκε!\",\n        description: \"Ο αριθμός παρακολούθησης αντιγράφτηκε στο clipboard\",\n      });\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"ordered\": return \"bg-blue-500\";\n      case \"processing\": return \"bg-yellow-500\";\n      case \"production\": return \"bg-orange-500\";\n      case \"shipped\": return \"bg-purple-500\";\n      case \"delivered\": return \"bg-green-500\";\n      default: return \"bg-gray-400\";\n    }\n  };\n\n  const getStatusIcon = (status: string, completed: boolean) => {\n    if (completed) {\n      return <CheckCircle className=\"w-5 h-5 text-green-500\" />;\n    }\n    \n    switch (status) {\n      case \"ordered\": return <Package className=\"w-5 h-5 text-blue-500\" />;\n      case \"processing\": return <Clock className=\"w-5 h-5 text-yellow-500\" />;\n      case \"production\": return <Clock className=\"w-5 h-5 text-orange-500\" />;\n      case \"shipped\": return <Truck className=\"w-5 h-5 text-purple-500\" />;\n      case \"delivered\": return <CheckCircle className=\"w-5 h-5 text-green-500\" />;\n      default: return <Clock className=\"w-5 h-5 text-gray-400\" />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background py-12\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-4\">\n            <span className=\"bg-gradient-to-r from-primary via-secondary to-accent bg-clip-text text-transparent\">\n              Παρακολούθηση Παραγγελίας\n            </span>\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            Εισάγετε τον κωδικό παραγγελίας σας για να δείτε την πρόοδο και τις λεπτομέρειες\n          </p>\n        </div>\n\n        {/* Search Form */}\n        <Card className=\"glass-morphism mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Search className=\"w-6 h-6 mr-3 text-primary\" />\n              Αναζήτηση Παραγγελίας\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"order-code\">Κωδικός Παραγγελίας</Label>\n              <div className=\"flex space-x-3\">\n                <Input\n                  id=\"order-code\"\n                  placeholder=\"π.χ. FC2025001234\"\n                  value={orderCode}\n                  onChange={(e) => setOrderCode(e.target.value.toUpperCase())}\n                  className=\"flex-1\"\n                  onKeyPress={(e) => e.key === 'Enter' && handleTrackOrder()}\n                />\n                <Button \n                  onClick={handleTrackOrder} \n                  disabled={isLoading}\n                  className=\"min-w-[120px]\"\n                >\n                  {isLoading ? \"Αναζήτηση...\" : \"Αναζήτηση\"}\n                </Button>\n              </div>\n            </div>\n            {error && (\n              <div className=\"flex items-center space-x-2 text-red-600 bg-red-50 dark:bg-red-950/20 p-3 rounded-lg\">\n                <AlertTriangle className=\"w-5 h-5\" />\n                <span>{error}</span>\n              </div>\n            )}\n            <div className=\"text-sm text-muted-foreground\">\n              <p>Ο κωδικός παραγγελίας σας αποστέλλεται στο email επιβεβαίωσης.</p>\n              <p className=\"mt-1\">\n                <strong>Δοκιμάστε:</strong> FC2025001234 (δείγμα παραγγελίας)\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Order Results */}\n        {orderData && (\n          <div className=\"space-y-6\">\n            {/* Order Summary */}\n            <Card className=\"glass-morphism\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"flex items-center\">\n                    <Package className=\"w-6 h-6 mr-3 text-primary\" />\n                    Παραγγελία #{orderData.id}\n                  </CardTitle>\n                  <Badge \n                    variant=\"secondary\" \n                    className=\"text-sm px-3 py-1\"\n                  >\n                    {orderData.statusText}\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Progress Bar */}\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Πρόοδος Παραγγελίας</span>\n                    <span>{orderData.progress}%</span>\n                  </div>\n                  <Progress value={orderData.progress} className=\"h-3\" />\n                </div>\n\n                {/* Key Info Grid */}\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"text-center p-4 bg-accent/10 rounded-lg\">\n                    <Calendar className=\"w-8 h-8 text-primary mx-auto mb-2\" />\n                    <p className=\"font-semibold\">Ημ. Παραγγελίας</p>\n                    <p className=\"text-sm text-muted-foreground\">{orderData.orderDate}</p>\n                  </div>\n                  <div className=\"text-center p-4 bg-accent/10 rounded-lg\">\n                    <Truck className=\"w-8 h-8 text-secondary mx-auto mb-2\" />\n                    <p className=\"font-semibold\">Αναμ. Παράδοση</p>\n                    <p className=\"text-sm text-muted-foreground\">{orderData.estimatedDelivery}</p>\n                  </div>\n                  <div className=\"text-center p-4 bg-accent/10 rounded-lg\">\n                    <MapPin className=\"w-8 h-8 text-accent mx-auto mb-2\" />\n                    <p className=\"font-semibold\">Μεταφορέας</p>\n                    <p className=\"text-sm text-muted-foreground\">{orderData.carrier}</p>\n                  </div>\n                </div>\n\n                {/* Tracking Number */}\n                {orderData.trackingNumber && (\n                  <div className=\"bg-gradient-to-r from-primary/5 to-secondary/5 p-4 rounded-lg border border-primary/20\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-semibold mb-1\">Αριθμός Παρακολούθησης</p>\n                        <p className=\"text-lg font-mono\">{orderData.trackingNumber}</p>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button variant=\"outline\" size=\"sm\" onClick={copyTrackingNumber}>\n                          <Copy className=\"w-4 h-4 mr-2\" />\n                          Αντιγραφή\n                        </Button>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <ExternalLink className=\"w-4 h-4 mr-2\" />\n                          Παρακολούθηση\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Timeline */}\n            <Card className=\"glass-morphism\">\n              <CardHeader>\n                <CardTitle>Χρονολόγιο Παραγγελίας</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  {orderData.timeline.map((step: any, index: number) => (\n                    <div key={index} className=\"flex items-start space-x-4\">\n                      <div className=\"flex-shrink-0 flex flex-col items-center\">\n                        {getStatusIcon(step.status, step.completed)}\n                        {index < orderData.timeline.length - 1 && (\n                          <div className={`w-0.5 h-12 mt-2 ${step.completed ? 'bg-green-200' : 'bg-gray-200'}`} />\n                        )}\n                      </div>\n                      <div className=\"flex-grow\">\n                        <div className=\"flex items-center space-x-3 mb-1\">\n                          <h4 className=\"font-semibold\">{step.title}</h4>\n                          {step.completed && (\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              Ολοκληρώθηκε\n                            </Badge>\n                          )}\n                        </div>\n                        <p className=\"text-sm text-muted-foreground mb-2\">\n                          {step.description}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {step.date} {step.time !== \"Αναμένεται\" && `στις ${step.time}`}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Order Items */}\n            <Card className=\"glass-morphism\">\n              <CardHeader>\n                <CardTitle>Προϊόντα Παραγγελίας</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {orderData.items.map((item: any, index: number) => (\n                  <div key={index} className=\"flex items-center justify-between p-4 bg-accent/5 rounded-lg\">\n                    <div className=\"flex-grow\">\n                      <h4 className=\"font-semibold mb-1\">{item.name}</h4>\n                      <div className=\"flex flex-wrap gap-2 text-sm text-muted-foreground\">\n                        <span>• {item.material}</span>\n                        <span>• {item.size}</span>\n                        <span>• Δυσκολία: {item.difficulty}</span>\n                        <span>• Ποσότητα: {item.quantity}</span>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-bold text-lg\">€{item.price}</p>\n                    </div>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n\n            {/* Shipping Address */}\n            <Card className=\"glass-morphism\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <MapPin className=\"w-5 h-5 mr-2\" />\n                  Διεύθυνση Παράδοσης\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <p className=\"font-semibold\">{orderData.shippingAddress.name}</p>\n                  <p>{orderData.shippingAddress.address}</p>\n                  <p>{orderData.shippingAddress.city} {orderData.shippingAddress.postal}</p>\n                  <p className=\"flex items-center text-muted-foreground\">\n                    <Phone className=\"w-4 h-4 mr-2\" />\n                    {orderData.shippingAddress.phone}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Contact Support */}\n            <Card className=\"glass-morphism bg-gradient-to-r from-primary/5 to-secondary/5 border-primary/20\">\n              <CardContent className=\"p-6\">\n                <div className=\"text-center space-y-4\">\n                  <h3 className=\"text-xl font-semibold\">Χρειάζεστε Βοήθεια;</h3>\n                  <p className=\"text-muted-foreground\">\n                    Επικοινωνήστε μαζί μας για οποιαδήποτε ερώτηση σχετικά με την παραγγελία σας\n                  </p>\n                  <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n                    <Button>\n                      <Phone className=\"w-4 h-4 mr-2\" />\n                      +30 210 123 4567\n                    </Button>\n                    <Button variant=\"outline\">\n                      <Mail className=\"w-4 h-4 mr-2\" />\n                      support@fractalcraft.gr\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":16349},"client/src/pages/orders.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Package, Truck, CheckCircle, Clock, ExternalLink, ArrowLeft } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Link } from \"wouter\";\nimport { format } from \"date-fns\";\nimport { el } from 'date-fns/locale';\n\ninterface OrderItem {\n  name: string;\n  description: string;\n  price: number;\n  quantity: number;\n  image: string;\n}\n\ninterface Order {\n  id: string;\n  orderNumber: string;\n  status: 'pending' | 'processing' | 'shipped' | 'completed' | 'cancelled';\n  total: number;\n  createdAt: string;\n  items: OrderItem[];\n  trackingNumber?: string;\n}\n\nconst statusConfig = {\n  pending: { label: 'Σε Αναμονή', color: 'secondary', icon: Clock },\n  processing: { label: 'Επεξεργασία', color: 'default', icon: Package },\n  shipped: { label: 'Στάλθηκε', color: 'default', icon: Truck },\n  completed: { label: 'Ολοκληρώθηκε', color: 'default', icon: CheckCircle },\n  cancelled: { label: 'Ακυρώθηκε', color: 'destructive', icon: Package }\n};\n\nexport default function Orders() {\n  const { user, isAuthenticated } = useAuth();\n  \n  const { data: orders, isLoading, error } = useQuery<Order[]>({\n    queryKey: ['/api/user/orders'],\n    enabled: isAuthenticated,\n  });\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card>\n          <CardContent className=\"text-center py-8\">\n            <p>Παρακαλώ συνδεθείτε για να δείτε τις παραγγελίες σας</p>\n            <Link href=\"/login\">\n              <Button className=\"mt-4\">Σύνδεση</Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4\" />\n          <p>Φορτώνονται οι παραγγελίες...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card>\n          <CardContent className=\"text-center py-8\">\n            <p>Σφάλμα κατά τη φόρτωση των παραγγελιών</p>\n            <Button className=\"mt-4\" onClick={() => window.location.reload()}>\n              Δοκιμάστε ξανά\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background/95 to-primary/5 py-8\">\n      <div className=\"container max-w-4xl mx-auto px-4 space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center gap-4\">\n          <Link href=\"/profile\">\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back-profile\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Προφίλ\n            </Button>\n          </Link>\n          <div className=\"flex-1\">\n            <h1 className=\"text-3xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n              Οι Παραγγελίες μου\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Παρακολουθήστε τις παραγγελίες σας και την πρόοδό τους\n            </p>\n          </div>\n        </div>\n\n        {/* Orders List */}\n        {orders && orders.length > 0 ? (\n          <div className=\"space-y-6\">\n            {orders.map((order) => {\n              const StatusIcon = statusConfig[order.status].icon;\n              \n              return (\n                <Card key={order.id} className=\"glass-morphism border-primary/20\">\n                  <CardHeader className=\"pb-4\">\n                    <div className=\"flex flex-col md:flex-row md:items-center justify-between gap-4\">\n                      <div>\n                        <CardTitle className=\"text-lg\">\n                          Παραγγελία #{order.orderNumber}\n                        </CardTitle>\n                        <CardDescription className=\"flex items-center gap-2 mt-1\">\n                          <span>{format(new Date(order.createdAt), 'dd MMMM yyyy, HH:mm', { locale: el })}</span>\n                          <Separator orientation=\"vertical\" className=\"h-4\" />\n                          <span>€{order.total.toFixed(2)}</span>\n                        </CardDescription>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-3\">\n                        <Badge \n                          variant={statusConfig[order.status].color as any}\n                          className=\"flex items-center gap-1\"\n                        >\n                          <StatusIcon className=\"w-3 h-3\" />\n                          {statusConfig[order.status].label}\n                        </Badge>\n                        \n                        {order.trackingNumber && (\n                          <Button variant=\"outline\" size=\"sm\" data-testid={`button-track-${order.id}`}>\n                            <ExternalLink className=\"w-4 h-4 mr-2\" />\n                            Παρακολούθηση\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {order.items.map((item, index) => (\n                        <div key={index} className=\"flex items-center gap-4 p-4 rounded-lg bg-muted/50\">\n                          <div className=\"w-16 h-16 bg-gradient-to-br from-primary/10 to-secondary/10 rounded-lg flex items-center justify-center\">\n                            <Package className=\"w-8 h-8 text-primary/50\" />\n                          </div>\n                          \n                          <div className=\"flex-1\">\n                            <h4 className=\"font-medium\">{item.name}</h4>\n                            <p className=\"text-sm text-muted-foreground\">{item.description}</p>\n                            <div className=\"flex items-center gap-4 mt-2 text-sm\">\n                              <span>Ποσότητα: {item.quantity}</span>\n                              <span className=\"font-medium\">€{item.price.toFixed(2)}</span>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                      \n                      {order.trackingNumber && (\n                        <div className=\"pt-4 border-t\">\n                          <div className=\"flex items-center justify-between text-sm\">\n                            <span className=\"text-muted-foreground\">Αριθμός Παρακολούθησης:</span>\n                            <Badge variant=\"outline\" className=\"font-mono\">\n                              {order.trackingNumber}\n                            </Badge>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        ) : (\n          <Card className=\"glass-morphism border-primary/20\">\n            <CardContent className=\"text-center py-12\">\n              <Package className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground/50\" />\n              <h3 className=\"text-lg font-medium mb-2\">Δεν έχετε παραγγελίες</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                Ανακαλύψτε τα μοναδικά fractal παζλ μας και κάντε την πρώτη σας παραγγελία!\n              </p>\n              <Link href=\"/puzzle-generator\">\n                <Button data-testid=\"button-start-shopping\">\n                  <Package className=\"w-4 h-4 mr-2\" />\n                  Αρχίστε τις Αγορές\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":8517},"client/src/pages/privacy-policy.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function PrivacyPolicy() {\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <h1 className=\"text-4xl font-bold mb-8 text-center\">Πολιτική Απορρήτου</h1>\n        \n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Συλλογή Προσωπικών Δεδομένων</CardTitle>\n            <CardDescription>Πληροφορίες που συλλέγουμε κατά τη χρήση των υπηρεσιών μας</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <h3 className=\"font-semibold mb-2\">Δεδομένα Λογαριασμού</h3>\n              <p className=\"text-muted-foreground\">Συλλέγουμε το όνομα, email, διεύθυνση και στοιχεία επικοινωνίας που παρέχετε κατά τη δημιουργία λογαριασμού.</p>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-2\">Δεδομένα Παραγγελιών</h3>\n              <p className=\"text-muted-foreground\">Αποθηκεύουμε πληροφορίες παραγγελιών, προτιμήσεις προϊόντων και ιστορικό αγορών για βελτίωση των υπηρεσιών μας.</p>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-2\">Τεχνικά Δεδομένα</h3>\n              <p className=\"text-muted-foreground\">Συλλέγουμε IP διεύθυνση, τύπο browser, και δεδομένα χρήσης για ανάλυση και ασφάλεια.</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Χρήση Δεδομένων</CardTitle>\n            <CardDescription>Πώς χρησιμοποιούμε τις προσωπικές σας πληροφορίες</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <ul className=\"list-disc pl-6 space-y-2 text-muted-foreground\">\n              <li>Επεξεργασία και εκτέλεση παραγγελιών</li>\n              <li>Παροχή εξυπηρέτησης πελατών</li>\n              <li>Αποστολή ενημερώσεων παραγγελιών</li>\n              <li>Βελτίωση των υπηρεσιών και προϊόντων μας</li>\n              <li>Αποστολή προωθητικού υλικού (με τη συγκατάθεσή σας)</li>\n              <li>Ασφάλεια και πρόληψη απάτης</li>\n            </ul>\n          </CardContent>\n        </Card>\n\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Κοινοποίηση Δεδομένων</CardTitle>\n            <CardDescription>Πότε και σε ποιους κοινοποιούμε τα δεδομένα σας</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <h3 className=\"font-semibold mb-2\">Εταίροι Μεταφορών</h3>\n              <p className=\"text-muted-foreground\">Κοινοποιούμε στοιχεία παράδοσης σε εταίρους μεταφορών για την εκτέλεση παραγγελιών.</p>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-2\">Πάροχοι Πληρωμών</h3>\n              <p className=\"text-muted-foreground\">Στοιχεία πληρωμής επεξεργάζονται από ασφαλείς παρόχους όπως Stripe και PayPal.</p>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-2\">Νομικές Υποχρεώσεις</h3>\n              <p className=\"text-muted-foreground\">Δεδομένα μπορεί να κοινοποιηθούν σε αρχές όταν απαιτείται νομικά.</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Τα Δικαιώματά Σας (GDPR)</CardTitle>\n            <CardDescription>Δικαιώματα σύμφωνα με τον Γενικό Κανονισμό Προστασίας Δεδομένων</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <ul className=\"list-disc pl-6 space-y-2 text-muted-foreground\">\n              <li><strong>Πρόσβαση:</strong> Αίτηση για αντίγραφο των προσωπικών σας δεδομένων</li>\n              <li><strong>Διόρθωση:</strong> Διόρθωση ανακριβών ή ελλιπών δεδομένων</li>\n              <li><strong>Διαγραφή:</strong> Αίτηση διαγραφής των προσωπικών σας δεδομένων</li>\n              <li><strong>Περιορισμός:</strong> Περιορισμός της επεξεργασίας των δεδομένων σας</li>\n              <li><strong>Φορητότητα:</strong> Μεταφορά δεδομένων σε άλλο πάροχο</li>\n              <li><strong>Αντίρρηση:</strong> Αντίρρηση στην επεξεργασία για συγκεκριμένους σκοπούς</li>\n            </ul>\n            <p className=\"mt-4 p-4 bg-blue-50 rounded-lg\">\n              <strong>Επικοινωνία:</strong> Για άσκηση των δικαιωμάτων σας, επικοινωνήστε μαζί μας στο privacy@fractalcraft.gr\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Ασφάλεια & Διατήρηση</CardTitle>\n            <CardDescription>Πώς προστατεύουμε και διατηρούμε τα δεδομένα σας</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p className=\"text-muted-foreground\">\n              Εφαρμόζουμε κατάλληλα τεχνικά και οργανωτικά μέτρα ασφαλείας για την προστασία των προσωπικών δεδομένων από μη εξουσιοδοτημένη πρόσβαση, τροποποίηση ή καταστροφή.\n            </p>\n            <p className=\"text-muted-foreground\">\n              Τα δεδομένα διατηρούνται όσο χρόνο είναι απαραίτητος για την εκπλήρωση των σκοπών συλλογής ή όσο απαιτείται από τη νομοθεσία.\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Ενημερώσεις Πολιτικής</CardTitle>\n            <CardDescription>Τελευταία ενημέρωση: 12 Αυγούστου 2025</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground\">\n              Δικαιούμαστε να ενημερώνουμε την παρούσα πολιτική απορρήτου. Σημαντικές αλλαγές θα γνωστοποιούνται μέσω email ή ειδοποίησης στην ιστοσελίδα μας.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":7617},"client/src/pages/profile.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Calendar, Mail, User, CreditCard, Package, MapPin, Phone } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Link } from \"wouter\";\nimport { format } from \"date-fns\";\nimport { el } from 'date-fns/locale';\n\nexport default function Profile() {\n  const { user, logout } = useAuth();\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card>\n          <CardContent className=\"text-center py-8\">\n            <p>Παρακαλώ συνδεθείτε για να δείτε το προφίλ σας</p>\n            <Link href=\"/login\">\n              <Button className=\"mt-4\">Σύνδεση</Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background/95 to-primary/5 py-8\">\n      <div className=\"container max-w-4xl mx-auto px-4 space-y-6\">\n        {/* Profile Header */}\n        <Card className=\"glass-morphism border-primary/20\">\n          <CardHeader className=\"pb-6\">\n            <div className=\"flex flex-col md:flex-row items-start md:items-center gap-6\">\n              <Avatar className=\"w-24 h-24\">\n                <AvatarImage src={user.profileImage || ''} alt={`${user.firstName} ${user.lastName}`} />\n                <AvatarFallback className=\"text-xl bg-gradient-to-br from-primary to-secondary text-primary-foreground\">\n                  {user.firstName.charAt(0)}{user.lastName.charAt(0)}\n                </AvatarFallback>\n              </Avatar>\n              \n              <div className=\"flex-1 space-y-2\">\n                <div>\n                  <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n                    {user.firstName} {user.lastName}\n                  </CardTitle>\n                  <CardDescription className=\"text-muted-foreground flex items-center gap-2 mt-1\">\n                    <Mail className=\"w-4 h-4\" />\n                    {user.email}\n                  </CardDescription>\n                </div>\n                \n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                  <Calendar className=\"w-4 h-4\" />\n                  <span>Μέλος από {format(new Date(user.createdAt), 'dd MMMM yyyy', { locale: el })}</span>\n                </div>\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-edit-profile\">\n                  <User className=\"w-4 h-4 mr-2\" />\n                  Επεξεργασία\n                </Button>\n                <Button variant=\"destructive\" size=\"sm\" onClick={logout} data-testid=\"button-logout\">\n                  Αποσύνδεση\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n        </Card>\n\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {/* Account Information */}\n          <Card className=\"glass-morphism border-primary/20\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <User className=\"w-5 h-5\" />\n                Στοιχεία Λογαριασμού\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-muted-foreground\">Email</span>\n                  <Badge variant=\"secondary\">{user.email}</Badge>\n                </div>\n                <Separator />\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-muted-foreground\">Όνομα</span>\n                  <span className=\"text-sm font-medium\">{user.firstName}</span>\n                </div>\n                <Separator />\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-muted-foreground\">Επώνυμο</span>\n                  <span className=\"text-sm font-medium\">{user.lastName}</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Quick Actions */}\n          <Card className=\"glass-morphism border-primary/20\">\n            <CardHeader>\n              <CardTitle>Γρήγορες Ενέργειες</CardTitle>\n              <CardDescription>\n                Διαχείριση λογαριασμού και παραγγελιών\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <Link href=\"/orders\" className=\"block\">\n                <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"link-orders\">\n                  <Package className=\"w-4 h-4 mr-2\" />\n                  Οι Παραγγελίες μου\n                </Button>\n              </Link>\n              \n              <Link href=\"/wishlist\" className=\"block\">\n                <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"link-wishlist\">\n                  <Package className=\"w-4 h-4 mr-2\" />\n                  Lista Επιθυμιών\n                </Button>\n              </Link>\n              \n              <Link href=\"/returns\" className=\"block\">\n                <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"link-returns\">\n                  <CreditCard className=\"w-4 h-4 mr-2\" />\n                  Επιστροφές & Αλλαγές\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Activity */}\n        <Card className=\"glass-morphism border-primary/20\">\n          <CardHeader>\n            <CardTitle>Πρόσφατη Δραστηριότητα</CardTitle>\n            <CardDescription>\n              Οι τελευταίες σας ενέργειες στο FractalCraft\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center gap-3 p-3 rounded-lg bg-muted/50\">\n                <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center\">\n                  <User className=\"w-4 h-4 text-primary\" />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium\">Σύνδεση στον λογαριασμό</p>\n                  <p className=\"text-xs text-muted-foreground\">Σήμερα</p>\n                </div>\n              </div>\n              \n              <div className=\"text-center py-6 text-sm text-muted-foreground\">\n                <Package className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                Δεν υπάρχουν πρόσφατες παραγγελίες\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":7386},"client/src/pages/progress-tracker.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Play, Pause, Square, Clock, Trophy, Share2, Camera, Plus, Target } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function ProgressTrackerPage() {\n  const [activeTimer, setActiveTimer] = useState<string | null>(null);\n  const [timerStartTime, setTimerStartTime] = useState<number | null>(null);\n  const queryClient = useQueryClient();\n\n  // Mock puzzle progress data\n  const mockProgress = [\n    {\n      id: \"1\",\n      puzzleName: \"Mandelbrot Dreams\",\n      totalPieces: 1000,\n      completedPieces: 650,\n      completionPercentage: 65,\n      timeSpentMinutes: 780,\n      startedAt: new Date(\"2025-08-01\"),\n      difficulty: \"Δύσκολο\",\n      material: \"Ξύλο Premium\",\n      size: \"50x70cm\",\n      imageUrl: \"https://images.unsplash.com/photo-1517077304055-6e89abbf09b0?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n      notes: \"Το κεντρικό τμήμα είναι πολύ δύσκολο. Ξεκίνησα από τις άκρες.\",\n      isShared: true,\n    },\n    {\n      id: \"2\", \n      puzzleName: \"Golden Spiral\",\n      totalPieces: 750,\n      completedPieces: 375,\n      completionPercentage: 50,\n      timeSpentMinutes: 420,\n      startedAt: new Date(\"2025-08-05\"),\n      difficulty: \"Μέτριο\",\n      material: \"Ακρυλικό\",\n      size: \"40x60cm\", \n      imageUrl: \"https://images.unsplash.com/photo-1635070041078-e363dbe005cb?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n      notes: \"Πολύ όμορφα χρώματα. Βοηθάει η ταξινόμηση κατά χρώμα.\",\n      isShared: false,\n    },\n    {\n      id: \"3\",\n      puzzleName: \"Julia Universe\", \n      totalPieces: 500,\n      completedPieces: 500,\n      completionPercentage: 100,\n      timeSpentMinutes: 480,\n      startedAt: new Date(\"2025-07-20\"),\n      completedAt: new Date(\"2025-08-02\"),\n      difficulty: \"Εύκολο\",\n      material: \"Χαρτόνι Premium\",\n      size: \"30x45cm\",\n      imageUrl: \"https://images.unsplash.com/photo-1541961017774-22349e4a1262?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n      notes: \"Τέλεια για αρχάριους. Τα κομμάτια ταιριάζουν εύκολα.\",\n      isShared: true,\n    }\n  ];\n\n  const formatTime = (minutes: number) => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return `${hours}ώ ${mins}λ`;\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'Εύκολο': return 'bg-green-100 text-green-800';\n      case 'Μέτριο': return 'bg-yellow-100 text-yellow-800'; \n      case 'Δύσκολο': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getProgressColor = (percentage: number) => {\n    if (percentage === 100) return 'bg-green-500';\n    if (percentage >= 75) return 'bg-blue-500';\n    if (percentage >= 50) return 'bg-yellow-500';\n    if (percentage >= 25) return 'bg-orange-500';\n    return 'bg-red-500';\n  };\n\n  const startTimer = (puzzleId: string) => {\n    setActiveTimer(puzzleId);\n    setTimerStartTime(Date.now());\n  };\n\n  const stopTimer = () => {\n    if (activeTimer && timerStartTime) {\n      const sessionTime = Math.floor((Date.now() - timerStartTime) / 60000);\n      // Here you would update the progress via API\n      console.log(`Stopped timer for ${activeTimer}, session time: ${sessionTime} minutes`);\n    }\n    setActiveTimer(null);\n    setTimerStartTime(null);\n  };\n\n  const completedPuzzles = mockProgress.filter(p => p.completionPercentage === 100);\n  const activePuzzles = mockProgress.filter(p => p.completionPercentage < 100);\n  const totalTimeSpent = mockProgress.reduce((sum, p) => sum + p.timeSpentMinutes, 0);\n  const averageCompletionTime = completedPuzzles.length > 0 \n    ? Math.floor(completedPuzzles.reduce((sum, p) => sum + p.timeSpentMinutes, 0) / completedPuzzles.length)\n    : 0;\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-4xl font-bold mb-4 text-center bg-gradient-to-r from-green-600 to-blue-600 bg-clip-text text-transparent\">\n          Παρακολούθηση Προόδου\n        </h1>\n        <p className=\"text-lg text-muted-foreground text-center\">\n          Παρακολουθήστε την πρόοδό σας, μετρήστε τον χρόνο και κοινοποιήστε τις επιτυχίες σας\n        </p>\n      </div>\n\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <Trophy className=\"w-8 h-8 text-yellow-600 mx-auto mb-2\" />\n            <div className=\"text-2xl font-bold\">{completedPuzzles.length}</div>\n            <div className=\"text-sm text-muted-foreground\">Ολοκληρωμένα</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <Target className=\"w-8 h-8 text-blue-600 mx-auto mb-2\" />\n            <div className=\"text-2xl font-bold\">{activePuzzles.length}</div>\n            <div className=\"text-sm text-muted-foreground\">Σε Εξέλιξη</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <Clock className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n            <div className=\"text-2xl font-bold\">{formatTime(totalTimeSpent)}</div>\n            <div className=\"text-sm text-muted-foreground\">Συνολικός Χρόνος</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <Play className=\"w-8 h-8 text-purple-600 mx-auto mb-2\" />\n            <div className=\"text-2xl font-bold\">{formatTime(averageCompletionTime)}</div>\n            <div className=\"text-sm text-muted-foreground\">Μέσος Χρόνος</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"active\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"active\" data-testid=\"tab-active\">Σε Εξέλιξη ({activePuzzles.length})</TabsTrigger>\n          <TabsTrigger value=\"completed\" data-testid=\"tab-completed\">Ολοκληρωμένα ({completedPuzzles.length})</TabsTrigger>\n          <TabsTrigger value=\"stats\" data-testid=\"tab-stats\">Στατιστικά</TabsTrigger>\n        </TabsList>\n\n        {/* Active Puzzles */}\n        <TabsContent value=\"active\" className=\"space-y-4\">\n          {activePuzzles.map((puzzle) => (\n            <Card key={puzzle.id} className=\"overflow-hidden\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                <div className=\"relative\">\n                  <img \n                    src={puzzle.imageUrl}\n                    alt={puzzle.puzzleName}\n                    className=\"w-full h-48 lg:h-full object-cover\"\n                  />\n                  <div className=\"absolute top-3 left-3\">\n                    <Badge className={getDifficultyColor(puzzle.difficulty)}>\n                      {puzzle.difficulty}\n                    </Badge>\n                  </div>\n                  {activeTimer === puzzle.id && (\n                    <div className=\"absolute top-3 right-3 bg-red-500 text-white px-2 py-1 rounded text-sm font-semibold\">\n                      🔴 LIVE\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"lg:col-span-2 p-6\">\n                  <div className=\"flex justify-between items-start mb-4\">\n                    <div>\n                      <h3 className=\"text-xl font-bold\">{puzzle.puzzleName}</h3>\n                      <p className=\"text-muted-foreground\">{puzzle.material} • {puzzle.size}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-2xl font-bold text-blue-600\">{puzzle.completionPercentage}%</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {puzzle.completedPieces}/{puzzle.totalPieces} κομμάτια\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div>\n                      <div className=\"flex justify-between items-center mb-2\">\n                        <span className=\"text-sm font-medium\">Πρόοδος</span>\n                        <span className=\"text-sm text-muted-foreground\">{puzzle.completedPieces}/{puzzle.totalPieces}</span>\n                      </div>\n                      <Progress value={puzzle.completionPercentage} className=\"h-3\" />\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <span className=\"text-muted-foreground\">Χρόνος:</span>\n                        <div className=\"font-semibold\">{formatTime(puzzle.timeSpentMinutes)}</div>\n                      </div>\n                      <div>\n                        <span className=\"text-muted-foreground\">Ξεκίνησε:</span>\n                        <div className=\"font-semibold\">{puzzle.startedAt.toLocaleDateString('el-GR')}</div>\n                      </div>\n                    </div>\n\n                    {puzzle.notes && (\n                      <div className=\"bg-muted p-3 rounded\">\n                        <span className=\"text-sm font-medium\">Σημειώσεις: </span>\n                        <span className=\"text-sm\">{puzzle.notes}</span>\n                      </div>\n                    )}\n\n                    <div className=\"flex gap-2 pt-2\">\n                      {activeTimer === puzzle.id ? (\n                        <Button\n                          variant=\"destructive\"\n                          size=\"sm\"\n                          onClick={stopTimer}\n                          data-testid={`stop-timer-${puzzle.id}`}\n                        >\n                          <Square className=\"w-4 h-4 mr-2\" />\n                          Στοπ\n                        </Button>\n                      ) : (\n                        <Button\n                          size=\"sm\"\n                          onClick={() => startTimer(puzzle.id)}\n                          disabled={activeTimer !== null}\n                          data-testid={`start-timer-${puzzle.id}`}\n                        >\n                          <Play className=\"w-4 h-4 mr-2\" />\n                          Έναρξη\n                        </Button>\n                      )}\n\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button variant=\"outline\" size=\"sm\" data-testid={`update-progress-${puzzle.id}`}>\n                            <Plus className=\"w-4 h-4 mr-2\" />\n                            Ενημέρωση\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent>\n                          <DialogHeader>\n                            <DialogTitle>Ενημέρωση Προόδου</DialogTitle>\n                            <DialogDescription>\n                              Ενημερώστε την πρόοδό σας για το {puzzle.puzzleName}\n                            </DialogDescription>\n                          </DialogHeader>\n                          <div className=\"space-y-4\">\n                            <div>\n                              <Label>Ολοκληρωμένα κομμάτια</Label>\n                              <input \n                                type=\"number\" \n                                max={puzzle.totalPieces}\n                                defaultValue={puzzle.completedPieces}\n                                className=\"w-full p-2 border rounded mt-1\"\n                                data-testid=\"input-completed-pieces\"\n                              />\n                            </div>\n                            <div>\n                              <Label>Σημειώσεις</Label>\n                              <Textarea \n                                defaultValue={puzzle.notes}\n                                placeholder=\"Προσθέστε σημειώσεις για την πρόοδό σας...\"\n                                data-testid=\"textarea-notes\"\n                              />\n                            </div>\n                            <div className=\"flex justify-end gap-2\">\n                              <Button variant=\"outline\">Ακύρωση</Button>\n                              <Button data-testid=\"button-save-progress\">Αποθήκευση</Button>\n                            </div>\n                          </div>\n                        </DialogContent>\n                      </Dialog>\n\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        data-testid={`share-progress-${puzzle.id}`}\n                      >\n                        <Share2 className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))}\n\n          {activePuzzles.length === 0 && (\n            <Card className=\"text-center py-16\">\n              <CardContent>\n                <Target className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold mb-2\">Δεν έχετε ενεργά puzzle</h3>\n                <p className=\"text-muted-foreground mb-6\">\n                  Αρχίστε ένα νέο puzzle για να παρακολουθήσετε την πρόοδό σας\n                </p>\n                <Button data-testid=\"button-start-new-puzzle\">\n                  Ξεκινήστε Νέο Puzzle\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Completed Puzzles */}\n        <TabsContent value=\"completed\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {completedPuzzles.map((puzzle) => (\n              <Card key={puzzle.id} className=\"overflow-hidden\">\n                <div className=\"relative\">\n                  <img \n                    src={puzzle.imageUrl}\n                    alt={puzzle.puzzleName}\n                    className=\"w-full h-48 object-cover\"\n                  />\n                  <div className=\"absolute top-3 left-3\">\n                    <Badge className=\"bg-green-100 text-green-800\">\n                      ✅ Ολοκληρώθηκε\n                    </Badge>\n                  </div>\n                  <div className=\"absolute top-3 right-3\">\n                    <Badge className={getDifficultyColor(puzzle.difficulty)}>\n                      {puzzle.difficulty}\n                    </Badge>\n                  </div>\n                </div>\n                \n                <CardHeader>\n                  <CardTitle className=\"text-lg\">{puzzle.puzzleName}</CardTitle>\n                  <CardDescription>{puzzle.material} • {puzzle.size}</CardDescription>\n                </CardHeader>\n\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Χρόνος ολοκλήρωσης:</span>\n                      <span className=\"font-semibold\">{formatTime(puzzle.timeSpentMinutes)}</span>\n                    </div>\n                    \n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Ολοκληρώθηκε:</span>\n                      <span className=\"font-semibold\">\n                        {puzzle.completedAt?.toLocaleDateString('el-GR')}\n                      </span>\n                    </div>\n\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Κομμάτια:</span>\n                      <span className=\"font-semibold\">{puzzle.totalPieces}</span>\n                    </div>\n\n                    {puzzle.notes && (\n                      <div className=\"bg-muted p-2 rounded text-sm\">\n                        {puzzle.notes}\n                      </div>\n                    )}\n\n                    <div className=\"flex gap-2 pt-2\">\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        className=\"flex-1\"\n                        data-testid={`share-completion-${puzzle.id}`}\n                      >\n                        <Share2 className=\"w-4 h-4 mr-2\" />\n                        Κοινοποίηση\n                      </Button>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        data-testid={`view-gallery-${puzzle.id}`}\n                      >\n                        <Camera className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Statistics */}\n        <TabsContent value=\"stats\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Στατιστικά Επίδοσης</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex justify-between\">\n                  <span>Συνολικά puzzles:</span>\n                  <span className=\"font-semibold\">{mockProgress.length}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Ποσοστό ολοκλήρωσης:</span>\n                  <span className=\"font-semibold\">{Math.round((completedPuzzles.length / mockProgress.length) * 100)}%</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Μέσος χρόνος ολοκλήρωσης:</span>\n                  <span className=\"font-semibold\">{formatTime(averageCompletionTime)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Συνολικά κομμάτια:</span>\n                  <span className=\"font-semibold\">{mockProgress.reduce((sum, p) => sum + p.totalPieces, 0)}</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Επιτεύγματα</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex items-center gap-3 p-3 bg-yellow-50 rounded\">\n                  <Trophy className=\"w-6 h-6 text-yellow-600\" />\n                  <div>\n                    <div className=\"font-semibold\">Πρώτο Ολοκληρωμένο</div>\n                    <div className=\"text-sm text-muted-foreground\">Ολοκληρώσατε το πρώτο σας puzzle!</div>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center gap-3 p-3 bg-blue-50 rounded\">\n                  <Clock className=\"w-6 h-6 text-blue-600\" />\n                  <div>\n                    <div className=\"font-semibold\">Ταχύτητα Αστραπή</div>\n                    <div className=\"text-sm text-muted-foreground\">Ολοκληρώσατε puzzle σε &lt;8 ώρες</div>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center gap-3 p-3 bg-gray-100 rounded opacity-50\">\n                  <Target className=\"w-6 h-6 text-gray-500\" />\n                  <div>\n                    <div className=\"font-semibold\">Μαραθώνιος</div>\n                    <div className=\"text-sm text-muted-foreground\">Ολοκληρώστε 10 puzzles (3/10)</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":21084},"client/src/pages/puzzle-generator.tsx":{"content":"import { useEffect, useRef } from 'react';\n\nexport function PuzzleGeneratorPage() {\n  const iframeRef = useRef<HTMLIFrameElement>(null);\n\n  useEffect(() => {\n    // Load the puzzle generator in iframe\n    if (iframeRef.current) {\n      iframeRef.current.src = '/api/puzzle-generator';\n    }\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-6\">\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n            Δημιουργός Προσωποποιημένων Puzzle\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-300\">\n            Δημιουργήστε μοναδικά puzzle από τις φωτογραφίες σας με προηγμένο αλγόριθμο fractal\n          </p>\n        </div>\n        \n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden\">\n          <iframe\n            ref={iframeRef}\n            width=\"100%\"\n            height=\"900\"\n            style={{ border: 'none' }}\n            title=\"Puzzle Generator\"\n            className=\"w-full\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1233},"client/src/pages/returns.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { \n  RotateCcw,\n  Package,\n  Shield,\n  Clock,\n  CheckCircle,\n  AlertTriangle,\n  FileText,\n  Camera,\n  Truck,\n  CreditCard,\n  Mail,\n  Phone\n} from \"lucide-react\";\n\nexport default function Returns() {\n  const [returnReason, setReturnReason] = useState(\"\");\n  const [orderCode, setOrderCode] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [agreedToTerms, setAgreedToTerms] = useState(false);\n\n  const returnReasons = [\n    { id: \"defective\", label: \"Ελαττωματικό προϊόν\", description: \"Το παζλ έφτασε σπασμένο ή με ελαττώματα\" },\n    { id: \"wrong-item\", label: \"Λάθος προϊόν\", description: \"Λάβατε διαφορετικό προϊόν από αυτό που παραγγείλατε\" },\n    { id: \"not-as-described\", label: \"Όχι όπως περιγράφηκε\", description: \"Το προϊόν δεν ταιριάζει με την περιγραφή\" },\n    { id: \"changed-mind\", label: \"Άλλαξα γνώμη\", description: \"Δεν θέλω πια το προϊόν\" },\n    { id: \"quality-issues\", label: \"Πρόβλημα ποιότητας\", description: \"Η ποιότητα δεν είναι η αναμενόμενη\" },\n    { id: \"other\", label: \"Άλλος λόγος\", description: \"Παρακαλώ περιγράψτε τον λόγο παρακάτω\" }\n  ];\n\n  const handleSubmitReturn = () => {\n    // In real app, this would submit to API\n    alert(\"Η αίτηση επιστροφής σας καταχωρήθηκε! Θα λάβετε email με οδηγίες.\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background py-12\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-foreground mb-4\">\n            <span className=\"bg-gradient-to-r from-primary via-secondary to-accent bg-clip-text text-transparent\">\n              Επιστροφές & Ανταλλαγές\n            </span>\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            30 ημέρες πλήρης εγγύηση ικανοποίησης. Κάνουμε εύκολες τις επιστροφές!\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Return Policy */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Policy Overview */}\n            <Card className=\"glass-morphism\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Shield className=\"w-6 h-6 mr-3 text-primary\" />\n                  Πολιτική Επιστροφών\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"text-center p-4 bg-green-50 dark:bg-green-950/20 rounded-lg\">\n                    <Clock className=\"w-10 h-10 text-green-600 mx-auto mb-3\" />\n                    <h4 className=\"font-semibold mb-2\">30 Ημέρες</h4>\n                    <p className=\"text-sm text-muted-foreground\">Χρονικό όριο για επιστροφές</p>\n                  </div>\n                  <div className=\"text-center p-4 bg-blue-50 dark:bg-blue-950/20 rounded-lg\">\n                    <Package className=\"w-10 h-10 text-blue-600 mx-auto mb-3\" />\n                    <h4 className=\"font-semibold mb-2\">Δωρεάν Επιστροφή</h4>\n                    <p className=\"text-sm text-muted-foreground\">Για ελαττωματικά προϊόντα</p>\n                  </div>\n                  <div className=\"text-center p-4 bg-purple-50 dark:bg-purple-950/20 rounded-lg\">\n                    <CreditCard className=\"w-10 h-10 text-purple-600 mx-auto mb-3\" />\n                    <h4 className=\"font-semibold mb-2\">Πλήρης Επιστροφή</h4>\n                    <p className=\"text-sm text-muted-foreground\">100% των χρημάτων</p>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-semibold text-lg\">Τι Μπορείτε να Επιστρέψετε:</h4>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"flex items-start space-x-3\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 mt-0.5\" />\n                      <div>\n                        <p className=\"font-medium\">Template Παζλ</p>\n                        <p className=\"text-sm text-muted-foreground\">Προ-σχεδιασμένα παζλ σε άριστη κατάσταση</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-start space-x-3\">\n                      <CheckCircle className=\"w-5 h-5 text-green-500 mt-0.5\" />\n                      <div>\n                        <p className=\"font-medium\">Ελαττωματικά Προϊόντα</p>\n                        <p className=\"text-sm text-muted-foreground\">Οποιοδήποτε προϊόν με βλάβη ή ελάττωμα</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-start space-x-3\">\n                      <AlertTriangle className=\"w-5 h-5 text-yellow-500 mt-0.5\" />\n                      <div>\n                        <p className=\"font-medium\">Custom Παζλ (περιορισμένα)</p>\n                        <p className=\"text-sm text-muted-foreground\">Μόνο αν υπάρχει ελάττωμα παραγωγής</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-start space-x-3\">\n                      <AlertTriangle className=\"w-5 h-5 text-red-500 mt-0.5\" />\n                      <div>\n                        <p className=\"font-medium\">Μη Επιστρέψιμα</p>\n                        <p className=\"text-sm text-muted-foreground\">Προσωπικά παζλ χωρίς ελάττωμα</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Return Form */}\n            <Card className=\"glass-morphism\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <RotateCcw className=\"w-6 h-6 mr-3 text-secondary\" />\n                  Αίτηση Επιστροφής\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"order-code\">Κωδικός Παραγγελίας *</Label>\n                    <Input\n                      id=\"order-code\"\n                      placeholder=\"π.χ. FC2025001234\"\n                      value={orderCode}\n                      onChange={(e) => setOrderCode(e.target.value.toUpperCase())}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email Επικοινωνίας *</Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"το email της παραγγελίας\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <Label>Λόγος Επιστροφής *</Label>\n                  <RadioGroup value={returnReason} onValueChange={setReturnReason}>\n                    {returnReasons.map((reason) => (\n                      <div key={reason.id} className=\"flex items-start space-x-3 p-3 border border-border rounded-lg hover:bg-accent/5 transition-colors\">\n                        <RadioGroupItem value={reason.id} id={reason.id} className=\"mt-1\" />\n                        <div className=\"flex-grow\">\n                          <Label htmlFor={reason.id} className=\"font-medium cursor-pointer\">\n                            {reason.label}\n                          </Label>\n                          <p className=\"text-sm text-muted-foreground mt-1\">\n                            {reason.description}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </RadioGroup>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\">Περιγραφή (Προαιρετική)</Label>\n                  <Textarea\n                    id=\"description\"\n                    placeholder=\"Περιγράψτε το πρόβλημα ή τον λόγο επιστροφής...\"\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                    rows={4}\n                  />\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"p-4 bg-accent/10 rounded-lg border border-accent/20\">\n                    <div className=\"flex items-start space-x-3\">\n                      <Camera className=\"w-5 h-5 text-accent mt-0.5\" />\n                      <div>\n                        <h5 className=\"font-medium mb-2\">Φωτογραφίες (Συνιστάται)</h5>\n                        <p className=\"text-sm text-muted-foreground mb-3\">\n                          Για γρηγορότερη επεξεργασία, παρακαλούμε ανεβάστε φωτογραφίες του προβλήματος\n                        </p>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Camera className=\"w-4 h-4 mr-2\" />\n                          Ανέβασμα Φωτογραφιών\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox \n                    id=\"terms\" \n                    checked={agreedToTerms}\n                    onCheckedChange={(checked) => setAgreedToTerms(!!checked)}\n                  />\n                  <Label htmlFor=\"terms\" className=\"text-sm\">\n                    Συμφωνώ με τους <a href=\"#\" className=\"text-primary underline\">όρους επιστροφής</a> και \n                    επιβεβαιώνω ότι οι πληροφορίες είναι ακριβείς\n                  </Label>\n                </div>\n\n                <Button \n                  onClick={handleSubmitReturn}\n                  disabled={!orderCode || !returnReason || !agreedToTerms}\n                  className=\"w-full bg-gradient-to-r from-primary to-secondary hover:from-primary/90 hover:to-secondary/90\"\n                  size=\"lg\"\n                >\n                  <RotateCcw className=\"w-5 h-5 mr-2\" />\n                  Υποβολή Αίτησης Επιστροφής\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Process Steps */}\n            <Card className=\"glass-morphism\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Διαδικασία Επιστροφής</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-8 h-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-bold\">\n                      1\n                    </div>\n                    <div>\n                      <h5 className=\"font-medium\">Υποβολή Αίτησης</h5>\n                      <p className=\"text-sm text-muted-foreground\">Συμπληρώστε τη φόρμα επιστροφής</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-8 h-8 bg-secondary text-secondary-foreground rounded-full flex items-center justify-center text-sm font-bold\">\n                      2\n                    </div>\n                    <div>\n                      <h5 className=\"font-medium\">Έγκριση</h5>\n                      <p className=\"text-sm text-muted-foreground\">Επεξεργασία σε 1-2 ημέρες</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-8 h-8 bg-accent text-accent-foreground rounded-full flex items-center justify-center text-sm font-bold\">\n                      3\n                    </div>\n                    <div>\n                      <h5 className=\"font-medium\">Αποστολή</h5>\n                      <p className=\"text-sm text-muted-foreground\">Ετικέτα δωρεάν επιστροφής</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-8 h-8 bg-green-500 text-white rounded-full flex items-center justify-center text-sm font-bold\">\n                      4\n                    </div>\n                    <div>\n                      <h5 className=\"font-medium\">Επιστροφή</h5>\n                      <p className=\"text-sm text-muted-foreground\">Χρήματα σε 5-10 ημέρες</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Stats */}\n            <Card className=\"glass-morphism bg-gradient-to-br from-primary/5 to-secondary/5 border-primary/20\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Γρήγορα Στοιχεία</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Μέσος χρόνος επεξεργασίας:</span>\n                    <Badge variant=\"secondary\">24 ώρες</Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Ποσοστό έγκρισης:</span>\n                    <Badge variant=\"secondary\">98%</Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm\">Ικανοποίηση πελατών:</span>\n                    <Badge variant=\"secondary\">4.9/5</Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Contact Support */}\n            <Card className=\"glass-morphism\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Χρειάζεστε Βοήθεια;</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Επικοινωνήστε με την ομάδα υποστήριξης για οποιαδήποτε ερώτηση\n                </p>\n                <div className=\"space-y-2\">\n                  <Button variant=\"outline\" className=\"w-full justify-start\" size=\"sm\">\n                    <Phone className=\"w-4 h-4 mr-2\" />\n                    +30 210 123 4567\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full justify-start\" size=\"sm\">\n                    <Mail className=\"w-4 h-4 mr-2\" />\n                    returns@fractalcraft.gr\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* FAQ Link */}\n            <Card className=\"glass-morphism\">\n              <CardContent className=\"p-4 text-center\">\n                <FileText className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n                <h5 className=\"font-medium mb-2\">Συχνές Ερωτήσεις</h5>\n                <p className=\"text-sm text-muted-foreground mb-3\">\n                  Δείτε απαντήσεις σε συχνές ερωτήσεις\n                </p>\n                <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                  Δείτε FAQ\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Bottom Info */}\n        <Card className=\"glass-morphism mt-8\">\n          <CardContent className=\"p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <h3 className=\"font-semibold text-lg mb-3 flex items-center\">\n                  <Truck className=\"w-5 h-5 mr-2 text-primary\" />\n                  Διεύθυνση Επιστροφής\n                </h3>\n                <div className=\"space-y-1 text-sm\">\n                  <p><strong>FractalCraft Returns</strong></p>\n                  <p>Βιομηχανική Περιοχή Σίνδου</p>\n                  <p>57022 Θεσσαλονίκη</p>\n                  <p className=\"text-muted-foreground mt-2\">\n                    <strong>Σημαντικό:</strong> Μη στέλνετε πακέτα χωρίς πρότερη έγκριση\n                  </p>\n                </div>\n              </div>\n              \n              <div>\n                <h3 className=\"font-semibold text-lg mb-3 flex items-center\">\n                  <Shield className=\"w-5 h-5 mr-2 text-secondary\" />\n                  Εγγύηση Ικανοποίησης\n                </h3>\n                <div className=\"space-y-2 text-sm\">\n                  <p>✓ 30 ημέρες πλήρης εγγύηση</p>\n                  <p>✓ Δωρεάν επιστροφή για ελαττώματα</p>\n                  <p>✓ Άμεση αντικατάσταση</p>\n                  <p>✓ 100% επιστροφή χρημάτων</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":18962},"client/src/pages/social-gallery.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Heart, MessageCircle, Share2, Clock, Trophy, Star, Filter, Upload, Camera } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function SocialGalleryPage() {\n  const [selectedFilter, setSelectedFilter] = useState(\"all\");\n  const queryClient = useQueryClient();\n\n  // Mock social gallery data\n  const mockGalleryPosts = [\n    {\n      id: \"1\",\n      userId: \"user1\",\n      userName: \"Ελένη Παπαδοπούλου\",\n      userAvatar: \"https://images.unsplash.com/photo-1494790108755-2616b612b1ae?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\",\n      title: \"Το δυσκολότερο Mandelbrot που έκανα ποτέ!\",\n      description: \"2000 κομμάτια, 3 εβδομάδες συνεχούς δουλειάς. Αξίζει κάθε λεπτό!\",\n      imageUrl: \"https://images.unsplash.com/photo-1517077304055-6e89abbf09b0?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n      difficulty: \"Δύσκολο\",\n      completionTime: 1260, // minutes\n      likes: 47,\n      comments: 12,\n      createdAt: new Date(\"2025-08-10\"),\n      isPublic: true,\n      tags: [\"mandelbrot\", \"2000pieces\", \"challenge\"]\n    },\n    {\n      id: \"2\",\n      userId: \"user2\", \n      userName: \"Γιάννης Νικολάου\",\n      userAvatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\",\n      title: \"Golden Spiral - Οικογενειακό project\",\n      description: \"Το έκανα μαζί με τα παιδιά μου. Τέλειο για να μάθουν fractals!\",\n      imageUrl: \"https://images.unsplash.com/photo-1635070041078-e363dbe005cb?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n      difficulty: \"Μέτριο\",\n      completionTime: 480,\n      likes: 23,\n      comments: 8,\n      createdAt: new Date(\"2025-08-08\"),\n      isPublic: true,\n      tags: [\"family\", \"education\", \"golden-spiral\"]\n    },\n    {\n      id: \"3\",\n      userId: \"user3\",\n      userName: \"Μαρία Κωνσταντίνου\", \n      userAvatar: \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\",\n      title: \"Julia Set σε ξύλο - Απίστευτη ποιότητα!\",\n      description: \"Πρώτη φορά με ξύλινο puzzle. Η αίσθηση είναι μοναδική!\",\n      imageUrl: \"https://images.unsplash.com/photo-1541961017774-22349e4a1262?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n      difficulty: \"Εύκολο\",\n      completionTime: 360,\n      likes: 31,\n      comments: 6,\n      createdAt: new Date(\"2025-08-06\"),\n      isPublic: true,\n      tags: [\"julia\", \"wood\", \"premium\"]\n    },\n    {\n      id: \"4\",\n      userId: \"user4\",\n      userName: \"Πέτρος Αντωνίου\",\n      userAvatar: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\", \n      title: \"Fractal Tree - Η φύση συναντά τα μαθηματικά\",\n      description: \"Εκπληκτική λεπτομέρεια στα κλαδιά. Κάθε κομμάτι είναι τέχνη!\",\n      imageUrl: \"https://images.unsplash.com/photo-1502134249126-9f3755a50d78?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n      difficulty: \"Μέτριο\",\n      completionTime: 720,\n      likes: 19,\n      comments: 4,\n      createdAt: new Date(\"2025-08-04\"),\n      isPublic: true,\n      tags: [\"nature\", \"tree\", \"mathematics\"]\n    },\n    {\n      id: \"5\",\n      userId: \"user5\",\n      userName: \"Αναστασία Βασιλείου\",\n      userAvatar: \"https://images.unsplash.com/photo-1489424731084-a5d8b219a5bb?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\",\n      title: \"Πρώτο puzzle στα 12 μου χρόνια!\",\n      description: \"Μαμά μου με βοήθησε, αλλά τα περισσότερα κομμάτια τα έκανα εγώ!\",\n      imageUrl: \"https://images.unsplash.com/photo-1518709268805-4e9042af2176?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n      difficulty: \"Εύκολο\",\n      completionTime: 240,\n      likes: 56,\n      comments: 18,\n      createdAt: new Date(\"2025-08-02\"),\n      isPublic: true,\n      tags: [\"first-puzzle\", \"young\", \"achievement\"]\n    }\n  ];\n\n  const formatTime = (minutes: number) => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    if (hours === 0) return `${mins} λεπτά`;\n    return `${hours}ώ ${mins}λ`;\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'Εύκολο': return 'bg-green-100 text-green-800';\n      case 'Μέτριο': return 'bg-yellow-100 text-yellow-800';\n      case 'Δύσκολο': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const filteredPosts = selectedFilter === \"all\" \n    ? mockGalleryPosts\n    : mockGalleryPosts.filter(post => post.difficulty === selectedFilter);\n\n  const likeMutation = useMutation({\n    mutationFn: (postId: string) => apiRequest(`/api/social/like/${postId}`, { method: 'POST' }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/social/gallery'] });\n    }\n  });\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-4xl font-bold mb-4 text-center bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent\">\n          Κοινότητα Puzzle\n        </h1>\n        <p className=\"text-lg text-muted-foreground text-center\">\n          Μοιραστείτε τις επιτυχίες σας και εμπνευστείτε από άλλους puzzle enthusiasts\n        </p>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <Camera className=\"w-8 h-8 text-blue-600 mx-auto mb-2\" />\n            <div className=\"text-2xl font-bold\">{mockGalleryPosts.length}</div>\n            <div className=\"text-sm text-muted-foreground\">Κοινοποιήσεις</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <Heart className=\"w-8 h-8 text-red-600 mx-auto mb-2\" />\n            <div className=\"text-2xl font-bold\">{mockGalleryPosts.reduce((sum, p) => sum + p.likes, 0)}</div>\n            <div className=\"text-sm text-muted-foreground\">Συνολικά Likes</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <MessageCircle className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n            <div className=\"text-2xl font-bold\">{mockGalleryPosts.reduce((sum, p) => sum + p.comments, 0)}</div>\n            <div className=\"text-sm text-muted-foreground\">Σχόλια</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <Trophy className=\"w-8 h-8 text-yellow-600 mx-auto mb-2\" />\n            <div className=\"text-2xl font-bold\">47</div>\n            <div className=\"text-sm text-muted-foreground\">Ενεργά Μέλη</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"gallery\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"gallery\" data-testid=\"tab-gallery\">Γκαλερί</TabsTrigger>\n          <TabsTrigger value=\"my-posts\" data-testid=\"tab-my-posts\">Οι Δικές μου</TabsTrigger>\n          <TabsTrigger value=\"upload\" data-testid=\"tab-upload\">Μεταφόρτωση</TabsTrigger>\n        </TabsList>\n\n        {/* Main Gallery */}\n        <TabsContent value=\"gallery\" className=\"space-y-6\">\n          {/* Filters */}\n          <div className=\"flex flex-wrap gap-2 items-center\">\n            <Filter className=\"w-4 h-4 text-muted-foreground\" />\n            <span className=\"text-sm text-muted-foreground mr-2\">Φιλτράρισμα:</span>\n            {[\"all\", \"Εύκολο\", \"Μέτριο\", \"Δύσκολο\"].map(filter => (\n              <Button\n                key={filter}\n                variant={selectedFilter === filter ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setSelectedFilter(filter)}\n                data-testid={`filter-${filter}`}\n              >\n                {filter === \"all\" ? \"Όλα\" : filter}\n              </Button>\n            ))}\n          </div>\n\n          {/* Gallery Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredPosts.map((post) => (\n              <Card key={post.id} className=\"overflow-hidden hover:shadow-lg transition-shadow\">\n                <div className=\"relative\">\n                  <img \n                    src={post.imageUrl}\n                    alt={post.title}\n                    className=\"w-full h-48 object-cover cursor-pointer\"\n                    data-testid={`post-image-${post.id}`}\n                  />\n                  <div className=\"absolute top-3 left-3\">\n                    <Badge className={getDifficultyColor(post.difficulty)}>\n                      {post.difficulty}\n                    </Badge>\n                  </div>\n                  <div className=\"absolute top-3 right-3 bg-black/50 text-white px-2 py-1 rounded text-sm\">\n                    <Clock className=\"w-3 h-3 inline mr-1\" />\n                    {formatTime(post.completionTime)}\n                  </div>\n                </div>\n\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start gap-3\">\n                    <img \n                      src={post.userAvatar}\n                      alt={post.userName}\n                      className=\"w-10 h-10 rounded-full\"\n                    />\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-base leading-tight\">{post.title}</CardTitle>\n                      <CardDescription className=\"text-sm\">\n                        {post.userName} • {post.createdAt.toLocaleDateString('el-GR')}\n                      </CardDescription>\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <CardContent className=\"pt-0\">\n                  <p className=\"text-sm text-muted-foreground mb-4 line-clamp-2\">\n                    {post.description}\n                  </p>\n\n                  <div className=\"flex flex-wrap gap-1 mb-4\">\n                    {post.tags.slice(0, 3).map(tag => (\n                      <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                        #{tag}\n                      </Badge>\n                    ))}\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                      <button \n                        className=\"flex items-center gap-1 hover:text-red-600 transition-colors\"\n                        onClick={() => likeMutation.mutate(post.id)}\n                        data-testid={`like-${post.id}`}\n                      >\n                        <Heart className=\"w-4 h-4\" />\n                        {post.likes}\n                      </button>\n                      <div className=\"flex items-center gap-1\">\n                        <MessageCircle className=\"w-4 h-4\" />\n                        {post.comments}\n                      </div>\n                    </div>\n\n                    <Button \n                      variant=\"ghost\" \n                      size=\"icon\"\n                      data-testid={`share-${post.id}`}\n                    >\n                      <Share2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* My Posts */}\n        <TabsContent value=\"my-posts\" className=\"space-y-6\">\n          <Card className=\"text-center py-16\">\n            <CardContent>\n              <Camera className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-2\">Δεν έχετε κοινοποιήσεις ακόμη</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                Μοιραστείτε τα ολοκληρωμένα puzzles σας με την κοινότητα!\n              </p>\n              <Button data-testid=\"button-share-first\">\n                Κοινοποιήστε το Πρώτο σας\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Upload */}\n        <TabsContent value=\"upload\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Μοιραστείτε την Επιτυχία σας</CardTitle>\n              <CardDescription>\n                Ανεβάστε φωτογραφία από το ολοκληρωμένο puzzle σας και εμπνεύστε άλλους\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"border-2 border-dashed border-muted-foreground/25 rounded-lg p-8 text-center\">\n                <Upload className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground mb-4\">\n                  Σύρετε μια φωτογραφία εδώ ή κάντε κλικ για επιλογή\n                </p>\n                <Button variant=\"outline\" data-testid=\"button-select-image\">\n                  Επιλογή Εικόνας\n                </Button>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Τίτλος</label>\n                  <input \n                    type=\"text\"\n                    placeholder=\"Δώστε έναν τίτλο στην κοινοποίησή σας\"\n                    className=\"w-full p-2 border rounded\"\n                    data-testid=\"input-post-title\"\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">Δυσκολία</label>\n                  <select className=\"w-full p-2 border rounded\" data-testid=\"select-difficulty\">\n                    <option>Εύκολο</option>\n                    <option>Μέτριο</option>\n                    <option>Δύσκολο</option>\n                  </select>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Περιγραφή</label>\n                <textarea \n                  placeholder=\"Μοιραστείτε την εμπειρία σας, συμβουλές ή ό,τι άλλο θέλετε...\"\n                  className=\"w-full p-2 border rounded h-24 resize-none\"\n                  data-testid=\"textarea-description\"\n                />\n              </div>\n\n              <div>\n                <label className=\"text-sm font-medium mb-2 block\">Tags (προαιρετικό)</label>\n                <input \n                  type=\"text\"\n                  placeholder=\"π.χ. mandelbrot, challenging, family\"\n                  className=\"w-full p-2 border rounded\"\n                  data-testid=\"input-tags\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Χωρίστε τα tags με κόμματα\n                </p>\n              </div>\n\n              <div className=\"flex items-center gap-2\">\n                <input type=\"checkbox\" id=\"public\" defaultChecked data-testid=\"checkbox-public\" />\n                <label htmlFor=\"public\" className=\"text-sm\">\n                  Κάντε την κοινοποίηση δημόσια (προτείνεται)\n                </label>\n              </div>\n\n              <div className=\"flex justify-end gap-3\">\n                <Button variant=\"outline\">Ακύρωση</Button>\n                <Button data-testid=\"button-publish-post\">\n                  <Camera className=\"w-4 h-4 mr-2\" />\n                  Δημοσίευση\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Guidelines */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Οδηγίες Κοινοποίησης</CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-sm space-y-2\">\n              <div className=\"flex items-start gap-2\">\n                <span className=\"font-semibold text-green-600\">✓</span>\n                <span>Φωτογραφίες υψηλής ποιότητας με καλό φωτισμό</span>\n              </div>\n              <div className=\"flex items-start gap-2\">\n                <span className=\"font-semibold text-green-600\">✓</span>\n                <span>Μοιραστείτε συμβουλές και εμπειρίες</span>\n              </div>\n              <div className=\"flex items-start gap-2\">\n                <span className=\"font-semibold text-green-600\">✓</span>\n                <span>Χρησιμοποιήστε περιγραφικούς τίτλους</span>\n              </div>\n              <div className=\"flex items-start gap-2\">\n                <span className=\"font-semibold text-red-600\">✗</span>\n                <span>Μη ανεβάζετε εικόνες που δεν σας ανήκουν</span>\n              </div>\n              <div className=\"flex items-start gap-2\">\n                <span className=\"font-semibold text-red-600\">✗</span>\n                <span>Αποφύγετε spam ή άσχετο περιεχόμενο</span>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Community Stats */}\n      <Card className=\"mt-8 bg-gradient-to-r from-purple-50 to-pink-50\">\n        <CardContent className=\"p-8 text-center\">\n          <h3 className=\"text-2xl font-bold mb-4\">Συμμετέχετε στην Κοινότητα</h3>\n          <p className=\"text-muted-foreground mb-6\">\n            Ανακαλύψτε νέα patterns, μάθετε τεχνικές και συνδεθείτε με άλλους puzzle lovers\n          </p>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 max-w-2xl mx-auto\">\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <Star className=\"w-6 h-6 text-blue-600\" />\n              </div>\n              <h4 className=\"font-semibold mb-1\">Εμπνευστείτε</h4>\n              <p className=\"text-sm text-muted-foreground\">Δείτε απίστευτα designs</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <MessageCircle className=\"w-6 h-6 text-green-600\" />\n              </div>\n              <h4 className=\"font-semibold mb-1\">Συνδεθείτε</h4>\n              <p className=\"text-sm text-muted-foreground\">Κάντε νέες φιλίες</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <Trophy className=\"w-6 h-6 text-purple-600\" />\n              </div>\n              <h4 className=\"font-semibold mb-1\">Επιτύχετε</h4>\n              <p className=\"text-sm text-muted-foreground\">Μοιραστείτε τις νίκες σας</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":20457},"client/src/pages/subscription.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Package, Calendar, Gift, Star, Truck, Pause, Play, X, Settings } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\n\nexport default function SubscriptionPage() {\n  const [selectedPlan, setSelectedPlan] = useState(\"monthly\");\n  const [selectedDifficulty, setSelectedDifficulty] = useState(\"mixed\");\n  const [selectedMaterial, setSelectedMaterial] = useState(\"mixed\");\n  const queryClient = useQueryClient();\n\n  // Mock subscription data\n  const mockSubscription = {\n    id: \"sub_1\",\n    planType: \"monthly\",\n    status: \"active\",\n    puzzlesPerDelivery: 2,\n    preferredDifficulty: \"mixed\",\n    preferredMaterial: \"premium\",\n    monthlyPrice: \"89.99\",\n    nextDelivery: new Date(\"2025-09-01\"),\n    startedAt: new Date(\"2025-06-01\"),\n  };\n\n  // Mock delivery history\n  const mockDeliveries = [\n    {\n      id: \"del_1\",\n      deliveryDate: new Date(\"2025-08-01\"),\n      puzzles: [\n        { name: \"Cosmic Mandelbrot\", difficulty: \"Δύσκολο\", pieces: 1000, material: \"Ξύλο Premium\" },\n        { name: \"Golden Spiral Mini\", difficulty: \"Μέτριο\", pieces: 500, material: \"Ακρυλικό\" }\n      ],\n      status: \"delivered\",\n      rating: 5\n    },\n    {\n      id: \"del_2\", \n      deliveryDate: new Date(\"2025-07-01\"),\n      puzzles: [\n        { name: \"Julia Dreams\", difficulty: \"Μέτριο\", pieces: 750, material: \"Χαρτόνι Premium\" },\n        { name: \"Fractal Forest\", difficulty: \"Εύκολο\", pieces: 400, material: \"Ξύλο\" }\n      ],\n      status: \"delivered\",\n      rating: 4\n    },\n    {\n      id: \"del_3\",\n      deliveryDate: new Date(\"2025-06-01\"),\n      puzzles: [\n        { name: \"Welcome Box - Starter Set\", difficulty: \"Εύκολο\", pieces: 300, material: \"Χαρτόνι\" }\n      ],\n      status: \"delivered\",\n      rating: 5\n    }\n  ];\n\n  const subscriptionPlans = [\n    {\n      id: \"monthly\",\n      name: \"Μηνιαία Συνδρομή\",\n      price: \"89.99\",\n      puzzles: 2,\n      savings: 0,\n      description: \"2 επιλεγμένα fractal puzzles κάθε μήνα\",\n      features: [\"Δωρεάν μεταφορικά\", \"Προτεραιότητα υποστήριξης\", \"Αποκλειστικά designs\"]\n    },\n    {\n      id: \"quarterly\",\n      name: \"Τριμηνιαία Συνδρομή\", \n      price: \"79.99\",\n      puzzles: 2,\n      savings: 15,\n      description: \"2 puzzles κάθε μήνα με 15% έκπτωση\",\n      features: [\"Όλα από τη μηνιαία\", \"Bonus puzzle στο 3ο μήνα\", \"Πρόωρη πρόσβαση σε νέα designs\"]\n    },\n    {\n      id: \"annual\",\n      name: \"Ετήσια Συνδρομή\",\n      price: \"69.99\", \n      puzzles: 2,\n      savings: 25,\n      description: \"2 puzzles μηνιαίως με 25% έκπτωση\",\n      features: [\"Όλα από την τριμηνιαία\", \"2 bonus puzzles το χρόνο\", \"Δωρεάν premium κάδρα\", \"Αποκλειστικές εκδηλώσεις\"]\n    }\n  ];\n\n  const hasActiveSubscription = mockSubscription?.status === \"active\";\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-4xl font-bold mb-4 text-center bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent\">\n          PuzzleCraft Subscription\n        </h1>\n        <p className=\"text-lg text-muted-foreground text-center\">\n          Λαμβάνετε επιλεγμένα fractal puzzles στην πόρτα σας κάθε μήνα\n        </p>\n      </div>\n\n      {hasActiveSubscription ? (\n        /* Active Subscription Dashboard */\n        <div className=\"space-y-8\">\n          {/* Current Subscription Status */}\n          <Card className=\"bg-gradient-to-r from-green-50 to-blue-50 border-green-200\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Badge className=\"bg-green-500 text-white\">Ενεργή Συνδρομή</Badge>\n                    {subscriptionPlans.find(p => p.id === mockSubscription.planType)?.name}\n                  </CardTitle>\n                  <CardDescription>\n                    {mockSubscription.puzzlesPerDelivery} puzzles κάθε μήνα • €{mockSubscription.monthlyPrice}/μήνα\n                  </CardDescription>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-sm text-muted-foreground\">Επόμενη παράδοση</div>\n                  <div className=\"text-lg font-semibold\">\n                    {mockSubscription.nextDelivery.toLocaleDateString('el-GR', { \n                      day: 'numeric', \n                      month: 'long' \n                    })}\n                  </div>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <div className=\"text-sm text-muted-foreground\">Προτίμηση Δυσκολίας</div>\n                  <div className=\"font-semibold\">{mockSubscription.preferredDifficulty === 'mixed' ? 'Μεικτό' : mockSubscription.preferredDifficulty}</div>\n                </div>\n                <div>\n                  <div className=\"text-sm text-muted-foreground\">Προτίμηση Υλικού</div>\n                  <div className=\"font-semibold\">{mockSubscription.preferredMaterial === 'mixed' ? 'Μεικτό' : mockSubscription.preferredMaterial}</div>\n                </div>\n                <div>\n                  <div className=\"text-sm text-muted-foreground\">Ενεργή από</div>\n                  <div className=\"font-semibold\">\n                    {mockSubscription.startedAt.toLocaleDateString('el-GR')}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex gap-3 mt-6\">\n                <Dialog>\n                  <DialogTrigger asChild>\n                    <Button variant=\"outline\" data-testid=\"button-manage-subscription\">\n                      <Settings className=\"w-4 h-4 mr-2\" />\n                      Διαχείριση\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Διαχείριση Συνδρομής</DialogTitle>\n                      <DialogDescription>\n                        Προσαρμόστε τις προτιμήσεις της συνδρομής σας\n                      </DialogDescription>\n                    </DialogHeader>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <Label>Προτιμώμενη Δυσκολία</Label>\n                        <Select defaultValue={mockSubscription.preferredDifficulty}>\n                          <SelectTrigger data-testid=\"select-difficulty-preference\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"mixed\">Μεικτό</SelectItem>\n                            <SelectItem value=\"easy\">Εύκολο</SelectItem>\n                            <SelectItem value=\"medium\">Μέτριο</SelectItem>\n                            <SelectItem value=\"hard\">Δύσκολο</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div>\n                        <Label>Προτιμώμενο Υλικό</Label>\n                        <Select defaultValue={mockSubscription.preferredMaterial}>\n                          <SelectTrigger data-testid=\"select-material-preference\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"mixed\">Μεικτό</SelectItem>\n                            <SelectItem value=\"wood\">Ξύλο</SelectItem>\n                            <SelectItem value=\"acrylic\">Ακρυλικό</SelectItem>\n                            <SelectItem value=\"cardboard\">Χαρτόνι</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div className=\"flex justify-end gap-2\">\n                        <Button variant=\"outline\">Ακύρωση</Button>\n                        <Button data-testid=\"button-save-preferences\">Αποθήκευση</Button>\n                      </div>\n                    </div>\n                  </DialogContent>\n                </Dialog>\n\n                <Button variant=\"outline\" data-testid=\"button-pause-subscription\">\n                  <Pause className=\"w-4 h-4 mr-2\" />\n                  Παύση\n                </Button>\n\n                <Button variant=\"outline\" data-testid=\"button-skip-delivery\">\n                  Παράλειψη Επόμενης\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Tabs defaultValue=\"deliveries\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"deliveries\" data-testid=\"tab-deliveries\">Ιστορικό Παραδόσεων</TabsTrigger>\n              <TabsTrigger value=\"upcoming\" data-testid=\"tab-upcoming\">Επόμενη Παράδοση</TabsTrigger>\n            </TabsList>\n\n            {/* Delivery History */}\n            <TabsContent value=\"deliveries\" className=\"space-y-4\">\n              {mockDeliveries.map((delivery) => (\n                <Card key={delivery.id}>\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"text-lg\">\n                        Παράδοση {delivery.deliveryDate.toLocaleDateString('el-GR')}\n                      </CardTitle>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge className=\"bg-green-100 text-green-800\">\n                          Παραδόθηκε\n                        </Badge>\n                        <div className=\"flex items-center gap-1\">\n                          {[...Array(5)].map((_, i) => (\n                            <Star \n                              key={i}\n                              className={`w-4 h-4 ${i < delivery.rating ? 'text-yellow-500 fill-yellow-500' : 'text-gray-300'}`}\n                            />\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      {delivery.puzzles.map((puzzle, index) => (\n                        <div key={index} className=\"flex items-center gap-3 p-3 bg-muted rounded\">\n                          <Package className=\"w-6 h-6 text-blue-600\" />\n                          <div>\n                            <div className=\"font-semibold\">{puzzle.name}</div>\n                            <div className=\"text-sm text-muted-foreground\">\n                              {puzzle.difficulty} • {puzzle.pieces} κομμάτια • {puzzle.material}\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </TabsContent>\n\n            {/* Upcoming Delivery */}\n            <TabsContent value=\"upcoming\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Truck className=\"w-5 h-5 text-blue-600\" />\n                    Επόμενη Παράδοση - {mockSubscription.nextDelivery.toLocaleDateString('el-GR')}\n                  </CardTitle>\n                  <CardDescription>\n                    Τα επιλεγμένα puzzles θα σας σταλούν σύντομα\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center py-8\">\n                    <Gift className=\"w-16 h-16 text-purple-600 mx-auto mb-4\" />\n                    <h3 className=\"text-xl font-semibold mb-2\">Είναι έκπληξη! 🎉</h3>\n                    <p className=\"text-muted-foreground mb-4\">\n                      Τα επιλεγμένα puzzles θα είναι έκπληξη βασισμένα στις προτιμήσεις σας\n                    </p>\n                    <div className=\"inline-flex items-center gap-2 bg-blue-50 px-4 py-2 rounded-full\">\n                      <Calendar className=\"w-4 h-4 text-blue-600\" />\n                      <span className=\"text-sm font-medium text-blue-800\">\n                        Αποστολή σε {Math.ceil((mockSubscription.nextDelivery.getTime() - Date.now()) / (1000 * 60 * 60 * 24))} ημέρες\n                      </span>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-6\">\n                    <div className=\"p-4 bg-muted rounded\">\n                      <h4 className=\"font-semibold mb-2\">Οι προτιμήσεις σας:</h4>\n                      <ul className=\"text-sm space-y-1\">\n                        <li>• Δυσκολία: {mockSubscription.preferredDifficulty === 'mixed' ? 'Μεικτό' : mockSubscription.preferredDifficulty}</li>\n                        <li>• Υλικό: {mockSubscription.preferredMaterial === 'mixed' ? 'Μεικτό' : mockSubscription.preferredMaterial}</li>\n                        <li>• Ποσότητα: {mockSubscription.puzzlesPerDelivery} puzzles</li>\n                      </ul>\n                    </div>\n                    <div className=\"p-4 bg-muted rounded\">\n                      <h4 className=\"font-semibold mb-2\">Συμπεριλαμβάνονται:</h4>\n                      <ul className=\"text-sm space-y-1\">\n                        <li>• Δωρεάν μεταφορικά</li>\n                        <li>• Premium συσκευασία</li>\n                        <li>• Οδηγίες & tips</li>\n                        <li>• Εγγύηση ποιότητας</li>\n                      </ul>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      ) : (\n        /* Subscription Plans */\n        <div className=\"space-y-8\">\n          {/* How it Works */}\n          <Card className=\"bg-gradient-to-r from-blue-50 to-purple-50\">\n            <CardContent className=\"p-8\">\n              <h2 className=\"text-2xl font-bold text-center mb-8\">Πώς Λειτουργεί</h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-blue-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <span className=\"text-white font-bold text-xl\">1</span>\n                  </div>\n                  <h3 className=\"font-semibold mb-2\">Επιλέξτε Πλάνο</h3>\n                  <p className=\"text-sm text-muted-foreground\">Διαλέξτε τη συχνότητα και τις προτιμήσεις σας</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-purple-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <span className=\"text-white font-bold text-xl\">2</span>\n                  </div>\n                  <h3 className=\"font-semibold mb-2\">Λάβετε Έκπληξη</h3>\n                  <p className=\"text-sm text-muted-foreground\">Επιλεγμένα puzzles έρχονται στην πόρτα σας</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <span className=\"text-white font-bold text-xl\">3</span>\n                  </div>\n                  <h3 className=\"font-semibold mb-2\">Απολαύστε & Μοιραστείτε</h3>\n                  <p className=\"text-sm text-muted-foreground\">Λύστε τα puzzles και κοινοποιήστε στην κοινότητα</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Pricing Plans */}\n          <div>\n            <h2 className=\"text-2xl font-bold text-center mb-8\">Επιλέξτε το Πλάνο σας</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {subscriptionPlans.map((plan) => (\n                <Card \n                  key={plan.id} \n                  className={`relative overflow-hidden ${plan.id === 'quarterly' ? 'ring-2 ring-purple-500 shadow-lg scale-105' : ''}`}\n                >\n                  {plan.id === 'quarterly' && (\n                    <div className=\"absolute top-0 left-0 right-0 bg-purple-500 text-white text-center py-2 text-sm font-semibold\">\n                      Πιο Δημοφιλές\n                    </div>\n                  )}\n                  \n                  <CardHeader className={plan.id === 'quarterly' ? 'pt-12' : ''}>\n                    <CardTitle className=\"text-xl\">{plan.name}</CardTitle>\n                    <CardDescription>{plan.description}</CardDescription>\n                    \n                    <div className=\"text-center py-4\">\n                      <div className=\"text-3xl font-bold\">€{plan.price}</div>\n                      <div className=\"text-sm text-muted-foreground\">/μήνα</div>\n                      {plan.savings > 0 && (\n                        <Badge className=\"mt-2 bg-green-100 text-green-800\">\n                          Εξοικονόμηση {plan.savings}%\n                        </Badge>\n                      )}\n                    </div>\n                  </CardHeader>\n\n                  <CardContent>\n                    <ul className=\"space-y-2 mb-6\">\n                      <li className=\"flex items-center gap-2\">\n                        <Package className=\"w-4 h-4 text-green-600\" />\n                        <span className=\"text-sm\">{plan.puzzles} puzzles/μήνα</span>\n                      </li>\n                      {plan.features.map((feature, index) => (\n                        <li key={index} className=\"flex items-center gap-2\">\n                          <Star className=\"w-4 h-4 text-green-600\" />\n                          <span className=\"text-sm\">{feature}</span>\n                        </li>\n                      ))}\n                    </ul>\n\n                    <Button \n                      className=\"w-full\"\n                      variant={plan.id === 'quarterly' ? 'default' : 'outline'}\n                      data-testid={`subscribe-${plan.id}`}\n                    >\n                      Επιλογή Πλάνου\n                    </Button>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </div>\n\n          {/* FAQ */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Συχνές Ερωτήσεις</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-semibold mb-2\">Μπορώ να ακυρώσω οποτεδήποτε;</h4>\n                <p className=\"text-sm text-muted-foreground\">Ναι, μπορείτε να ακυρώσετε ή να παγώσετε τη συνδρομή σας οποτεδήποτε χωρίς επιπλέον χρεώσεις.</p>\n              </div>\n              <div>\n                <h4 className=\"font-semibold mb-2\">Πώς επιλέγονται τα puzzles;</h4>\n                <p className=\"text-sm text-muted-foreground\">Η ομάδα μας επιλέγει προσεκτικά τα puzzles βασισμένη στις προτιμήσεις σας και τις νέες κυκλοφορίες.</p>\n              </div>\n              <div>\n                <h4 className=\"font-semibold mb-2\">Υπάρχουν μεταφορικά;</h4>\n                <p className=\"text-sm text-muted-foreground\">Όχι! Όλες οι συνδρομές περιλαμβάνουν δωρεάν μεταφορικά σε όλη την Ελλάδα.</p>\n              </div>\n              <div>\n                <h4 className=\"font-semibold mb-2\">Μπορώ να αλλάξω τις προτιμήσεις μου;</h4>\n                <p className=\"text-sm text-muted-foreground\">Βεβαίως! Μπορείτε να ενημερώσετε τις προτιμήσεις σας οποτεδήποτε από τον λογαριασμό σας.</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":21917},"client/src/pages/terms-of-use.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function TermsOfUse() {\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <h1 className=\"text-4xl font-bold mb-8 text-center\">Όροι Χρήσης</h1>\n        \n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Αποδοχή Όρων</CardTitle>\n            <CardDescription>Συμφωνία χρήσης των υπηρεσιών FractalCraft</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground mb-4\">\n              Με την πρόσβαση και χρήση της ιστοσελίδας FractalCraft, αποδέχεστε πλήρως τους παρακάτω όρους χρήσης. \n              Εάν δεν συμφωνείτε με οποιονδήποτε από αυτούς τους όρους, παρακαλούμε μη χρησιμοποιείτε τις υπηρεσίες μας.\n            </p>\n            <p className=\"text-muted-foreground\">\n              Οι όροι μπορεί να τροποποιηθούν ανά πάσα στιγμή. Η συνεχής χρήση συνιστά αποδοχή των τροποποιήσεων.\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Υπηρεσίες & Προϊόντα</CardTitle>\n            <CardDescription>Περιγραφή των προσφερόμενων υπηρεσιών</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <h3 className=\"font-semibold mb-2\">Προσωποποιημένα Puzzle</h3>\n              <p className=\"text-muted-foreground\">Παρέχουμε υπηρεσίες δημιουργίας προσωποποιημένων puzzle με fractal σχέδια ή φωτογραφίες πελατών.</p>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-2\">Ποιότητα Προϊόντων</h3>\n              <p className=\"text-muted-foreground\">Τα προϊόντα κατασκευάζονται με υψηλής ποιότητας υλικά (ξύλο, ακρυλικό, χαρτόνι) και σύγχρονες τεχνικές εκτύπωσης.</p>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-2\">Χρόνοι Παράδοσης</h3>\n              <p className=\"text-muted-foreground\">Οι χρόνοι παράδοσης κυμαίνονται από 3-7 εργάσιμες ημέρες εντός Ελλάδας, 7-14 ημέρες για διεθνείς παραδόσεις.</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Λογαριασμός & Υποχρεώσεις Χρήστη</CardTitle>\n            <CardDescription>Κανόνες δημιουργίας και χρήσης λογαριασμού</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <ul className=\"list-disc pl-6 space-y-2 text-muted-foreground\">\n              <li>Πρέπει να είστε τουλάχιστον 18 ετών για δημιουργία λογαριασμού</li>\n              <li>Παρέχετε ακριβείς και πλήρεις πληροφορίες κατά την εγγραφή</li>\n              <li>Διατηρείτε την εμπιστευτικότητα των στοιχείων σύνδεσης</li>\n              <li>Ενημερώνετε τα στοιχεία σας σε περίπτωση αλλαγών</li>\n              <li>Είστε υπεύθυνοι για όλες τις δραστηριότητες του λογαριασμού σας</li>\n              <li>Ειδοποιείτε άμεσα για μη εξουσιοδοτημένη χρήση</li>\n            </ul>\n          </CardContent>\n        </Card>\n\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Παραγγελίες & Πληρωμές</CardTitle>\n            <CardDescription>Διαδικασία παραγγελιών και πληρωμών</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <h3 className=\"font-semibold mb-2\">Διαδικασία Παραγγελίας</h3>\n              <p className=\"text-muted-foreground\">Οι παραγγελίες θεωρούνται οριστικές μετά την επιτυχή πληρωμή και την αποστολή email επιβεβαίωσης.</p>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-2\">Τρόποι Πληρωμής</h3>\n              <p className=\"text-muted-foreground\">Δεχόμαστε πιστωτικές κάρτες, PayPal, τραπεζική μεταφορά και αντικαταβολή.</p>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-2\">Τιμές</h3>\n              <p className=\"text-muted-foreground\">Οι τιμές περιλαμβάνουν ΦΠΑ 24%. Διατηρούμε το δικαίωμα τροποποίησης χωρίς προειδοποίηση.</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Πολιτική Επιστροφών</CardTitle>\n            <CardDescription>Όροι επιστροφής και ακύρωσης παραγγελιών</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <h3 className=\"font-semibold mb-2\">Δικαίωμα Επιστροφής</h3>\n              <p className=\"text-muted-foreground\">Έχετε 14 ημέρες από την παραλαβή για επιστροφή, εκτός από προσωποποιημένα προϊόντα.</p>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-2\">Κόστος Επιστροφής</h3>\n              <p className=\"text-muted-foreground\">Το κόστος επιστροφής βαρύνει τον πελάτη, εκτός σε περίπτωση ελαττωματικού προϊόντος.</p>\n            </div>\n            <div>\n              <h3 className=\"font-semibold mb-2\">Διαδικασία Επιστροφής</h3>\n              <p className=\"text-muted-foreground\">Επικοινωνήστε μαζί μας για αίτηση επιστροφής και λάβετε οδηγίες αποστολής.</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Πνευματικά Δικαιώματα</CardTitle>\n            <CardDescription>Κανόνες χρήσης περιεχομένου και εικόνων</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p className=\"text-muted-foreground\">\n              Κατά την αποστολή εικόνων για δημιουργία puzzle, βεβαιώνετε ότι κατέχετε τα απαραίτητα δικαιώματα χρήσης. \n              Δεν αποδεχόμαστε εικόνες που παραβιάζουν πνευματικά δικαιώματα τρίτων.\n            </p>\n            <ul className=\"list-disc pl-6 space-y-2 text-muted-foreground\">\n              <li>Δεν επεξεργαζόμαστε εικόνες με άδεια τρίτων χωρίς έγγραφη άδεια</li>\n              <li>Απαγορεύεται περιεχόμενο προσβλητικό, παράνομο ή ακατάλληλο</li>\n              <li>Διατηρούμε το δικαίωμα άρνησης εκτέλεσης παραγγελίας</li>\n            </ul>\n          </CardContent>\n        </Card>\n\n        <Card className=\"mb-8\">\n          <CardHeader>\n            <CardTitle>Περιορισμός Ευθύνης</CardTitle>\n            <CardDescription>Όρια ευθύνης της εταιρείας</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p className=\"text-muted-foreground\">\n              Η FractalCraft δεν φέρει ευθύνη για έμμεσες, συνεπακόλουθες ή ειδικές ζημίες που μπορεί να προκύψουν \n              από τη χρήση των υπηρεσιών μας. Η ευθύνη μας περιορίζεται στην αξία των προϊόντων.\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Εφαρμοστέο Δίκαιο</CardTitle>\n            <CardDescription>Νομικό πλαίσιο και επίλυση διαφορών</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground\">\n              Οι παρόντες όροι διέπονται από το ελληνικό δίκαιο. Αρμόδια είναι τα δικαστήρια της Αθήνας για \n              την επίλυση τυχόν διαφορών.\n            </p>\n            <p className=\"mt-4 p-4 bg-green-50 rounded-lg\">\n              <strong>Επικοινωνία:</strong> legal@fractalcraft.gr | Τηλ: +30 210 1234567\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":9712},"client/src/pages/wishlist.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Heart, ShoppingCart, Trash2, Share2, Eye, Star } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Link } from \"wouter\";\n\nexport default function WishlistPage() {\n  const queryClient = useQueryClient();\n  \n  // Mock wishlist data - in real app would come from API\n  const { data: wishlistItems = [] } = useQuery({\n    queryKey: ['/api/wishlist'],\n    enabled: false, // Disabled until user auth is implemented\n  });\n\n  // Mock wishlist items for demo\n  const mockWishlistItems = [\n    {\n      id: \"1\",\n      puzzleName: \"Mandelbrot Dreams\",\n      puzzleDesign: \"mandelbrot-blue\",\n      material: \"Ξύλο Premium\",\n      size: \"50x70cm\",\n      difficulty: \"Δύσκολο\",\n      estimatedPrice: \"89.99\",\n      createdAt: new Date(\"2025-08-10\"),\n      imageUrl: \"https://images.unsplash.com/photo-1517077304055-6e89abbf09b0?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n    },\n    {\n      id: \"2\",\n      puzzleName: \"Golden Spiral\",\n      puzzleDesign: \"fibonacci-spiral\",\n      material: \"Ακρυλικό\",\n      size: \"40x60cm\", \n      difficulty: \"Μέτριο\",\n      estimatedPrice: \"65.50\",\n      createdAt: new Date(\"2025-08-08\"),\n      imageUrl: \"https://images.unsplash.com/photo-1635070041078-e363dbe005cb?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n    },\n    {\n      id: \"3\",\n      puzzleName: \"Julia Universe\",\n      puzzleDesign: \"julia-set-purple\",\n      material: \"Χαρτόνι Premium\",\n      size: \"30x45cm\",\n      difficulty: \"Εύκολο\",\n      estimatedPrice: \"42.00\",\n      createdAt: new Date(\"2025-08-05\"),\n      imageUrl: \"https://images.unsplash.com/photo-1541961017774-22349e4a1262?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n    }\n  ];\n\n  const removeMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/wishlist/${id}`, 'DELETE'),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/wishlist'] });\n    }\n  });\n\n  const addToCartMutation = useMutation({\n    mutationFn: (item: any) => apiRequest('/api/cart', 'POST', item),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart'] });\n    }\n  });\n\n  const handleRemoveFromWishlist = (id: string) => {\n    if (confirm(\"Είστε σίγουροι ότι θέλετε να αφαιρέσετε αυτό το αντικείμενο από τη λίστα επιθυμιών σας;\")) {\n      removeMutation.mutate(id);\n    }\n  };\n\n  const handleAddToCart = (item: any) => {\n    addToCartMutation.mutate({\n      puzzleDesign: item.puzzleDesign,\n      puzzleName: item.puzzleName,\n      material: item.material,\n      size: item.size,\n      difficulty: item.difficulty,\n      quantity: 1,\n      price: item.estimatedPrice,\n      sessionId: 'user-session' // In real app, this would be actual session\n    });\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'Εύκολο': return 'bg-green-100 text-green-800';\n      case 'Μέτριο': return 'bg-yellow-100 text-yellow-800';\n      case 'Δύσκολο': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getMaterialIcon = (material: string) => {\n    if (material.includes('Ξύλο')) return '🪵';\n    if (material.includes('Ακρυλικό')) return '💎';\n    if (material.includes('Χαρτόνι')) return '📄';\n    return '🧩';\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-4xl font-bold mb-4 text-center bg-gradient-to-r from-pink-600 to-purple-600 bg-clip-text text-transparent\">\n          Λίστα Επιθυμιών\n        </h1>\n        <p className=\"text-lg text-muted-foreground text-center\">\n          Αποθηκεύστε τα αγαπημένα σας fractal puzzle για μελλοντική αγορά\n        </p>\n      </div>\n\n      {/* Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-8\">\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <Heart className=\"w-8 h-8 text-pink-600 mx-auto mb-2\" />\n            <div className=\"text-2xl font-bold\">{mockWishlistItems.length}</div>\n            <div className=\"text-sm text-muted-foreground\">Αγαπημένα Puzzle</div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <Star className=\"w-8 h-8 text-yellow-600 mx-auto mb-2\" />\n            <div className=\"text-2xl font-bold\">\n              €{mockWishlistItems.reduce((sum, item) => sum + parseFloat(item.estimatedPrice), 0).toFixed(2)}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Συνολική Αξία</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6 text-center\">\n            <ShoppingCart className=\"w-8 h-8 text-blue-600 mx-auto mb-2\" />\n            <div className=\"text-2xl font-bold\">3</div>\n            <div className=\"text-sm text-muted-foreground\">Διαθέσιμα Προς Αγορά</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Wishlist Items */}\n      {mockWishlistItems.length > 0 ? (\n        <div className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-2xl font-semibold\">Τα Επιλεγμένα σας</h2>\n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-share-wishlist\">\n                <Share2 className=\"w-4 h-4 mr-2\" />\n                Κοινοποίηση\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-add-all-to-cart\">\n                <ShoppingCart className=\"w-4 h-4 mr-2\" />\n                Προσθήκη Όλων στο Καλάθι\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {mockWishlistItems.map((item) => (\n              <Card key={item.id} className=\"overflow-hidden hover:shadow-lg transition-shadow\">\n                <div className=\"relative\">\n                  <img \n                    src={item.imageUrl} \n                    alt={item.puzzleName}\n                    className=\"w-full h-48 object-cover\"\n                  />\n                  <div className=\"absolute top-4 left-4\">\n                    <Badge className={getDifficultyColor(item.difficulty)}>\n                      {item.difficulty}\n                    </Badge>\n                  </div>\n                  <div className=\"absolute top-4 right-4\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      className=\"bg-white/80 hover:bg-white\"\n                      onClick={() => handleRemoveFromWishlist(item.id)}\n                      data-testid={`button-remove-${item.id}`}\n                    >\n                      <Heart className=\"w-5 h-5 text-red-600 fill-red-600\" />\n                    </Button>\n                  </div>\n                </div>\n\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div>\n                      <CardTitle className=\"text-xl\">{item.puzzleName}</CardTitle>\n                      <CardDescription className=\"flex items-center gap-1 mt-1\">\n                        {getMaterialIcon(item.material)} {item.material} • {item.size}\n                      </CardDescription>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-2xl font-bold text-blue-600\">€{item.estimatedPrice}</div>\n                      <div className=\"text-xs text-muted-foreground\">εκτιμώμενη τιμή</div>\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"text-sm text-muted-foreground\">\n                      Προστέθηκε στις {item.createdAt.toLocaleDateString('el-GR', { \n                        day: 'numeric', \n                        month: 'long', \n                        year: 'numeric' \n                      })}\n                    </div>\n\n                    <div className=\"flex gap-2\">\n                      <Button \n                        className=\"flex-1\"\n                        onClick={() => handleAddToCart(item)}\n                        disabled={addToCartMutation.isPending}\n                        data-testid={`button-add-to-cart-${item.id}`}\n                      >\n                        <ShoppingCart className=\"w-4 h-4 mr-2\" />\n                        {addToCartMutation.isPending ? 'Προσθήκη...' : 'Προσθήκη στο Καλάθι'}\n                      </Button>\n                      \n                      <Button \n                        variant=\"outline\" \n                        size=\"icon\"\n                        asChild\n                        data-testid={`button-preview-${item.id}`}\n                      >\n                        <Link href={`/configurator?design=${item.puzzleDesign}`}>\n                          <Eye className=\"w-4 h-4\" />\n                        </Link>\n                      </Button>\n                      \n                      <Button \n                        variant=\"ghost\" \n                        size=\"icon\"\n                        onClick={() => handleRemoveFromWishlist(item.id)}\n                        disabled={removeMutation.isPending}\n                        data-testid={`button-delete-${item.id}`}\n                      >\n                        <Trash2 className=\"w-4 h-4 text-red-600\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Quick Actions */}\n          <Card className=\"bg-gradient-to-r from-blue-50 to-purple-50\">\n            <CardHeader>\n              <CardTitle>Γρήγορες Ενέργειες</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex flex-wrap gap-3\">\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-filter-material\">\n                  Φιλτράρισμα κατά Υλικό\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-sort-price\">\n                  Ταξινόμηση κατά Τιμή\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-price-alert\">\n                  Ειδοποίηση Τιμής\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-gift-list\">\n                  Μετατροπή σε Gift List\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      ) : (\n        /* Empty State */\n        <Card className=\"text-center py-16\">\n          <CardContent>\n            <Heart className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold mb-2\">Η λίστα επιθυμιών σας είναι άδεια</h3>\n            <p className=\"text-muted-foreground mb-6\">\n              Ξεκινήστε να προσθέτετε τα αγαπημένα σας fractal puzzle!\n            </p>\n            <div className=\"flex gap-3 justify-center\">\n              <Button asChild data-testid=\"button-browse-templates\">\n                <Link href=\"/templates\">\n                  Περιήγηση Σχεδίων\n                </Link>\n              </Button>\n              <Button variant=\"outline\" asChild data-testid=\"button-create-custom\">\n                <Link href=\"/configurator\">\n                  Δημιουργία Custom\n                </Link>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Tips */}\n      <Card className=\"mt-8\">\n        <CardHeader>\n          <CardTitle className=\"text-lg\">💡 Συμβουλές για τη Λίστα Επιθυμιών</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n            <div>\n              <h4 className=\"font-semibold mb-2\">Εξοικονόμηση Χρημάτων:</h4>\n              <ul className=\"space-y-1 text-muted-foreground\">\n                <li>• Παρακολουθείτε τις τιμές για εκπτώσεις</li>\n                <li>• Συνδυάστε αγορές για δωρεάν μεταφορικά</li>\n                <li>• Χρησιμοποιήστε πόντους πιστότητας</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-2\">Οργάνωση:</h4>\n              <ul className=\"space-y-1 text-muted-foreground\">\n                <li>• Ομαδοποιήστε κατά δυσκολία</li>\n                <li>• Σημειώστε προτεραιότητες</li>\n                <li>• Κοινοποιήστε για δώρα</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":13686},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"import * as React from \"react\"\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }","size_bytes":343},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }","size_bytes":776},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }","size_bytes":1076},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":771},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/lib/contexts/cart-context.tsx":{"content":"import { createContext, useContext, useState, useEffect } from 'react';\nimport { type PuzzleConfiguration } from '@shared/schema';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface CartItem {\n  id: string;\n  puzzleConfig: PuzzleConfiguration;\n  quantity: number;\n  totalPrice: number;\n}\n\ninterface CartContextType {\n  items: CartItem[];\n  addItem: (config: PuzzleConfiguration) => void;\n  removeItem: (id: string) => void;\n  updateQuantity: (id: string, quantity: number) => void;\n  clearCart: () => void;\n  totalItems: number;\n  totalPrice: number;\n  isLoading: boolean;\n}\n\nconst CartContext = createContext<CartContextType | undefined>(undefined);\n\n// Generate session ID\nlet sessionId = localStorage.getItem('puzzlecraft-session-id');\nif (!sessionId) {\n  sessionId = `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  localStorage.setItem('puzzlecraft-session-id', sessionId);\n}\n\nexport function CartProvider({ children }: { children: React.ReactNode }) {\n  const queryClient = useQueryClient();\n\n  // Set session ID for all requests\n  useEffect(() => {\n    const originalFetch = window.fetch;\n    window.fetch = function(input: RequestInfo | URL, init?: RequestInit) {\n      const headers = {\n        'X-Session-Id': sessionId!,\n        ...(init?.headers as Record<string, string>)\n      };\n      return originalFetch(input, { ...init, headers });\n    };\n  }, []);\n\n  const { data: items = [], isLoading } = useQuery<CartItem[]>({\n    queryKey: ['/api/cart'],\n    refetchOnWindowFocus: false,\n  });\n\n  const addItemMutation = useMutation({\n    mutationFn: async (config: PuzzleConfiguration) => {\n      const response = await apiRequest('POST', '/api/cart', {\n        puzzleConfig: config,\n        quantity: 1,\n        totalPrice: config.totalPrice\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart'] });\n    }\n  });\n\n  const removeItemMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest('DELETE', `/api/cart/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart'] });\n    }\n  });\n\n  const updateQuantityMutation = useMutation({\n    mutationFn: async ({ id, quantity }: { id: string; quantity: number }) => {\n      const response = await apiRequest('PUT', `/api/cart/${id}`, { quantity });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart'] });\n    }\n  });\n\n  const clearCartMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest('DELETE', '/api/cart');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart'] });\n    }\n  });\n\n  const totalItems = items.reduce((sum, item) => sum + item.quantity, 0);\n  const totalPrice = items.reduce((sum, item) => sum + (item.totalPrice * item.quantity), 0);\n\n  return (\n    <CartContext.Provider\n      value={{\n        items,\n        addItem: (config) => addItemMutation.mutate(config),\n        removeItem: (id) => removeItemMutation.mutate(id),\n        updateQuantity: (id, quantity) => updateQuantityMutation.mutate({ id, quantity }),\n        clearCart: () => clearCartMutation.mutate(),\n        totalItems,\n        totalPrice,\n        isLoading,\n      }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart() {\n  const context = useContext(CartContext);\n  if (context === undefined) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n}\n","size_bytes":3649},"client/src/pages/admin/customers.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { \n  Search, \n  Eye,\n  Mail,\n  Phone,\n  MapPin,\n  Calendar,\n  ShoppingBag,\n  DollarSign,\n  TrendingUp\n} from \"lucide-react\";\n\nexport default function AdminCustomers() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCustomer, setSelectedCustomer] = useState<any>(null);\n\n  // Mock customers data\n  const mockCustomers = [\n    {\n      id: \"CUST-001\",\n      name: \"Μαρία Παπαδάκη\",\n      email: \"maria@example.com\",\n      phone: \"+30 6912345678\",\n      address: \"Ακαδημίας 15, Αθήνα 10671\",\n      registrationDate: \"2025-03-15T10:00:00Z\",\n      lastOrderDate: \"2025-08-12T10:30:00Z\",\n      totalOrders: 8,\n      totalSpent: 687.40,\n      averageOrderValue: 85.93,\n      status: \"active\",\n      orderHistory: [\n        { id: \"ORD-001\", date: \"2025-08-12\", total: 157.40, status: \"processing\" },\n        { id: \"ORD-015\", date: \"2025-08-05\", total: 89.90, status: \"delivered\" },\n        { id: \"ORD-028\", date: \"2025-07-28\", total: 124.50, status: \"delivered\" },\n        { id: \"ORD-034\", date: \"2025-07-15\", total: 67.30, status: \"delivered\" },\n        { id: \"ORD-041\", date: \"2025-07-02\", total: 98.70, status: \"delivered\" },\n      ]\n    },\n    {\n      id: \"CUST-002\",\n      name: \"Γιάννης Κωστόπουλος\",\n      email: \"giannis@example.com\",\n      phone: \"+30 6987654321\",\n      address: \"Πατησίων 120, Αθήνα 11251\",\n      registrationDate: \"2025-01-22T14:30:00Z\",\n      lastOrderDate: \"2025-08-11T15:20:00Z\",\n      totalOrders: 12,\n      totalSpent: 1234.80,\n      averageOrderValue: 102.90,\n      status: \"active\",\n      orderHistory: [\n        { id: \"ORD-002\", date: \"2025-08-11\", total: 124.90, status: \"shipped\" },\n        { id: \"ORD-012\", date: \"2025-08-03\", total: 156.70, status: \"delivered\" },\n        { id: \"ORD-019\", date: \"2025-07-25\", total: 78.20, status: \"delivered\" },\n      ]\n    },\n    {\n      id: \"CUST-003\",\n      name: \"Ελένη Αντωνίου\",\n      email: \"eleni@example.com\",\n      phone: \"+30 6976543210\",\n      address: \"Βουκουρεστίου 8, Αθήνα 10671\",\n      registrationDate: \"2025-06-10T09:15:00Z\",\n      lastOrderDate: \"2025-08-10T12:45:00Z\",\n      totalOrders: 3,\n      totalSpent: 245.60,\n      averageOrderValue: 81.87,\n      status: \"active\",\n      orderHistory: [\n        { id: \"ORD-003\", date: \"2025-08-10\", total: 67.30, status: \"delivered\" },\n        { id: \"ORD-022\", date: \"2025-07-20\", total: 89.90, status: \"delivered\" },\n        { id: \"ORD-031\", date: \"2025-06-15\", total: 88.40, status: \"delivered\" },\n      ]\n    },\n    {\n      id: \"CUST-004\",\n      name: \"Νίκος Σταθόπουλος\",\n      email: \"nikos@example.com\",\n      phone: \"+30 6965432109\",\n      address: \"Κηφισίας 25, Κηφισιά 14562\",\n      registrationDate: \"2024-11-08T16:45:00Z\",\n      lastOrderDate: \"2025-05-14T11:20:00Z\",\n      totalOrders: 15,\n      totalSpent: 1876.30,\n      averageOrderValue: 125.09,\n      status: \"inactive\",\n      orderHistory: [\n        { id: \"ORD-087\", date: \"2025-05-14\", total: 143.20, status: \"delivered\" },\n        { id: \"ORD-076\", date: \"2025-05-02\", total: 97.50, status: \"delivered\" },\n        { id: \"ORD-065\", date: \"2025-04-28\", total: 189.90, status: \"delivered\" },\n      ]\n    },\n  ];\n\n  const filteredCustomers = mockCustomers.filter(customer =>\n    customer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    customer.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    customer.id.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      active: \"secondary\" as const,\n      inactive: \"outline\" as const\n    };\n    \n    const labels = {\n      active: \"Ενεργός\",\n      inactive: \"Ανενεργός\"\n    };\n\n    return <Badge variant={variants[status as keyof typeof variants]}>{labels[status as keyof typeof labels]}</Badge>;\n  };\n\n  const getOrderStatusBadge = (status: string) => {\n    const variants = {\n      pending: \"outline\" as const,\n      processing: \"default\" as const,\n      shipped: \"secondary\" as const,\n      delivered: \"secondary\" as const,\n      cancelled: \"destructive\" as const\n    };\n\n    const labels = {\n      pending: \"Εκκρεμεί\",\n      processing: \"Επεξεργασία\",\n      shipped: \"Αποστάλη\",\n      delivered: \"Παραδόθηκε\",\n      cancelled: \"Ακυρώθηκε\"\n    };\n\n    return <Badge variant={variants[status as keyof typeof variants]} className=\"text-xs\">{labels[status as keyof typeof labels]}</Badge>;\n  };\n\n  const getCustomerTier = (totalSpent: number) => {\n    if (totalSpent >= 1500) return { label: \"VIP\", color: \"text-yellow-600 bg-yellow-50\" };\n    if (totalSpent >= 800) return { label: \"Gold\", color: \"text-orange-600 bg-orange-50\" };\n    if (totalSpent >= 300) return { label: \"Silver\", color: \"text-gray-600 bg-gray-50\" };\n    return { label: \"Bronze\", color: \"text-amber-600 bg-amber-50\" };\n  };\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Διαχείριση Πελατών</h1>\n          <p className=\"text-muted-foreground\">Προβολή και διαχείριση πληροφοριών πελατών</p>\n        </div>\n        <div className=\"text-sm text-muted-foreground\">\n          Συνολικά Πελάτες: {filteredCustomers.length}\n        </div>\n      </div>\n\n      {/* Search */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"pt-6\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Αναζήτηση πελατών (όνομα, email, ID)...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-customers\"\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Customer Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Συνολικοί Πελάτες</CardTitle>\n            <ShoppingBag className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{mockCustomers.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              <TrendingUp className=\"inline w-3 h-3 mr-1\" />\n              +12% αυτό το μήνα\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Ενεργοί Πελάτες</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{mockCustomers.filter(c => c.status === 'active').length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {Math.round((mockCustomers.filter(c => c.status === 'active').length / mockCustomers.length) * 100)}% του συνόλου\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Μέσος Όρος Αξίας</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              €{(mockCustomers.reduce((sum, c) => sum + c.averageOrderValue, 0) / mockCustomers.length).toFixed(2)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Ανά παραγγελία</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Συνολικά Έσοδα</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              €{mockCustomers.reduce((sum, c) => sum + c.totalSpent, 0).toFixed(2)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">Από όλους τους πελάτες</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Customers Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Πελάτες ({filteredCustomers.length})</CardTitle>\n          <CardDescription>Όλοι οι εγγεγραμμένοι πελάτες με στατιστικά στοιχεία</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Πελάτης</TableHead>\n                <TableHead>Επαφή</TableHead>\n                <TableHead>Εγγραφή</TableHead>\n                <TableHead>Παραγγελίες</TableHead>\n                <TableHead>Σύνολο</TableHead>\n                <TableHead>Μέσος Όρος</TableHead>\n                <TableHead>Επίπεδο</TableHead>\n                <TableHead>Κατάσταση</TableHead>\n                <TableHead>Ενέργειες</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredCustomers.map((customer) => {\n                const tier = getCustomerTier(customer.totalSpent);\n                return (\n                  <TableRow key={customer.id}>\n                    <TableCell>\n                      <div>\n                        <p className=\"font-medium\">{customer.name}</p>\n                        <p className=\"text-xs text-muted-foreground\">{customer.id}</p>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-xs space-y-1\">\n                        <div className=\"flex items-center gap-1\">\n                          <Mail className=\"w-3 h-3\" />\n                          {customer.email}\n                        </div>\n                        <div className=\"flex items-center gap-1\">\n                          <Phone className=\"w-3 h-3\" />\n                          {customer.phone}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-xs\">\n                        {new Date(customer.registrationDate).toLocaleDateString('el-GR')}\n                      </span>\n                    </TableCell>\n                    <TableCell className=\"text-center font-medium\">\n                      {customer.totalOrders}\n                    </TableCell>\n                    <TableCell className=\"font-medium\">\n                      €{customer.totalSpent.toFixed(2)}\n                    </TableCell>\n                    <TableCell>\n                      €{customer.averageOrderValue.toFixed(2)}\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={`text-xs ${tier.color} border-0`}>\n                        {tier.label}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {getStatusBadge(customer.status)}\n                    </TableCell>\n                    <TableCell>\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => setSelectedCustomer(customer)}\n                            data-testid={`button-view-customer-${customer.id}`}\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n                          <DialogHeader>\n                            <DialogTitle>Προφίλ Πελάτη - {selectedCustomer?.name}</DialogTitle>\n                            <DialogDescription>\n                              Αναλυτικές πληροφορίες και ιστορικό παραγγελιών\n                            </DialogDescription>\n                          </DialogHeader>\n                          {selectedCustomer && (\n                            <div className=\"space-y-6\">\n                              {/* Customer Overview */}\n                              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                                <Card>\n                                  <CardHeader>\n                                    <CardTitle className=\"text-lg flex items-center gap-2\">\n                                      <MapPin className=\"w-5 h-5\" />\n                                      Στοιχεία Επικοινωνίας\n                                    </CardTitle>\n                                  </CardHeader>\n                                  <CardContent className=\"space-y-3\">\n                                    <div>\n                                      <span className=\"font-medium\">Email:</span> {selectedCustomer.email}\n                                    </div>\n                                    <div>\n                                      <span className=\"font-medium\">Τηλέφωνο:</span> {selectedCustomer.phone}\n                                    </div>\n                                    <div>\n                                      <span className=\"font-medium\">Διεύθυνση:</span><br />\n                                      {selectedCustomer.address}\n                                    </div>\n                                    <div>\n                                      <span className=\"font-medium\">Εγγραφή:</span> {new Date(selectedCustomer.registrationDate).toLocaleDateString('el-GR')}\n                                    </div>\n                                    <div>\n                                      <span className=\"font-medium\">Τελευταία Παραγγελία:</span> {new Date(selectedCustomer.lastOrderDate).toLocaleDateString('el-GR')}\n                                    </div>\n                                  </CardContent>\n                                </Card>\n\n                                <Card>\n                                  <CardHeader>\n                                    <CardTitle className=\"text-lg flex items-center gap-2\">\n                                      <TrendingUp className=\"w-5 h-5\" />\n                                      Στατιστικά Στοιχεία\n                                    </CardTitle>\n                                  </CardHeader>\n                                  <CardContent className=\"space-y-3\">\n                                    <div className=\"flex justify-between\">\n                                      <span className=\"font-medium\">Συνολικές Παραγγελίες:</span>\n                                      <span>{selectedCustomer.totalOrders}</span>\n                                    </div>\n                                    <div className=\"flex justify-between\">\n                                      <span className=\"font-medium\">Συνολικά Έσοδα:</span>\n                                      <span className=\"font-bold\">€{selectedCustomer.totalSpent.toFixed(2)}</span>\n                                    </div>\n                                    <div className=\"flex justify-between\">\n                                      <span className=\"font-medium\">Μέσος Όρος Παραγγελίας:</span>\n                                      <span>€{selectedCustomer.averageOrderValue.toFixed(2)}</span>\n                                    </div>\n                                    <div className=\"flex justify-between\">\n                                      <span className=\"font-medium\">Επίπεδο Πελάτη:</span>\n                                      <Badge className={`${getCustomerTier(selectedCustomer.totalSpent).color} border-0`}>\n                                        {getCustomerTier(selectedCustomer.totalSpent).label}\n                                      </Badge>\n                                    </div>\n                                    <div className=\"flex justify-between\">\n                                      <span className=\"font-medium\">Κατάσταση:</span>\n                                      {getStatusBadge(selectedCustomer.status)}\n                                    </div>\n                                  </CardContent>\n                                </Card>\n                              </div>\n\n                              {/* Order History */}\n                              <Card>\n                                <CardHeader>\n                                  <CardTitle className=\"text-lg flex items-center gap-2\">\n                                    <ShoppingBag className=\"w-5 h-5\" />\n                                    Ιστορικό Παραγγελιών ({selectedCustomer.orderHistory.length})\n                                  </CardTitle>\n                                </CardHeader>\n                                <CardContent>\n                                  <Table>\n                                    <TableHeader>\n                                      <TableRow>\n                                        <TableHead>Παραγγελία</TableHead>\n                                        <TableHead>Ημερομηνία</TableHead>\n                                        <TableHead>Σύνολο</TableHead>\n                                        <TableHead>Κατάσταση</TableHead>\n                                      </TableRow>\n                                    </TableHeader>\n                                    <TableBody>\n                                      {selectedCustomer.orderHistory.map((order: any) => (\n                                        <TableRow key={order.id}>\n                                          <TableCell className=\"font-medium\">{order.id}</TableCell>\n                                          <TableCell>{new Date(order.date).toLocaleDateString('el-GR')}</TableCell>\n                                          <TableCell className=\"font-medium\">€{order.total.toFixed(2)}</TableCell>\n                                          <TableCell>{getOrderStatusBadge(order.status)}</TableCell>\n                                        </TableRow>\n                                      ))}\n                                    </TableBody>\n                                  </Table>\n                                </CardContent>\n                              </Card>\n                            </div>\n                          )}\n                        </DialogContent>\n                      </Dialog>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":20020},"client/src/pages/admin/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Package, \n  Users, \n  ShoppingCart, \n  TrendingUp, \n  Settings,\n  Search,\n  Eye,\n  Edit,\n  Trash2,\n  Plus,\n  BarChart3,\n  LogOut,\n  Download,\n  FileText\n} from \"lucide-react\";\nimport { createLaserSVG, downloadSVG } from \"@/lib/laser-svg-generator\";\n\nexport default function AdminDashboard() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [, setLocation] = useLocation();\n\n  // Check admin authentication\n  useEffect(() => {\n    const isAdminAuth = localStorage.getItem(\"adminAuth\");\n    if (!isAdminAuth) {\n      setLocation(\"/admin\");\n    }\n  }, [setLocation]);\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"adminAuth\");\n    localStorage.removeItem(\"adminUser\");\n    setLocation(\"/\");\n  };\n\n  // Mock data - θα αντικατασταθεί με πραγματικά δεδομένα\n  const mockOrders = [\n    {\n      id: \"ORD-001\",\n      customer: \"Γιάννης Παπαδόπουλος\",\n      email: \"giannis@example.com\",\n      total: 89.99,\n      status: \"pending\",\n      date: \"2024-01-15\",\n      items: [\"Fractal Παζλ - Ξύλο - 500 κομμάτια\"],\n      puzzleConfig: {\n        pieces: 500,\n        width: 400,\n        height: 300,\n        material: \"Ξύλο\"\n      }\n    },\n    {\n      id: \"ORD-002\", \n      customer: \"Μαρία Κωνσταντίνου\",\n      email: \"maria@example.com\",\n      total: 129.99,\n      status: \"shipped\",\n      date: \"2024-01-14\",\n      items: [\"Fractal Παζλ - Ακρυλικό - 1000 κομμάτια\"],\n      puzzleConfig: {\n        pieces: 1000,\n        width: 500,\n        height: 400,\n        material: \"Ακρυλικό\"\n      }\n    },\n    {\n      id: \"ORD-003\",\n      customer: \"Νίκος Αντωνίου\", \n      email: \"nikos@example.com\",\n      total: 59.99,\n      status: \"completed\",\n      date: \"2024-01-13\",\n      items: [\"Fractal Παζλ - Χαρτί - 300 κομμάτια\"],\n      puzzleConfig: {\n        pieces: 300,\n        width: 300,\n        height: 250,\n        material: \"Χαρτί\"\n      }\n    }\n  ];\n\n  // Real-time users data\n  const { data: users = [], refetch: refetchUsers } = useQuery<any[]>({\n    queryKey: [\"/api/admin/users\"],\n    retry: false,\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // User form state\n  const [userForm, setUserForm] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n  });\n\n  const [isCreateUserDialogOpen, setIsCreateUserDialogOpen] = useState(false);\n\n  // Create user mutation\n  const createUserMutation = useMutation({\n    mutationFn: async (userData: { firstName: string; lastName: string; email: string }) => {\n      const response = await fetch(\"/api/admin/users\", {\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(userData),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message);\n      }\n      \n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Επιτυχία\",\n        description: \"Ο χρήστης δημιουργήθηκε επιτυχώς\",\n      });\n      setUserForm({ firstName: \"\", lastName: \"\", email: \"\" });\n      setIsCreateUserDialogOpen(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      refetchUsers();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Σφάλμα\",\n        description: error.message || \"Σφάλμα κατά τη δημιουργία χρήστη\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const stats = {\n    totalOrders: mockOrders.length,\n    totalUsers: users.length,\n    totalRevenue: mockOrders.reduce((sum, order) => sum + order.total, 0),\n    pendingOrders: mockOrders.filter(order => order.status === \"pending\").length\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusMap = {\n      pending: { label: \"Εκκρεμής\", variant: \"destructive\" as const },\n      shipped: { label: \"Αποστολή\", variant: \"default\" as const },\n      completed: { label: \"Ολοκληρώθηκε\", variant: \"default\" as const }\n    };\n    const statusInfo = statusMap[status as keyof typeof statusMap] || { label: status, variant: \"secondary\" as const };\n    return <Badge variant={statusInfo.variant}>{statusInfo.label}</Badge>;\n  };\n\n  const handleDownloadSVG = (order: any) => {\n    if (!order.puzzleConfig) {\n      alert('Δεν υπάρχουν στοιχεία puzzle για αυτή την παραγγελία');\n      return;\n    }\n    \n    console.log('Δημιουργία SVG για παραγγελία:', order.id, order.puzzleConfig);\n    \n    try {\n      // Ensure we have valid puzzle config with required properties\n      const config = {\n        pieces: order.puzzleConfig.pieces || 100,\n        width: order.puzzleConfig.width || 400, \n        height: order.puzzleConfig.height || 300,\n        material: order.puzzleConfig.material || 'Ξύλο'\n      };\n      \n      console.log('Διαμόρφωση puzzle:', config);\n      \n      const laserGenerator = createLaserSVG(config, {\n        strokeWidth: 0.1, // 0.1mm stroke width for laser cutting\n        optimizeForLaser: true,\n        removeDuplicates: false\n      });\n      \n      const svgContent = laserGenerator.generateLaserSVG();\n      const filename = laserGenerator.generateFilename(order.id);\n      \n      console.log('Μέγεθος SVG:', svgContent.length, 'χαρακτήρες');\n      console.log('Όνομα αρχείου:', filename);\n      \n      if (svgContent.length < 500) {\n        console.error('Το SVG περιεχόμενο φαίνεται πολύ μικρό');\n        alert('Σφάλμα στη δημιουργία του SVG αρχείου');\n        return;\n      }\n      \n      downloadSVG(svgContent, filename);\n      console.log('Η λήψη ξεκίνησε επιτυχώς');\n      \n    } catch (error) {\n      console.error('Σφάλμα κατά τη δημιουργία SVG:', error);\n      alert('Σφάλμα κατά τη δημιουργία του SVG αρχείου');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background/95 to-primary/5\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-secondary rounded-xl flex items-center justify-center\">\n                <Settings className=\"w-6 h-6 text-primary-foreground\" />\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n                  Διαχείριση FractalCraft\n                </h1>\n                <p className=\"text-muted-foreground\">Διαχειρίσου παραγγελίες, χρήστες και στατιστικά</p>\n              </div>\n            </div>\n            <Button variant=\"outline\" onClick={handleLogout} data-testid=\"button-logout\">\n              <LogOut className=\"w-4 h-4 mr-2\" />\n              Αποσύνδεση\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"glass-morphism border-primary/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Συνολικές Παραγγελίες</CardTitle>\n              <ShoppingCart className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-primary\">{stats.totalOrders}</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass-morphism border-primary/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Συνολικοί Χρήστες</CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-primary\">{stats.totalUsers}</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass-morphism border-primary/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Συνολικά Έσοδα</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-primary\">€{stats.totalRevenue.toFixed(2)}</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"glass-morphism border-primary/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Εκκρεμείς Παραγγελίες</CardTitle>\n              <Package className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-destructive\">{stats.pendingOrders}</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        <Tabs defaultValue=\"orders\" className=\"space-y-6\">\n          <TabsList className=\"glass-morphism\">\n            <TabsTrigger value=\"orders\" data-testid=\"tab-orders\">Παραγγελίες</TabsTrigger>\n            <TabsTrigger value=\"users\" data-testid=\"tab-users\">Χρήστες</TabsTrigger>\n            <TabsTrigger value=\"products\" data-testid=\"tab-products\">Προϊόντα</TabsTrigger>\n            <TabsTrigger value=\"analytics\" data-testid=\"tab-analytics\">Αναλυτικά</TabsTrigger>\n          </TabsList>\n\n          {/* Orders Tab */}\n          <TabsContent value=\"orders\">\n            <Card className=\"glass-morphism border-primary/20\">\n              <CardHeader>\n                <div className=\"flex justify-between items-center\">\n                  <div>\n                    <CardTitle>Διαχείριση Παραγγελιών</CardTitle>\n                    <CardDescription>Προβολή και διαχείριση όλων των παραγγελιών</CardDescription>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <div className=\"relative\">\n                      <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        placeholder=\"Αναζήτηση παραγγελιών...\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"pl-8\"\n                        data-testid=\"input-search-orders\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {mockOrders.map((order) => (\n                    <div key={order.id} className=\"flex items-center justify-between p-4 border border-primary/20 rounded-lg glass-morphism\">\n                      <div className=\"space-y-1\">\n                        <div className=\"flex items-center space-x-4\">\n                          <span className=\"font-medium\" data-testid={`text-order-id-${order.id}`}>{order.id}</span>\n                          {getStatusBadge(order.status)}\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">{order.customer} - {order.email}</p>\n                        <p className=\"text-sm text-muted-foreground\">{order.date}</p>\n                        <p className=\"text-sm\">{order.items.join(\", \")}</p>\n                        {order.puzzleConfig && (\n                          <div className=\"flex items-center space-x-2 mt-1\">\n                            <FileText className=\"h-3 w-3 text-muted-foreground\" />\n                            <span className=\"text-xs text-muted-foreground\">\n                              SVG διαθέσιμο για laser cutting\n                            </span>\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"flex items-center space-x-4\">\n                        <span className=\"font-bold text-primary\">€{order.total}</span>\n                        <div className=\"flex space-x-2\">\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            onClick={() => handleDownloadSVG(order)}\n                            title=\"Κατέβασε SVG για Laser Cutting\"\n                            disabled={!order.puzzleConfig}\n                            data-testid={`button-download-svg-${order.id}`}\n                          >\n                            <Download className=\"h-4 w-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-${order.id}`}>\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\" data-testid={`button-edit-${order.id}`}>\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Users Tab */}\n          <TabsContent value=\"users\">\n            <Card className=\"glass-morphism border-primary/20\">\n              <CardHeader>\n                <div className=\"flex justify-between items-center\">\n                  <div>\n                    <CardTitle>Διαχείριση Χρηστών</CardTitle>\n                    <CardDescription>Προβολή και διαχείριση λογαριασμών χρηστών</CardDescription>\n                  </div>\n                  <Dialog open={isCreateUserDialogOpen} onOpenChange={setIsCreateUserDialogOpen}>\n                    <DialogTrigger asChild>\n                      <Button data-testid=\"button-add-user\">\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Νέος Χρήστης\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>Δημιουργία Νέου Χρήστη</DialogTitle>\n                        <DialogDescription>\n                          Προσθέστε έναν νέο χρήστη στην πλατφόρμα\n                        </DialogDescription>\n                      </DialogHeader>\n                      <div className=\"grid gap-4 py-4\">\n                        <div className=\"grid grid-cols-4 items-center gap-4\">\n                          <Label htmlFor=\"firstName\" className=\"text-right\">\n                            Όνομα\n                          </Label>\n                          <Input\n                            id=\"firstName\"\n                            value={userForm.firstName}\n                            onChange={(e) => setUserForm(prev => ({ ...prev, firstName: e.target.value }))}\n                            className=\"col-span-3\"\n                            data-testid=\"input-first-name\"\n                          />\n                        </div>\n                        <div className=\"grid grid-cols-4 items-center gap-4\">\n                          <Label htmlFor=\"lastName\" className=\"text-right\">\n                            Επώνυμο\n                          </Label>\n                          <Input\n                            id=\"lastName\"\n                            value={userForm.lastName}\n                            onChange={(e) => setUserForm(prev => ({ ...prev, lastName: e.target.value }))}\n                            className=\"col-span-3\"\n                            data-testid=\"input-last-name\"\n                          />\n                        </div>\n                        <div className=\"grid grid-cols-4 items-center gap-4\">\n                          <Label htmlFor=\"email\" className=\"text-right\">\n                            Email\n                          </Label>\n                          <Input\n                            id=\"email\"\n                            type=\"email\"\n                            value={userForm.email}\n                            onChange={(e) => setUserForm(prev => ({ ...prev, email: e.target.value }))}\n                            className=\"col-span-3\"\n                            data-testid=\"input-email\"\n                          />\n                        </div>\n                      </div>\n                      <DialogFooter>\n                        <Button \n                          onClick={() => createUserMutation.mutate(userForm)}\n                          disabled={createUserMutation.isPending || !userForm.firstName || !userForm.lastName || !userForm.email}\n                          data-testid=\"button-create-user\"\n                        >\n                          {createUserMutation.isPending ? \"Δημιουργία...\" : \"Δημιουργία Χρήστη\"}\n                        </Button>\n                      </DialogFooter>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {users.length === 0 ? (\n                    <p className=\"text-center text-muted-foreground py-8\">\n                      Δεν υπάρχουν χρήστες ακόμα. Δημιουργήστε τον πρώτο χρήστη.\n                    </p>\n                  ) : (\n                    users.map((user: any) => (\n                      <div key={user.id} className=\"flex items-center justify-between p-4 border border-primary/20 rounded-lg glass-morphism\">\n                        <div className=\"space-y-1\">\n                          <p className=\"font-medium\" data-testid={`text-user-name-${user.id}`}>\n                            {user.firstName} {user.lastName}\n                          </p>\n                          <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Εγγραφή: {new Date(user.createdAt).toLocaleDateString('el-GR')}\n                          </p>\n                        </div>\n                        <div className=\"flex items-center space-x-6\">\n                          <div className=\"text-center\">\n                            <p className=\"text-sm font-medium\">0</p>\n                            <p className=\"text-xs text-muted-foreground\">Παραγγελίες</p>\n                          </div>\n                          <div className=\"text-center\">\n                            <p className=\"text-sm font-medium\">€0.00</p>\n                            <p className=\"text-xs text-muted-foreground\">Σύνολο</p>\n                          </div>\n                          <div className=\"flex space-x-2\">\n                            <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-user-${user.id}`}>\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            <Button variant=\"ghost\" size=\"sm\" data-testid={`button-edit-user-${user.id}`}>\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Products Tab */}\n          <TabsContent value=\"products\">\n            <Card className=\"glass-morphism border-primary/20\">\n              <CardHeader>\n                <div className=\"flex justify-between items-center\">\n                  <div>\n                    <CardTitle>Διαχείριση Προϊόντων</CardTitle>\n                    <CardDescription>Διαχείριση fractal παζλ και ρυθμίσεων</CardDescription>\n                  </div>\n                  <Button data-testid=\"button-add-product\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Νέο Προϊόν\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div className=\"space-y-4\">\n                      <Label>Υλικά Παζλ</Label>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between items-center p-3 border border-primary/20 rounded-lg\">\n                          <span>Ξύλο Premium</span>\n                          <span className=\"text-primary font-medium\">Ενεργό</span>\n                        </div>\n                        <div className=\"flex justify-between items-center p-3 border border-primary/20 rounded-lg\">\n                          <span>Ακρυλικό HD</span>\n                          <span className=\"text-primary font-medium\">Ενεργό</span>\n                        </div>\n                        <div className=\"flex justify-between items-center p-3 border border-primary/20 rounded-lg\">\n                          <span>Χαρτί Museum</span>\n                          <span className=\"text-primary font-medium\">Ενεργό</span>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-4\">\n                      <Label>Μεγέθη Παζλ</Label>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between items-center p-3 border border-primary/20 rounded-lg\">\n                          <span>300 κομμάτια</span>\n                          <span className=\"text-primary font-medium\">€49.99</span>\n                        </div>\n                        <div className=\"flex justify-between items-center p-3 border border-primary/20 rounded-lg\">\n                          <span>500 κομμάτια</span>\n                          <span className=\"text-primary font-medium\">€79.99</span>\n                        </div>\n                        <div className=\"flex justify-between items-center p-3 border border-primary/20 rounded-lg\">\n                          <span>1000 κομμάτια</span>\n                          <span className=\"text-primary font-medium\">€119.99</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Analytics Tab */}\n          <TabsContent value=\"analytics\">\n            <Card className=\"glass-morphism border-primary/20\">\n              <CardHeader>\n                <CardTitle>Αναλυτικά & Στατιστικά</CardTitle>\n                <CardDescription>Παρακολούθηση επιδόσεων και τάσεων</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <Card className=\"border-primary/20\">\n                    <CardHeader>\n                      <CardTitle className=\"text-lg flex items-center\">\n                        <BarChart3 className=\"h-5 w-5 mr-2 text-primary\" />\n                        Πωλήσεις Ανά Μήνα\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between\">\n                          <span>Ιανουάριος</span>\n                          <span className=\"font-medium\">€1,250</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Δεκέμβριος</span>\n                          <span className=\"font-medium\">€2,100</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Νοέμβριος</span>\n                          <span className=\"font-medium\">€1,890</span>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"border-primary/20\">\n                    <CardHeader>\n                      <CardTitle className=\"text-lg flex items-center\">\n                        <Package className=\"h-5 w-5 mr-2 text-primary\" />\n                        Δημοφιλή Υλικά\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between\">\n                          <span>Ξύλο</span>\n                          <span className=\"font-medium\">45%</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Ακρυλικό</span>\n                          <span className=\"font-medium\">35%</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Χαρτί</span>\n                          <span className=\"font-medium\">20%</span>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":27292},"client/src/pages/admin/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Shield, Lock, User } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AdminLogin() {\n  const [, setLocation] = useLocation();\n  const [credentials, setCredentials] = useState({\n    username: \"\",\n    password: \"\"\n  });\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError(\"\");\n\n    // Simple admin credentials check\n    if (credentials.username === \"admin\" && credentials.password === \"admin123\") {\n      // Set admin session\n      localStorage.setItem(\"adminAuth\", \"true\");\n      localStorage.setItem(\"adminUser\", \"admin\");\n      \n      toast({\n        title: \"Επιτυχής σύνδεση\",\n        description: \"Καλώς ήρθατε στη διαχείριση FractalCraft\",\n      });\n      \n      setLocation(\"/admin/dashboard\");\n    } else {\n      setError(\"Λάθος στοιχεία σύνδεσης\");\n    }\n    \n    setIsLoading(false);\n  };\n\n  const handleChange = (field: string, value: string) => {\n    setCredentials(prev => ({ ...prev, [field]: value }));\n    if (error) setError(\"\");\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/10 via-background to-secondary/10\">\n      <div className=\"absolute inset-0 fractal-bg opacity-20\"></div>\n      \n      <Card className=\"w-full max-w-md mx-4 glass-morphism border-primary/20 relative z-10\">\n        <CardHeader className=\"text-center space-y-6\">\n          <div className=\"mx-auto w-16 h-16 bg-gradient-to-br from-primary to-secondary rounded-2xl flex items-center justify-center\">\n            <Shield className=\"w-8 h-8 text-primary-foreground\" />\n          </div>\n          \n          <div>\n            <CardTitle className=\"text-2xl bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n              Διαχείριση FractalCraft\n            </CardTitle>\n            <p className=\"text-muted-foreground mt-2\">\n              Συνδεθείτε για πρόσβαση στο admin panel\n            </p>\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\" className=\"flex items-center gap-2\">\n                <User className=\"w-4 h-4\" />\n                Username\n              </Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                value={credentials.username}\n                onChange={(e) => handleChange(\"username\", e.target.value)}\n                placeholder=\"Εισάγετε το username σας\"\n                required\n                data-testid=\"input-username\"\n                className=\"glass-morphism border-primary/20\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" className=\"flex items-center gap-2\">\n                <Lock className=\"w-4 h-4\" />\n                Password\n              </Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={credentials.password}\n                onChange={(e) => handleChange(\"password\", e.target.value)}\n                placeholder=\"Εισάγετε τον κωδικό σας\"\n                required\n                data-testid=\"input-password\"\n                className=\"glass-morphism border-primary/20\"\n              />\n            </div>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full bg-gradient-to-r from-primary to-secondary hover:from-primary/90 hover:to-secondary/90\"\n              disabled={isLoading}\n              data-testid=\"button-login\"\n            >\n              {isLoading ? \"Σύνδεση...\" : \"Σύνδεση στη Διαχείριση\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Στοιχεία demo: admin / admin123\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4803},"client/src/pages/admin/orders.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  Search, \n  Filter,\n  Eye,\n  Download,\n  Printer,\n  Package,\n  Truck,\n  CheckCircle,\n  XCircle,\n  Clock\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AdminOrders() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [selectedOrder, setSelectedOrder] = useState<any>(null);\n  const { toast } = useToast();\n\n  // Mock orders data\n  const mockOrders = [\n    {\n      id: \"ORD-001\",\n      customer: {\n        name: \"Μαρία Παπαδάκη\",\n        email: \"maria@example.com\",\n        phone: \"+30 6912345678\",\n        address: \"Ακαδημίας 15, Αθήνα 10671\"\n      },\n      items: [\n        { name: \"Fractal Mandala Premium\", quantity: 1, price: 89.90 },\n        { name: \"Sacred Geometry\", quantity: 1, price: 67.50 }\n      ],\n      total: 157.40,\n      status: \"processing\",\n      paymentMethod: \"card\",\n      createdAt: \"2025-08-12T10:30:00Z\",\n      updatedAt: \"2025-08-12T11:00:00Z\"\n    },\n    {\n      id: \"ORD-002\",\n      customer: {\n        name: \"Γιάννης Κωστόπουλος\",\n        email: \"giannis@example.com\",\n        phone: \"+30 6987654321\",\n        address: \"Πατησίων 120, Αθήνα 11251\"\n      },\n      items: [\n        { name: \"Cosmic Patterns\", quantity: 1, price: 124.90 }\n      ],\n      total: 124.90,\n      status: \"shipped\",\n      paymentMethod: \"paypal\",\n      createdAt: \"2025-08-11T15:20:00Z\",\n      updatedAt: \"2025-08-12T09:15:00Z\"\n    },\n    {\n      id: \"ORD-003\",\n      customer: {\n        name: \"Ελένη Αντωνίου\",\n        email: \"eleni@example.com\",\n        phone: \"+30 6976543210\",\n        address: \"Βουκουρεστίου 8, Αθήνα 10671\"\n      },\n      items: [\n        { name: \"Custom Puzzle\", quantity: 1, price: 67.30 }\n      ],\n      total: 67.30,\n      status: \"delivered\",\n      paymentMethod: \"bank_transfer\",\n      createdAt: \"2025-08-10T12:45:00Z\",\n      updatedAt: \"2025-08-11T16:30:00Z\"\n    },\n    {\n      id: \"ORD-004\",\n      customer: {\n        name: \"Νίκος Σταθόπουλος\",\n        email: \"nikos@example.com\",\n        phone: \"+30 6965432109\",\n        address: \"Κηφισίας 25, Κηφισιά 14562\"\n      },\n      items: [\n        { name: \"Fractal Mandala Premium\", quantity: 2, price: 179.80 }\n      ],\n      total: 179.80,\n      status: \"pending\",\n      paymentMethod: \"cash_on_delivery\",\n      createdAt: \"2025-08-11T08:15:00Z\",\n      updatedAt: \"2025-08-11T08:15:00Z\"\n    },\n  ];\n\n  const statusOptions = [\n    { value: \"all\", label: \"Όλες οι Καταστάσεις\" },\n    { value: \"pending\", label: \"Εκκρεμεί\" },\n    { value: \"processing\", label: \"Επεξεργασία\" },\n    { value: \"shipped\", label: \"Αποστάλη\" },\n    { value: \"delivered\", label: \"Παραδόθηκε\" },\n    { value: \"cancelled\", label: \"Ακυρώθηκε\" },\n  ];\n\n  const filteredOrders = mockOrders.filter(order => {\n    const matchesSearch = \n      order.id.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      order.customer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      order.customer.email.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || order.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  });\n\n  const getStatusBadge = (status: string) => {\n    const config = {\n      pending: { variant: \"outline\" as const, label: \"Εκκρεμεί\", icon: Clock },\n      processing: { variant: \"default\" as const, label: \"Επεξεργασία\", icon: Package },\n      shipped: { variant: \"secondary\" as const, label: \"Αποστάλη\", icon: Truck },\n      delivered: { variant: \"secondary\" as const, label: \"Παραδόθηκε\", icon: CheckCircle },\n      cancelled: { variant: \"destructive\" as const, label: \"Ακυρώθηκε\", icon: XCircle }\n    };\n\n    const statusConfig = config[status as keyof typeof config] || config.pending;\n    const Icon = statusConfig.icon;\n\n    return (\n      <Badge variant={statusConfig.variant} className=\"text-xs flex items-center gap-1\">\n        <Icon className=\"w-3 h-3\" />\n        {statusConfig.label}\n      </Badge>\n    );\n  };\n\n  const getPaymentMethodLabel = (method: string) => {\n    const labels: Record<string, string> = {\n      card: \"Πιστωτική Κάρτα\",\n      paypal: \"PayPal\",\n      bank_transfer: \"Τραπεζική Μεταφορά\",\n      cash_on_delivery: \"Αντικαταβολή\"\n    };\n    return labels[method] || method;\n  };\n\n  const handleStatusUpdate = (orderId: string, newStatus: string) => {\n    toast({\n      title: \"Κατάσταση Ενημερώθηκε\",\n      description: `Η παραγγελία ${orderId} ενημερώθηκε σε \"${statusOptions.find(s => s.value === newStatus)?.label}\".`,\n    });\n  };\n\n  const handleExportCSV = () => {\n    // Mock CSV export\n    const csvContent = \"data:text/csv;charset=utf-8,\" + \n      \"ID,Customer,Email,Total,Status,Date\\n\" +\n      filteredOrders.map(order => \n        `${order.id},\"${order.customer.name}\",${order.customer.email},${order.total},${order.status},${new Date(order.createdAt).toLocaleDateString('el-GR')}`\n      ).join(\"\\n\");\n    \n    const encodedUri = encodeURI(csvContent);\n    const link = document.createElement(\"a\");\n    link.setAttribute(\"href\", encodedUri);\n    link.setAttribute(\"download\", `orders-${new Date().toISOString().split('T')[0]}.csv`);\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n    toast({\n      title: \"Εξαγωγή Επιτυχής\",\n      description: `${filteredOrders.length} παραγγελίες εξάχθηκαν σε CSV.`,\n    });\n  };\n\n  const handlePrintOrder = (order: any) => {\n    toast({\n      title: \"Εκτύπωση Παραγγελίας\",\n      description: `Η παραγγελία ${order.id} στέλνεται για εκτύπωση.`,\n    });\n  };\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Διαχείριση Παραγγελιών</h1>\n          <p className=\"text-muted-foreground\">Παρακολούθηση και διαχείριση παραγγελιών</p>\n        </div>\n        <Button onClick={handleExportCSV} data-testid=\"button-export-csv\">\n          <Download className=\"w-4 h-4 mr-2\" />\n          Εξαγωγή CSV\n        </Button>\n      </div>\n\n      {/* Filters and Search */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Αναζήτηση παραγγελιών (ID, πελάτης, email)...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-orders\"\n                />\n              </div>\n            </div>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-full md:w-48\">\n                <Filter className=\"w-4 h-4 mr-2\" />\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {statusOptions.map(status => (\n                  <SelectItem key={status.value} value={status.value}>\n                    {status.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Orders Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Παραγγελίες ({filteredOrders.length})</CardTitle>\n          <CardDescription>Όλες οι παραγγελίες με δυνατότητα ενημέρωσης κατάστασης</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Παραγγελία</TableHead>\n                <TableHead>Πελάτης</TableHead>\n                <TableHead>Προϊόντα</TableHead>\n                <TableHead>Σύνολο</TableHead>\n                <TableHead>Κατάσταση</TableHead>\n                <TableHead>Πληρωμή</TableHead>\n                <TableHead>Ημερομηνία</TableHead>\n                <TableHead>Ενέργειες</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredOrders.map((order) => (\n                <TableRow key={order.id}>\n                  <TableCell className=\"font-medium\">{order.id}</TableCell>\n                  <TableCell>\n                    <div>\n                      <p className=\"font-medium\">{order.customer.name}</p>\n                      <p className=\"text-xs text-muted-foreground\">{order.customer.email}</p>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"text-xs\">\n                      {order.items.map((item, idx) => (\n                        <div key={idx}>\n                          {item.name} x{item.quantity}\n                        </div>\n                      ))}\n                    </div>\n                  </TableCell>\n                  <TableCell className=\"font-medium\">€{order.total.toFixed(2)}</TableCell>\n                  <TableCell>{getStatusBadge(order.status)}</TableCell>\n                  <TableCell>\n                    <span className=\"text-xs\">{getPaymentMethodLabel(order.paymentMethod)}</span>\n                  </TableCell>\n                  <TableCell>\n                    <span className=\"text-xs\">\n                      {new Date(order.createdAt).toLocaleDateString('el-GR')}\n                    </span>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-2\">\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => setSelectedOrder(order)}\n                            data-testid={`button-view-order-${order.id}`}\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"max-w-2xl\">\n                          <DialogHeader>\n                            <DialogTitle>Λεπτομέρειες Παραγγελίας {selectedOrder?.id}</DialogTitle>\n                            <DialogDescription>\n                              Πλήρες προφίλ και ιστορικό παραγγελίας\n                            </DialogDescription>\n                          </DialogHeader>\n                          {selectedOrder && (\n                            <div className=\"space-y-6\">\n                              {/* Customer Info */}\n                              <div>\n                                <h3 className=\"font-semibold mb-2\">Στοιχεία Πελάτη</h3>\n                                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                                  <div>\n                                    <span className=\"font-medium\">Όνομα:</span> {selectedOrder.customer.name}\n                                  </div>\n                                  <div>\n                                    <span className=\"font-medium\">Email:</span> {selectedOrder.customer.email}\n                                  </div>\n                                  <div>\n                                    <span className=\"font-medium\">Τηλέφωνο:</span> {selectedOrder.customer.phone}\n                                  </div>\n                                  <div className=\"col-span-2\">\n                                    <span className=\"font-medium\">Διεύθυνση:</span> {selectedOrder.customer.address}\n                                  </div>\n                                </div>\n                              </div>\n\n                              {/* Order Items */}\n                              <div>\n                                <h3 className=\"font-semibold mb-2\">Προϊόντα</h3>\n                                <div className=\"space-y-2\">\n                                  {selectedOrder.items.map((item: any, idx: number) => (\n                                    <div key={idx} className=\"flex justify-between items-center p-2 bg-muted rounded\">\n                                      <span>{item.name}</span>\n                                      <div className=\"text-right\">\n                                        <span className=\"font-medium\">x{item.quantity}</span>\n                                        <br />\n                                        <span className=\"text-sm text-muted-foreground\">€{item.price.toFixed(2)}</span>\n                                      </div>\n                                    </div>\n                                  ))}\n                                  <div className=\"flex justify-between font-bold border-t pt-2\">\n                                    <span>Σύνολο:</span>\n                                    <span>€{selectedOrder.total.toFixed(2)}</span>\n                                  </div>\n                                </div>\n                              </div>\n\n                              {/* Status Update */}\n                              <div>\n                                <h3 className=\"font-semibold mb-2\">Ενημέρωση Κατάστασης</h3>\n                                <div className=\"flex items-center gap-4\">\n                                  <Select\n                                    defaultValue={selectedOrder.status}\n                                    onValueChange={(value) => handleStatusUpdate(selectedOrder.id, value)}\n                                  >\n                                    <SelectTrigger className=\"w-48\">\n                                      <SelectValue />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                      {statusOptions.slice(1).map(status => (\n                                        <SelectItem key={status.value} value={status.value}>\n                                          {status.label}\n                                        </SelectItem>\n                                      ))}\n                                    </SelectContent>\n                                  </Select>\n                                  <Button\n                                    variant=\"outline\"\n                                    onClick={() => handlePrintOrder(selectedOrder)}\n                                    data-testid={`button-print-order-${selectedOrder.id}`}\n                                  >\n                                    <Printer className=\"w-4 h-4 mr-2\" />\n                                    Εκτύπωση\n                                  </Button>\n                                </div>\n                              </div>\n\n                              {/* Timeline */}\n                              <div>\n                                <h3 className=\"font-semibold mb-2\">Χρονολόγιο</h3>\n                                <div className=\"text-sm space-y-1\">\n                                  <div>\n                                    <span className=\"font-medium\">Δημιουργία:</span> {new Date(selectedOrder.createdAt).toLocaleString('el-GR')}\n                                  </div>\n                                  <div>\n                                    <span className=\"font-medium\">Τελευταία Ενημέρωση:</span> {new Date(selectedOrder.updatedAt).toLocaleString('el-GR')}\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          )}\n                        </DialogContent>\n                      </Dialog>\n                      \n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handlePrintOrder(order)}\n                        data-testid={`button-print-order-quick-${order.id}`}\n                      >\n                        <Printer className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":17597},"client/src/pages/admin/products.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { \n  Package, \n  Search, \n  Plus, \n  Edit, \n  Trash2, \n  Filter,\n  Upload,\n  Eye,\n  AlertTriangle,\n  CheckCircle\n} from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst productSchema = z.object({\n  name: z.string().min(1, \"Το όνομα είναι απαραίτητο\"),\n  description: z.string().min(10, \"Η περιγραφή πρέπει να έχει τουλάχιστον 10 χαρακτήρες\"),\n  category: z.string().min(1, \"Η κατηγορία είναι απαραίτητη\"),\n  material: z.string().min(1, \"Το υλικό είναι απαραίτητο\"),\n  size: z.string().min(1, \"Το μέγεθος είναι απαραίτητο\"),\n  pieceCount: z.number().min(50, \"Τουλάχιστον 50 κομμάτια\"),\n  price: z.number().min(0.01, \"Η τιμή πρέπει να είναι μεγαλύτερη από 0\"),\n  stock: z.number().min(0, \"Το απόθεμα δεν μπορεί να είναι αρνητικό\"),\n  isActive: z.boolean(),\n});\n\ntype ProductForm = z.infer<typeof productSchema>;\n\nexport default function AdminProducts() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<any>(null);\n  const [selectedProducts, setSelectedProducts] = useState<Set<string>>(new Set());\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<ProductForm>({\n    resolver: zodResolver(productSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      category: \"\",\n      material: \"wood\",\n      size: \"\",\n      pieceCount: 500,\n      price: 0,\n      stock: 0,\n      isActive: true,\n    },\n  });\n\n  // Mock data - in real app would come from API\n  const mockProducts = [\n    {\n      id: \"1\",\n      name: \"Fractal Mandala Premium\",\n      description: \"Εκπληκτικό fractal mandala σε υψηλή ανάλυση\",\n      category: \"fractal\",\n      material: \"wood\",\n      size: \"40x40cm\",\n      pieceCount: 1000,\n      price: 89.90,\n      stock: 45,\n      isActive: true,\n      imageUrl: \"https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=200\",\n      createdAt: \"2025-08-01\"\n    },\n    {\n      id: \"2\", \n      name: \"Sacred Geometry\",\n      description: \"Ιερή γεωμετρία με χρυσή τομή\",\n      category: \"geometry\",\n      material: \"acrylic\",\n      size: \"30x30cm\",\n      pieceCount: 750,\n      price: 67.50,\n      stock: 12,\n      isActive: true,\n      imageUrl: \"https://images.unsplash.com/photo-1552308995-2baac1ad5490?w=200\",\n      createdAt: \"2025-07-28\"\n    },\n    {\n      id: \"3\",\n      name: \"Cosmic Patterns\",\n      description: \"Κοσμικά μοτίβα με galactic theme\",\n      category: \"cosmic\",\n      material: \"paper\",\n      size: \"50x35cm\", \n      pieceCount: 1500,\n      price: 124.90,\n      stock: 3,\n      isActive: false,\n      imageUrl: \"https://images.unsplash.com/photo-1446776877081-d282a0f896e2?w=200\",\n      createdAt: \"2025-07-25\"\n    },\n  ];\n\n  const categories = [\n    { value: \"all\", label: \"Όλες οι Κατηγορίες\" },\n    { value: \"fractal\", label: \"Fractal\" },\n    { value: \"geometry\", label: \"Γεωμετρία\" },\n    { value: \"cosmic\", label: \"Κοσμικά\" },\n    { value: \"custom\", label: \"Προσωποποιημένα\" },\n  ];\n\n  const materials = [\n    { value: \"wood\", label: \"Ξύλο\" },\n    { value: \"acrylic\", label: \"Ακρυλικό\" },\n    { value: \"paper\", label: \"Χαρτόνι\" },\n  ];\n\n  const filteredProducts = mockProducts.filter(product => {\n    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         product.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = categoryFilter === \"all\" || product.category === categoryFilter;\n    return matchesSearch && matchesCategory;\n  });\n\n  const handleSelectProduct = (productId: string) => {\n    const newSelected = new Set(selectedProducts);\n    if (newSelected.has(productId)) {\n      newSelected.delete(productId);\n    } else {\n      newSelected.add(productId);\n    }\n    setSelectedProducts(newSelected);\n  };\n\n  const handleSelectAll = () => {\n    if (selectedProducts.size === filteredProducts.length) {\n      setSelectedProducts(new Set());\n    } else {\n      setSelectedProducts(new Set(filteredProducts.map(p => p.id)));\n    }\n  };\n\n  const onSubmit = (data: ProductForm) => {\n    console.log(\"Product data:\", data);\n    toast({\n      title: editingProduct ? \"Προϊόν Ενημερώθηκε\" : \"Προϊόν Δημιουργήθηκε\",\n      description: \"Το προϊόν αποθηκεύτηκε επιτυχώς.\",\n    });\n    setIsAddDialogOpen(false);\n    setEditingProduct(null);\n    form.reset();\n  };\n\n  const handleEdit = (product: any) => {\n    setEditingProduct(product);\n    form.reset({\n      name: product.name,\n      description: product.description,\n      category: product.category,\n      material: product.material,\n      size: product.size,\n      pieceCount: product.pieceCount,\n      price: product.price,\n      stock: product.stock,\n      isActive: product.isActive,\n    });\n    setIsAddDialogOpen(true);\n  };\n\n  const handleDelete = (productId: string) => {\n    if (confirm(\"Είστε σίγουροι ότι θέλετε να διαγράψετε αυτό το προϊόν;\")) {\n      toast({\n        title: \"Προϊόν Διαγράφηκε\",\n        description: \"Το προϊόν διαγράφηκε επιτυχώς.\",\n      });\n    }\n  };\n\n  const handleBulkAction = (action: string) => {\n    if (selectedProducts.size === 0) {\n      toast({\n        title: \"Καμία Επιλογή\",\n        description: \"Επιλέξτε τουλάχιστον ένα προϊόν.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    switch (action) {\n      case \"delete\":\n        if (confirm(`Διαγραφή ${selectedProducts.size} προϊόντων;`)) {\n          toast({ title: \"Προϊόντα Διαγράφηκαν\", description: `${selectedProducts.size} προϊόντα διαγράφηκαν.` });\n          setSelectedProducts(new Set());\n        }\n        break;\n      case \"activate\":\n        toast({ title: \"Προϊόντα Ενεργοποιήθηκαν\", description: `${selectedProducts.size} προϊόντα ενεργοποιήθηκαν.` });\n        setSelectedProducts(new Set());\n        break;\n      case \"deactivate\":\n        toast({ title: \"Προϊόντα Απενεργοποιήθηκαν\", description: `${selectedProducts.size} προϊόντα απενεργοποιήθηκαν.` });\n        setSelectedProducts(new Set());\n        break;\n    }\n  };\n\n  const getStockStatus = (stock: number) => {\n    if (stock === 0) return { variant: \"destructive\" as const, label: \"Εξαντλήθηκε\" };\n    if (stock <= 5) return { variant: \"outline\" as const, label: \"Χαμηλό απόθεμα\" };\n    return { variant: \"secondary\" as const, label: \"Διαθέσιμο\" };\n  };\n\n  return (\n    <div className=\"p-6 max-w-7xl mx-auto\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Διαχείριση Προϊόντων</h1>\n          <p className=\"text-muted-foreground\">Διαχειριστείτε τα προϊόντα του καταστήματος</p>\n        </div>\n        \n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-product\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Νέο Προϊόν\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>{editingProduct ? \"Επεξεργασία Προϊόντος\" : \"Νέο Προϊόν\"}</DialogTitle>\n              <DialogDescription>\n                {editingProduct ? \"Επεξεργαστείτε τα στοιχεία του προϊόντος\" : \"Δημιουργήστε νέο προϊόν\"}\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Όνομα Προϊόντος</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"π.χ. Fractal Mandala\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"category\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Κατηγορία</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Επιλογή κατηγορίας\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {categories.slice(1).map(cat => (\n                              <SelectItem key={cat.value} value={cat.value}>\n                                {cat.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Περιγραφή</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Αναλυτική περιγραφή του προϊόντος...\"\n                          rows={3}\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"material\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Υλικό</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {materials.map(material => (\n                              <SelectItem key={material.value} value={material.value}>\n                                {material.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"size\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Μέγεθος</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"π.χ. 40x40cm\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"pieceCount\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Κομμάτια</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            {...field}\n                            onChange={(e) => field.onChange(Number(e.target.value))}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"price\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Τιμή (€)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.01\"\n                            {...field}\n                            onChange={(e) => field.onChange(Number(e.target.value))}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"stock\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Απόθεμα</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\"\n                            {...field}\n                            onChange={(e) => field.onChange(Number(e.target.value))}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"isActive\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4\">\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                        <div className=\"space-y-1 leading-none\">\n                          <FormLabel>Ενεργό</FormLabel>\n                        </div>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"flex justify-end gap-2 pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => {\n                      setIsAddDialogOpen(false);\n                      setEditingProduct(null);\n                      form.reset();\n                    }}\n                  >\n                    Ακύρωση\n                  </Button>\n                  <Button type=\"submit\">\n                    {editingProduct ? \"Ενημέρωση\" : \"Δημιουργία\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Filters and Search */}\n      <Card className=\"mb-6\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Αναζήτηση προϊόντων...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-products\"\n                />\n              </div>\n            </div>\n            <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n              <SelectTrigger className=\"w-full md:w-48\">\n                <Filter className=\"w-4 h-4 mr-2\" />\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {categories.map(category => (\n                  <SelectItem key={category.value} value={category.value}>\n                    {category.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Bulk Actions */}\n      {selectedProducts.size > 0 && (\n        <Card className=\"mb-6\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-muted-foreground\">\n                {selectedProducts.size} προϊόν(τα) επιλεγμένα\n              </span>\n              <div className=\"flex gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleBulkAction(\"activate\")}\n                  data-testid=\"button-bulk-activate\"\n                >\n                  <CheckCircle className=\"w-4 h-4 mr-2\" />\n                  Ενεργοποίηση\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => handleBulkAction(\"deactivate\")}\n                  data-testid=\"button-bulk-deactivate\"\n                >\n                  Απενεργοποίηση\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  onClick={() => handleBulkAction(\"delete\")}\n                  data-testid=\"button-bulk-delete\"\n                >\n                  <Trash2 className=\"w-4 h-4 mr-2\" />\n                  Διαγραφή\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Products Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Προϊόντα ({filteredProducts.length})</CardTitle>\n          <CardDescription>Διαχειριστείτε όλα τα προϊόντα του καταστήματος</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead className=\"w-12\">\n                  <Checkbox\n                    checked={selectedProducts.size === filteredProducts.length && filteredProducts.length > 0}\n                    onCheckedChange={handleSelectAll}\n                  />\n                </TableHead>\n                <TableHead>Προϊόν</TableHead>\n                <TableHead>Κατηγορία</TableHead>\n                <TableHead>Υλικό</TableHead>\n                <TableHead>Κομμάτια</TableHead>\n                <TableHead>Τιμή</TableHead>\n                <TableHead>Απόθεμα</TableHead>\n                <TableHead>Κατάσταση</TableHead>\n                <TableHead>Ενέργειες</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredProducts.map((product) => (\n                <TableRow key={product.id}>\n                  <TableCell>\n                    <Checkbox\n                      checked={selectedProducts.has(product.id)}\n                      onCheckedChange={() => handleSelectProduct(product.id)}\n                    />\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-3\">\n                      <img\n                        src={product.imageUrl}\n                        alt={product.name}\n                        className=\"w-12 h-12 object-cover rounded\"\n                      />\n                      <div>\n                        <p className=\"font-medium\">{product.name}</p>\n                        <p className=\"text-xs text-muted-foreground\">{product.size}</p>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant=\"outline\">\n                      {categories.find(c => c.value === product.category)?.label}\n                    </Badge>\n                  </TableCell>\n                  <TableCell className=\"capitalize\">{product.material}</TableCell>\n                  <TableCell>{product.pieceCount}</TableCell>\n                  <TableCell>€{product.price.toFixed(2)}</TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-2\">\n                      {product.stock <= 5 && product.stock > 0 && (\n                        <AlertTriangle className=\"w-4 h-4 text-orange-500\" />\n                      )}\n                      <span className={product.stock <= 5 ? \"text-orange-600 font-medium\" : \"\"}>\n                        {product.stock}\n                      </span>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex gap-2\">\n                      <Badge variant={product.isActive ? \"secondary\" : \"outline\"}>\n                        {product.isActive ? \"Ενεργό\" : \"Ανενεργό\"}\n                      </Badge>\n                      <Badge variant={getStockStatus(product.stock).variant}>\n                        {getStockStatus(product.stock).label}\n                      </Badge>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleEdit(product)}\n                        data-testid={`button-edit-product-${product.id}`}\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleDelete(product.id)}\n                        data-testid={`button-delete-product-${product.id}`}\n                      >\n                        <Trash2 className=\"w-4 h-4 text-destructive\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":24433},"client/src/pages/auth/login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Link, useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Eye, EyeOff, LogIn } from \"lucide-react\";\nimport { FcGoogle } from \"react-icons/fc\";\nimport { SiApple } from \"react-icons/si\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Εισάγετε έγκυρο email\"),\n  password: z.string().min(6, \"Ο κωδικός πρέπει να έχει τουλάχιστον 6 χαρακτήρες\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginForm) => {\n      return await apiRequest('POST', '/api/auth/login', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Επιτυχής Σύνδεση!\",\n        description: \"Καλώς ήρθατε πίσω στο FractalCraft!\",\n      });\n      setLocation('/');\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Σφάλμα Σύνδεσης\",\n        description: error.message || \"Λάθος στοιχεία σύνδεσης\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSocialLogin = (provider: 'google' | 'apple') => {\n    // Redirect to social login endpoint\n    window.location.href = `/api/auth/${provider}`;\n  };\n\n  const onSubmit = (data: LoginForm) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background/95 to-primary/5 flex items-center justify-center py-12 px-4\">\n      <div className=\"w-full max-w-md\">\n        <Card className=\"glass-morphism border-primary/20\">\n          <CardHeader className=\"text-center space-y-4\">\n            <div className=\"mx-auto w-12 h-12 bg-gradient-to-br from-primary to-secondary rounded-xl flex items-center justify-center\">\n              <LogIn className=\"w-6 h-6 text-primary-foreground\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n                Σύνδεση\n              </CardTitle>\n              <CardDescription className=\"text-muted-foreground\">\n                Συνδεθείτε στον λογαριασμό σας για να συνεχίσετε\n              </CardDescription>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"email\"\n                          placeholder=\"your.email@example.com\"\n                          data-testid=\"input-email\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Κωδικός</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            type={showPassword ? \"text\" : \"password\"}\n                            placeholder=\"Εισάγετε τον κωδικό σας\"\n                            data-testid=\"input-password\"\n                            {...field}\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowPassword(!showPassword)}\n                            data-testid=\"button-toggle-password\"\n                          >\n                            {showPassword ? (\n                              <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={loginMutation.isPending}\n                  data-testid=\"button-submit-login\"\n                >\n                  {loginMutation.isPending ? \"Σύνδεση...\" : \"Σύνδεση\"}\n                </Button>\n              </form>\n            </Form>\n\n            <div className=\"mt-6\">\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 flex items-center\">\n                  <div className=\"w-full border-t border-border\"></div>\n                </div>\n                <div className=\"relative flex justify-center text-sm\">\n                  <span className=\"bg-background px-4 text-muted-foreground\">ή συνδεθείτε με</span>\n                </div>\n              </div>\n\n              <div className=\"mt-6 grid grid-cols-2 gap-4\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => handleSocialLogin('google')}\n                  className=\"w-full\"\n                  data-testid=\"button-google-login\"\n                >\n                  <FcGoogle className=\"w-5 h-5 mr-2\" />\n                  Google\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => handleSocialLogin('apple')}\n                  className=\"w-full\"\n                  data-testid=\"button-apple-login\"\n                >\n                  <SiApple className=\"w-5 h-5 mr-2\" />\n                  Apple\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-muted-foreground\">\n                Δεν έχετε λογαριασμό;{\" \"}\n                <Link href=\"/signup\">\n                  <span className=\"font-medium text-primary hover:text-primary/80 cursor-pointer\" data-testid=\"link-signup\">\n                    Εγγραφή εδώ\n                  </span>\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":7691},"client/src/pages/auth/signup.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Link, useLocation } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Eye, EyeOff, UserPlus } from \"lucide-react\";\n\nconst signupSchema = z.object({\n  firstName: z.string().min(2, \"Το όνομα πρέπει να έχει τουλάχιστον 2 χαρακτήρες\"),\n  lastName: z.string().min(2, \"Το επώνυμο πρέπει να έχει τουλάχιστον 2 χαρακτήρες\"),\n  email: z.string().email(\"Εισάγετε έγκυρο email\"),\n  password: z.string().min(6, \"Ο κωδικός πρέπει να έχει τουλάχιστον 6 χαρακτήρες\"),\n  confirmPassword: z.string().min(6, \"Επιβεβαιώστε τον κωδικό\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Οι κωδικοί δεν ταιριάζουν\",\n  path: [\"confirmPassword\"],\n});\n\ntype SignupForm = z.infer<typeof signupSchema>;\n\nexport default function Signup() {\n  const [, setLocation] = useLocation();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<SignupForm>({\n    resolver: zodResolver(signupSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const signupMutation = useMutation({\n    mutationFn: async (data: SignupForm) => {\n      return await apiRequest('POST', '/api/auth/signup', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Επιτυχής Εγγραφή!\",\n        description: \"Ο λογαριασμός σας δημιουργήθηκε. Καλώς ήρθατε στο FractalCraft!\",\n      });\n      setLocation('/');\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Σφάλμα Εγγραφής\",\n        description: error.message || \"Δεν ήταν δυνατή η δημιουργία λογαριασμού\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: SignupForm) => {\n    signupMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background/95 to-primary/5 flex items-center justify-center py-12 px-4\">\n      <div className=\"w-full max-w-md\">\n        <Card className=\"glass-morphism border-primary/20\">\n          <CardHeader className=\"text-center space-y-4\">\n            <div className=\"mx-auto w-12 h-12 bg-gradient-to-br from-primary to-secondary rounded-xl flex items-center justify-center\">\n              <UserPlus className=\"w-6 h-6 text-primary-foreground\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n                Εγγραφή\n              </CardTitle>\n              <CardDescription className=\"text-muted-foreground\">\n                Δημιουργήστε έναν νέο λογαριασμό για να ξεκινήσετε\n              </CardDescription>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Όνομα</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Γιάννης\"\n                            data-testid=\"input-first-name\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Επώνυμο</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Παπαδόπουλος\"\n                            data-testid=\"input-last-name\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"email\"\n                          placeholder=\"your.email@example.com\"\n                          data-testid=\"input-email\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Κωδικός</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            type={showPassword ? \"text\" : \"password\"}\n                            placeholder=\"Δημιουργήστε κωδικό\"\n                            data-testid=\"input-password\"\n                            {...field}\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowPassword(!showPassword)}\n                            data-testid=\"button-toggle-password\"\n                          >\n                            {showPassword ? (\n                              <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"confirmPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Επιβεβαίωση Κωδικού</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            type={showConfirmPassword ? \"text\" : \"password\"}\n                            placeholder=\"Επιβεβαιώστε τον κωδικό\"\n                            data-testid=\"input-confirm-password\"\n                            {...field}\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                            onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                            data-testid=\"button-toggle-confirm-password\"\n                          >\n                            {showConfirmPassword ? (\n                              <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                            ) : (\n                              <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                            )}\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full\"\n                  disabled={signupMutation.isPending}\n                  data-testid=\"button-submit-signup\"\n                >\n                  {signupMutation.isPending ? \"Δημιουργία λογαριασμού...\" : \"Δημιουργία λογαριασμού\"}\n                </Button>\n              </form>\n            </Form>\n\n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-muted-foreground\">\n                Έχετε ήδη λογαριασμό;{\" \"}\n                <Link href=\"/login\">\n                  <span className=\"font-medium text-primary hover:text-primary/80 cursor-pointer\" data-testid=\"link-login\">\n                    Σύνδεση εδώ\n                  </span>\n                </Link>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":10024}}}